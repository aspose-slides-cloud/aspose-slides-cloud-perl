=begin comment

Copyright (c) 2019 Aspose Pty Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end comment

=cut

use Test::More;
use Test::Exception;

use AsposeSlidesCloud::SlidesApi;
use AsposeSlidesCloud::TestUtils;

use strict;
use warnings;

my $utils = AsposeSlidesCloud::TestUtils->new();

#
# copy_file test
#
subtest 'copy_file' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $utils->initialize('copy_file', '');
    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        fail("copy_file raised an exception: $@");
    }
    pass();
};

subtest 'copy_file invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('copy_file', 'src_path', $params{ src_path });
    $utils->initialize('copy_file', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'src_path', $params{ src_path }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'src_path');
    }
};

subtest 'copy_file invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('copy_file', 'dest_path', $params{ dest_path });
    $utils->initialize('copy_file', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'dest_path', $params{ dest_path }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'dest_path');
    }
};

subtest 'copy_file invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('copy_file', 'src_storage_name', $params{ src_storage_name });
    $utils->initialize('copy_file', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'src_storage_name', $params{ src_storage_name }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'src_storage_name');
    }
};

subtest 'copy_file invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('copy_file', 'dest_storage_name', $params{ dest_storage_name });
    $utils->initialize('copy_file', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'dest_storage_name', $params{ dest_storage_name }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'dest_storage_name');
    }
};

subtest 'copy_file invalid version_id' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('copy_file', 'version_id', $params{ version_id });
    $utils->initialize('copy_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'version_id');
    }
};

#
# copy_folder test
#
subtest 'copy_folder' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $utils->initialize('copy_folder', '');
    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        fail("copy_folder raised an exception: $@");
    }
    pass();
};

subtest 'copy_folder invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('copy_folder', 'src_path', $params{ src_path });
    $utils->initialize('copy_folder', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'src_path', $params{ src_path }, $@);
    } else {
        $utils->assert_no_error('copy_folder', 'src_path');
    }
};

subtest 'copy_folder invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('copy_folder', 'dest_path', $params{ dest_path });
    $utils->initialize('copy_folder', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'dest_path', $params{ dest_path }, $@);
    } else {
        $utils->assert_no_error('copy_folder', 'dest_path');
    }
};

subtest 'copy_folder invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('copy_folder', 'src_storage_name', $params{ src_storage_name });
    $utils->initialize('copy_folder', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'src_storage_name', $params{ src_storage_name }, $@);
    } else {
        $utils->assert_no_error('copy_folder', 'src_storage_name');
    }
};

subtest 'copy_folder invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('copy_folder', 'dest_storage_name', $params{ dest_storage_name });
    $utils->initialize('copy_folder', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'dest_storage_name', $params{ dest_storage_name }, $@);
    } else {
        $utils->assert_no_error('copy_folder', 'dest_storage_name');
    }
};

#
# create_folder test
#
subtest 'create_folder' => sub {
    my %params = ('path' => $utils->get_param_value('create_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('create_folder', 'storage_name', 'string'));
    $utils->initialize('create_folder', '');
    eval {
        my $result = $utils->{api}->create_folder(%params);
    };
    if ($@) {
        fail("create_folder raised an exception: $@");
    }
    pass();
};

subtest 'create_folder invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('create_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('create_folder', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('create_folder', 'path', $params{ path });
    $utils->initialize('create_folder', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->create_folder(%params);
    };
    if ($@) {
        $utils->assert_error('create_folder', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('create_folder', 'path');
    }
};

subtest 'create_folder invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('create_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('create_folder', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('create_folder', 'storage_name', $params{ storage_name });
    $utils->initialize('create_folder', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->create_folder(%params);
    };
    if ($@) {
        $utils->assert_error('create_folder', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('create_folder', 'storage_name');
    }
};

#
# delete_chart_category test
#
subtest 'delete_chart_category' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $utils->initialize('delete_chart_category', '');
    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        fail("delete_chart_category raised an exception: $@");
    }
    pass();
};

subtest 'delete_chart_category invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_chart_category', 'name', $params{ name });
    $utils->initialize('delete_chart_category', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'name');
    }
};

subtest 'delete_chart_category invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_chart_category', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_chart_category', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'slide_index');
    }
};

subtest 'delete_chart_category invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_chart_category', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_chart_category', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'shape_index');
    }
};

subtest 'delete_chart_category invalid category_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ category_index } = $utils->invalidize_param_value('delete_chart_category', 'category_index', $params{ category_index });
    $utils->initialize('delete_chart_category', 'category_index', $params{ category_index });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'category_index', $params{ category_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'category_index');
    }
};

subtest 'delete_chart_category invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_chart_category', 'password', $params{ password });
    $utils->initialize('delete_chart_category', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'password');
    }
};

subtest 'delete_chart_category invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_chart_category', 'folder', $params{ folder });
    $utils->initialize('delete_chart_category', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'folder');
    }
};

subtest 'delete_chart_category invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_chart_category', 'storage', $params{ storage });
    $utils->initialize('delete_chart_category', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'storage');
    }
};

#
# delete_chart_data_point test
#
subtest 'delete_chart_data_point' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $utils->initialize('delete_chart_data_point', '');
    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        fail("delete_chart_data_point raised an exception: $@");
    }
    pass();
};

subtest 'delete_chart_data_point invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_chart_data_point', 'name', $params{ name });
    $utils->initialize('delete_chart_data_point', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'name');
    }
};

subtest 'delete_chart_data_point invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_chart_data_point', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_chart_data_point', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'slide_index');
    }
};

subtest 'delete_chart_data_point invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_chart_data_point', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_chart_data_point', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'shape_index');
    }
};

subtest 'delete_chart_data_point invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('delete_chart_data_point', 'series_index', $params{ series_index });
    $utils->initialize('delete_chart_data_point', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'series_index');
    }
};

subtest 'delete_chart_data_point invalid point_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ point_index } = $utils->invalidize_param_value('delete_chart_data_point', 'point_index', $params{ point_index });
    $utils->initialize('delete_chart_data_point', 'point_index', $params{ point_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'point_index', $params{ point_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'point_index');
    }
};

subtest 'delete_chart_data_point invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_chart_data_point', 'password', $params{ password });
    $utils->initialize('delete_chart_data_point', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'password');
    }
};

subtest 'delete_chart_data_point invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_chart_data_point', 'folder', $params{ folder });
    $utils->initialize('delete_chart_data_point', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'folder');
    }
};

subtest 'delete_chart_data_point invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_chart_data_point', 'storage', $params{ storage });
    $utils->initialize('delete_chart_data_point', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'storage');
    }
};

#
# delete_chart_series test
#
subtest 'delete_chart_series' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $utils->initialize('delete_chart_series', '');
    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        fail("delete_chart_series raised an exception: $@");
    }
    pass();
};

subtest 'delete_chart_series invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_chart_series', 'name', $params{ name });
    $utils->initialize('delete_chart_series', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'name');
    }
};

subtest 'delete_chart_series invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_chart_series', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_chart_series', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'slide_index');
    }
};

subtest 'delete_chart_series invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_chart_series', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_chart_series', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'shape_index');
    }
};

subtest 'delete_chart_series invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('delete_chart_series', 'series_index', $params{ series_index });
    $utils->initialize('delete_chart_series', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'series_index');
    }
};

subtest 'delete_chart_series invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_chart_series', 'password', $params{ password });
    $utils->initialize('delete_chart_series', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'password');
    }
};

subtest 'delete_chart_series invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_chart_series', 'folder', $params{ folder });
    $utils->initialize('delete_chart_series', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'folder');
    }
};

subtest 'delete_chart_series invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_chart_series', 'storage', $params{ storage });
    $utils->initialize('delete_chart_series', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'storage');
    }
};

#
# delete_file test
#
subtest 'delete_file' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $utils->initialize('delete_file', '');
    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        fail("delete_file raised an exception: $@");
    }
    pass();
};

subtest 'delete_file invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_file', 'path', $params{ path });
    $utils->initialize('delete_file', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        $utils->assert_error('delete_file', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_file', 'path');
    }
};

subtest 'delete_file invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('delete_file', 'storage_name', $params{ storage_name });
    $utils->initialize('delete_file', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        $utils->assert_error('delete_file', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('delete_file', 'storage_name');
    }
};

subtest 'delete_file invalid version_id' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('delete_file', 'version_id', $params{ version_id });
    $utils->initialize('delete_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        $utils->assert_error('delete_file', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('delete_file', 'version_id');
    }
};

#
# delete_folder test
#
subtest 'delete_folder' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $utils->initialize('delete_folder', '');
    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        fail("delete_folder raised an exception: $@");
    }
    pass();
};

subtest 'delete_folder invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $params{ path } = $utils->invalidize_param_value('delete_folder', 'path', $params{ path });
    $utils->initialize('delete_folder', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        $utils->assert_error('delete_folder', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_folder', 'path');
    }
};

subtest 'delete_folder invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $params{ storage_name } = $utils->invalidize_param_value('delete_folder', 'storage_name', $params{ storage_name });
    $utils->initialize('delete_folder', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        $utils->assert_error('delete_folder', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('delete_folder', 'storage_name');
    }
};

subtest 'delete_folder invalid recursive' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $params{ recursive } = $utils->invalidize_param_value('delete_folder', 'recursive', $params{ recursive });
    $utils->initialize('delete_folder', 'recursive', $params{ recursive });

    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        $utils->assert_error('delete_folder', 'recursive', $params{ recursive }, $@);
    } else {
        $utils->assert_no_error('delete_folder', 'recursive');
    }
};

#
# delete_notes_slide test
#
subtest 'delete_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $utils->initialize('delete_notes_slide', '');
    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        fail("delete_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'delete_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_notes_slide', 'name', $params{ name });
    $utils->initialize('delete_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'name');
    }
};

subtest 'delete_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'slide_index');
    }
};

subtest 'delete_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_notes_slide', 'password', $params{ password });
    $utils->initialize('delete_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'password');
    }
};

subtest 'delete_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_notes_slide', 'folder', $params{ folder });
    $utils->initialize('delete_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'folder');
    }
};

subtest 'delete_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_notes_slide', 'storage', $params{ storage });
    $utils->initialize('delete_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'storage');
    }
};

#
# delete_notes_slide_paragraph test
#
subtest 'delete_notes_slide_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraph', 'storage', 'string'));
    $utils->initialize('delete_notes_slide_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraph(%params);
    };
    if ($@) {
        fail("delete_notes_slide_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_notes_slide_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_notes_slide_paragraph', 'name', $params{ name });
    $utils->initialize('delete_notes_slide_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraph', 'name');
    }
};

subtest 'delete_notes_slide_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_notes_slide_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_notes_slide_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraph', 'slide_index');
    }
};

subtest 'delete_notes_slide_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_notes_slide_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_notes_slide_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraph', 'shape_index');
    }
};

subtest 'delete_notes_slide_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_notes_slide_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_notes_slide_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraph', 'paragraph_index');
    }
};

subtest 'delete_notes_slide_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_notes_slide_paragraph', 'password', $params{ password });
    $utils->initialize('delete_notes_slide_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraph', 'password');
    }
};

subtest 'delete_notes_slide_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_notes_slide_paragraph', 'folder', $params{ folder });
    $utils->initialize('delete_notes_slide_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraph', 'folder');
    }
};

subtest 'delete_notes_slide_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_notes_slide_paragraph', 'storage', $params{ storage });
    $utils->initialize('delete_notes_slide_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraph', 'storage');
    }
};

#
# delete_notes_slide_paragraphs test
#
subtest 'delete_notes_slide_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_notes_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraphs', 'storage', 'string'));
    $utils->initialize('delete_notes_slide_paragraphs', '');
    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraphs(%params);
    };
    if ($@) {
        fail("delete_notes_slide_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'delete_notes_slide_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_notes_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_notes_slide_paragraphs', 'name', $params{ name });
    $utils->initialize('delete_notes_slide_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraphs', 'name');
    }
};

subtest 'delete_notes_slide_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_notes_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_notes_slide_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_notes_slide_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraphs', 'slide_index');
    }
};

subtest 'delete_notes_slide_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_notes_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_notes_slide_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_notes_slide_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraphs', 'shape_index');
    }
};

subtest 'delete_notes_slide_paragraphs invalid paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_notes_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraphs', 'storage', 'string'));
    $params{ paragraphs } = $utils->invalidize_param_value('delete_notes_slide_paragraphs', 'paragraphs', $params{ paragraphs });
    $utils->initialize('delete_notes_slide_paragraphs', 'paragraphs', $params{ paragraphs });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraphs', 'paragraphs', $params{ paragraphs }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraphs', 'paragraphs');
    }
};

subtest 'delete_notes_slide_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_notes_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_notes_slide_paragraphs', 'password', $params{ password });
    $utils->initialize('delete_notes_slide_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraphs', 'password');
    }
};

subtest 'delete_notes_slide_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_notes_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_notes_slide_paragraphs', 'folder', $params{ folder });
    $utils->initialize('delete_notes_slide_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraphs', 'folder');
    }
};

subtest 'delete_notes_slide_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_notes_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_notes_slide_paragraphs', 'storage', $params{ storage });
    $utils->initialize('delete_notes_slide_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_notes_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_paragraphs', 'storage');
    }
};

#
# delete_notes_slide_portion test
#
subtest 'delete_notes_slide_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_notes_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portion', 'storage', 'string'));
    $utils->initialize('delete_notes_slide_portion', '');
    eval {
        my $result = $utils->{api}->delete_notes_slide_portion(%params);
    };
    if ($@) {
        fail("delete_notes_slide_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_notes_slide_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_notes_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_notes_slide_portion', 'name', $params{ name });
    $utils->initialize('delete_notes_slide_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portion', 'name');
    }
};

subtest 'delete_notes_slide_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_notes_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_notes_slide_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_notes_slide_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portion', 'slide_index');
    }
};

subtest 'delete_notes_slide_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_notes_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_notes_slide_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_notes_slide_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portion', 'shape_index');
    }
};

subtest 'delete_notes_slide_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_notes_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_notes_slide_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_notes_slide_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portion', 'paragraph_index');
    }
};

subtest 'delete_notes_slide_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_notes_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_notes_slide_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('delete_notes_slide_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portion', 'portion_index');
    }
};

subtest 'delete_notes_slide_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_notes_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_notes_slide_portion', 'password', $params{ password });
    $utils->initialize('delete_notes_slide_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portion', 'password');
    }
};

subtest 'delete_notes_slide_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_notes_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_notes_slide_portion', 'folder', $params{ folder });
    $utils->initialize('delete_notes_slide_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portion', 'folder');
    }
};

subtest 'delete_notes_slide_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_notes_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_notes_slide_portion', 'storage', $params{ storage });
    $utils->initialize('delete_notes_slide_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portion', 'storage');
    }
};

#
# delete_notes_slide_portions test
#
subtest 'delete_notes_slide_portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_notes_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portions', 'storage', 'string'));
    $utils->initialize('delete_notes_slide_portions', '');
    eval {
        my $result = $utils->{api}->delete_notes_slide_portions(%params);
    };
    if ($@) {
        fail("delete_notes_slide_portions raised an exception: $@");
    }
    pass();
};

subtest 'delete_notes_slide_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_notes_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_notes_slide_portions', 'name', $params{ name });
    $utils->initialize('delete_notes_slide_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portions', 'name');
    }
};

subtest 'delete_notes_slide_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_notes_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_notes_slide_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_notes_slide_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portions', 'slide_index');
    }
};

subtest 'delete_notes_slide_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_notes_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_notes_slide_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_notes_slide_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portions', 'shape_index');
    }
};

subtest 'delete_notes_slide_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_notes_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_notes_slide_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_notes_slide_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portions', 'paragraph_index');
    }
};

subtest 'delete_notes_slide_portions invalid portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_notes_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portions', 'storage', 'string'));
    $params{ portions } = $utils->invalidize_param_value('delete_notes_slide_portions', 'portions', $params{ portions });
    $utils->initialize('delete_notes_slide_portions', 'portions', $params{ portions });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portions', 'portions', $params{ portions }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portions', 'portions');
    }
};

subtest 'delete_notes_slide_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_notes_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_notes_slide_portions', 'password', $params{ password });
    $utils->initialize('delete_notes_slide_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portions', 'password');
    }
};

subtest 'delete_notes_slide_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_notes_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_notes_slide_portions', 'folder', $params{ folder });
    $utils->initialize('delete_notes_slide_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portions', 'folder');
    }
};

subtest 'delete_notes_slide_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_notes_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_notes_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_notes_slide_portions', 'storage', $params{ storage });
    $utils->initialize('delete_notes_slide_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_notes_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_portions', 'storage');
    }
};

#
# delete_notes_slide_shape test
#
subtest 'delete_notes_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shape', 'storage', 'string'));
    $utils->initialize('delete_notes_slide_shape', '');
    eval {
        my $result = $utils->{api}->delete_notes_slide_shape(%params);
    };
    if ($@) {
        fail("delete_notes_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'delete_notes_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_notes_slide_shape', 'name', $params{ name });
    $utils->initialize('delete_notes_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shape', 'name');
    }
};

subtest 'delete_notes_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_notes_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_notes_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shape', 'slide_index');
    }
};

subtest 'delete_notes_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_notes_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_notes_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shape', 'shape_index');
    }
};

subtest 'delete_notes_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_notes_slide_shape', 'password', $params{ password });
    $utils->initialize('delete_notes_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shape', 'password');
    }
};

subtest 'delete_notes_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_notes_slide_shape', 'folder', $params{ folder });
    $utils->initialize('delete_notes_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shape', 'folder');
    }
};

subtest 'delete_notes_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_notes_slide_shape', 'storage', $params{ storage });
    $utils->initialize('delete_notes_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shape', 'storage');
    }
};

#
# delete_notes_slide_shapes test
#
subtest 'delete_notes_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_notes_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shapes', 'storage', 'string'));
    $utils->initialize('delete_notes_slide_shapes', '');
    eval {
        my $result = $utils->{api}->delete_notes_slide_shapes(%params);
    };
    if ($@) {
        fail("delete_notes_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'delete_notes_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_notes_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_notes_slide_shapes', 'name', $params{ name });
    $utils->initialize('delete_notes_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shapes', 'name');
    }
};

subtest 'delete_notes_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_notes_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_notes_slide_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_notes_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shapes', 'slide_index');
    }
};

subtest 'delete_notes_slide_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_notes_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shapes', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('delete_notes_slide_shapes', 'shapes', $params{ shapes });
    $utils->initialize('delete_notes_slide_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shapes', 'shapes', $params{ shapes }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shapes', 'shapes');
    }
};

subtest 'delete_notes_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_notes_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_notes_slide_shapes', 'password', $params{ password });
    $utils->initialize('delete_notes_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shapes', 'password');
    }
};

subtest 'delete_notes_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_notes_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_notes_slide_shapes', 'folder', $params{ folder });
    $utils->initialize('delete_notes_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shapes', 'folder');
    }
};

subtest 'delete_notes_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_notes_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_notes_slide_shapes', 'storage', $params{ storage });
    $utils->initialize('delete_notes_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide_shapes', 'storage');
    }
};

#
# delete_paragraph test
#
subtest 'delete_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $utils->initialize('delete_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        fail("delete_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_paragraph', 'name', $params{ name });
    $utils->initialize('delete_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'name');
    }
};

subtest 'delete_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'slide_index');
    }
};

subtest 'delete_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'shape_index');
    }
};

subtest 'delete_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'paragraph_index');
    }
};

subtest 'delete_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_paragraph', 'password', $params{ password });
    $utils->initialize('delete_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'password');
    }
};

subtest 'delete_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_paragraph', 'folder', $params{ folder });
    $utils->initialize('delete_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'folder');
    }
};

subtest 'delete_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_paragraph', 'storage', $params{ storage });
    $utils->initialize('delete_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'storage');
    }
};

#
# delete_paragraphs test
#
subtest 'delete_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $utils->initialize('delete_paragraphs', '');
    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        fail("delete_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'delete_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_paragraphs', 'name', $params{ name });
    $utils->initialize('delete_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'name');
    }
};

subtest 'delete_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'slide_index');
    }
};

subtest 'delete_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'shape_index');
    }
};

subtest 'delete_paragraphs invalid paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ paragraphs } = $utils->invalidize_param_value('delete_paragraphs', 'paragraphs', $params{ paragraphs });
    $utils->initialize('delete_paragraphs', 'paragraphs', $params{ paragraphs });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'paragraphs', $params{ paragraphs }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'paragraphs');
    }
};

subtest 'delete_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_paragraphs', 'password', $params{ password });
    $utils->initialize('delete_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'password');
    }
};

subtest 'delete_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_paragraphs', 'folder', $params{ folder });
    $utils->initialize('delete_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'folder');
    }
};

subtest 'delete_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_paragraphs', 'storage', $params{ storage });
    $utils->initialize('delete_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'storage');
    }
};

#
# delete_portion test
#
subtest 'delete_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $utils->initialize('delete_portion', '');
    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        fail("delete_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_portion', 'name', $params{ name });
    $utils->initialize('delete_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'name');
    }
};

subtest 'delete_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'slide_index');
    }
};

subtest 'delete_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'shape_index');
    }
};

subtest 'delete_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'paragraph_index');
    }
};

subtest 'delete_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('delete_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'portion_index');
    }
};

subtest 'delete_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_portion', 'password', $params{ password });
    $utils->initialize('delete_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'password');
    }
};

subtest 'delete_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_portion', 'folder', $params{ folder });
    $utils->initialize('delete_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'folder');
    }
};

subtest 'delete_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_portion', 'storage', $params{ storage });
    $utils->initialize('delete_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'storage');
    }
};

#
# delete_portions test
#
subtest 'delete_portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $utils->initialize('delete_portions', '');
    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        fail("delete_portions raised an exception: $@");
    }
    pass();
};

subtest 'delete_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_portions', 'name', $params{ name });
    $utils->initialize('delete_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'name');
    }
};

subtest 'delete_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'slide_index');
    }
};

subtest 'delete_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'shape_index');
    }
};

subtest 'delete_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'paragraph_index');
    }
};

subtest 'delete_portions invalid portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ portions } = $utils->invalidize_param_value('delete_portions', 'portions', $params{ portions });
    $utils->initialize('delete_portions', 'portions', $params{ portions });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'portions', $params{ portions }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'portions');
    }
};

subtest 'delete_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_portions', 'password', $params{ password });
    $utils->initialize('delete_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'password');
    }
};

subtest 'delete_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_portions', 'folder', $params{ folder });
    $utils->initialize('delete_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'folder');
    }
};

subtest 'delete_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_portions', 'storage', $params{ storage });
    $utils->initialize('delete_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'storage');
    }
};

#
# delete_section test
#
subtest 'delete_section' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $utils->initialize('delete_section', '');
    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        fail("delete_section raised an exception: $@");
    }
    pass();
};

subtest 'delete_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_section', 'name', $params{ name });
    $utils->initialize('delete_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'name');
    }
};

subtest 'delete_section invalid section_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ section_index } = $utils->invalidize_param_value('delete_section', 'section_index', $params{ section_index });
    $utils->initialize('delete_section', 'section_index', $params{ section_index });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'section_index', $params{ section_index }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'section_index');
    }
};

subtest 'delete_section invalid with_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ with_slides } = $utils->invalidize_param_value('delete_section', 'with_slides', $params{ with_slides });
    $utils->initialize('delete_section', 'with_slides', $params{ with_slides });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'with_slides', $params{ with_slides }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'with_slides');
    }
};

subtest 'delete_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_section', 'password', $params{ password });
    $utils->initialize('delete_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'password');
    }
};

subtest 'delete_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_section', 'folder', $params{ folder });
    $utils->initialize('delete_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'folder');
    }
};

subtest 'delete_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_section', 'storage', $params{ storage });
    $utils->initialize('delete_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'storage');
    }
};

#
# delete_sections test
#
subtest 'delete_sections' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $utils->initialize('delete_sections', '');
    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        fail("delete_sections raised an exception: $@");
    }
    pass();
};

subtest 'delete_sections invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_sections', 'name', $params{ name });
    $utils->initialize('delete_sections', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'name');
    }
};

subtest 'delete_sections invalid sections' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ sections } = $utils->invalidize_param_value('delete_sections', 'sections', $params{ sections });
    $utils->initialize('delete_sections', 'sections', $params{ sections });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'sections', $params{ sections }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'sections');
    }
};

subtest 'delete_sections invalid with_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ with_slides } = $utils->invalidize_param_value('delete_sections', 'with_slides', $params{ with_slides });
    $utils->initialize('delete_sections', 'with_slides', $params{ with_slides });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'with_slides', $params{ with_slides }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'with_slides');
    }
};

subtest 'delete_sections invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_sections', 'password', $params{ password });
    $utils->initialize('delete_sections', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'password');
    }
};

subtest 'delete_sections invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_sections', 'folder', $params{ folder });
    $utils->initialize('delete_sections', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'folder');
    }
};

subtest 'delete_sections invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_sections', 'storage', $params{ storage });
    $utils->initialize('delete_sections', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'storage');
    }
};

#
# delete_slide_animation test
#
subtest 'delete_slide_animation' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation', 'storage', 'string'));
    $utils->initialize('delete_slide_animation', '');
    eval {
        my $result = $utils->{api}->delete_slide_animation(%params);
    };
    if ($@) {
        fail("delete_slide_animation raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_animation', 'name', $params{ name });
    $utils->initialize('delete_slide_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation', 'name');
    }
};

subtest 'delete_slide_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_animation', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation', 'slide_index');
    }
};

subtest 'delete_slide_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_animation', 'password', $params{ password });
    $utils->initialize('delete_slide_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation', 'password');
    }
};

subtest 'delete_slide_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_animation', 'folder', $params{ folder });
    $utils->initialize('delete_slide_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation', 'folder');
    }
};

subtest 'delete_slide_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_animation', 'storage', $params{ storage });
    $utils->initialize('delete_slide_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation', 'storage');
    }
};

#
# delete_slide_animation_effect test
#
subtest 'delete_slide_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_effect', 'storage', 'string'));
    $utils->initialize('delete_slide_animation_effect', '');
    eval {
        my $result = $utils->{api}->delete_slide_animation_effect(%params);
    };
    if ($@) {
        fail("delete_slide_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_animation_effect', 'name', $params{ name });
    $utils->initialize('delete_slide_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_effect', 'name');
    }
};

subtest 'delete_slide_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_animation_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_effect', 'slide_index');
    }
};

subtest 'delete_slide_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_slide_animation_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('delete_slide_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_effect', 'effect_index');
    }
};

subtest 'delete_slide_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_animation_effect', 'password', $params{ password });
    $utils->initialize('delete_slide_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_effect', 'password');
    }
};

subtest 'delete_slide_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_animation_effect', 'folder', $params{ folder });
    $utils->initialize('delete_slide_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_effect', 'folder');
    }
};

subtest 'delete_slide_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_animation_effect', 'storage', $params{ storage });
    $utils->initialize('delete_slide_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_effect', 'storage');
    }
};

#
# delete_slide_animation_interactive_sequence test
#
subtest 'delete_slide_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('delete_slide_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("delete_slide_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence', 'name', $params{ name });
    $utils->initialize('delete_slide_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence', 'name');
    }
};

subtest 'delete_slide_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence', 'slide_index');
    }
};

subtest 'delete_slide_animation_interactive_sequence invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence', 'sequence_index', $params{ sequence_index });
    $utils->initialize('delete_slide_animation_interactive_sequence', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence', 'sequence_index');
    }
};

subtest 'delete_slide_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence', 'password', $params{ password });
    $utils->initialize('delete_slide_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence', 'password');
    }
};

subtest 'delete_slide_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence', 'folder', $params{ folder });
    $utils->initialize('delete_slide_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence', 'folder');
    }
};

subtest 'delete_slide_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence', 'storage', $params{ storage });
    $utils->initialize('delete_slide_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence', 'storage');
    }
};

#
# delete_slide_animation_interactive_sequence_effect test
#
subtest 'delete_slide_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('delete_slide_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("delete_slide_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence_effect', 'name', $params{ name });
    $utils->initialize('delete_slide_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence_effect', 'name');
    }
};

subtest 'delete_slide_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence_effect', 'slide_index');
    }
};

subtest 'delete_slide_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });
    $utils->initialize('delete_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence_effect', 'sequence_index');
    }
};

subtest 'delete_slide_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('delete_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence_effect', 'effect_index');
    }
};

subtest 'delete_slide_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence_effect', 'password', $params{ password });
    $utils->initialize('delete_slide_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence_effect', 'password');
    }
};

subtest 'delete_slide_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });
    $utils->initialize('delete_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence_effect', 'folder');
    }
};

subtest 'delete_slide_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });
    $utils->initialize('delete_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequence_effect', 'storage');
    }
};

#
# delete_slide_animation_interactive_sequences test
#
subtest 'delete_slide_animation_interactive_sequences' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'storage', 'string'));
    $utils->initialize('delete_slide_animation_interactive_sequences', '');
    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        fail("delete_slide_animation_interactive_sequences raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_animation_interactive_sequences invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequences', 'name', $params{ name });
    $utils->initialize('delete_slide_animation_interactive_sequences', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequences', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequences', 'name');
    }
};

subtest 'delete_slide_animation_interactive_sequences invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequences', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_animation_interactive_sequences', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequences', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequences', 'slide_index');
    }
};

subtest 'delete_slide_animation_interactive_sequences invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequences', 'password', $params{ password });
    $utils->initialize('delete_slide_animation_interactive_sequences', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequences', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequences', 'password');
    }
};

subtest 'delete_slide_animation_interactive_sequences invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequences', 'folder', $params{ folder });
    $utils->initialize('delete_slide_animation_interactive_sequences', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequences', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequences', 'folder');
    }
};

subtest 'delete_slide_animation_interactive_sequences invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_animation_interactive_sequences', 'storage', $params{ storage });
    $utils->initialize('delete_slide_animation_interactive_sequences', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_interactive_sequences', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_interactive_sequences', 'storage');
    }
};

#
# delete_slide_animation_main_sequence test
#
subtest 'delete_slide_animation_main_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_main_sequence', 'storage', 'string'));
    $utils->initialize('delete_slide_animation_main_sequence', '');
    eval {
        my $result = $utils->{api}->delete_slide_animation_main_sequence(%params);
    };
    if ($@) {
        fail("delete_slide_animation_main_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_animation_main_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_main_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_animation_main_sequence', 'name', $params{ name });
    $utils->initialize('delete_slide_animation_main_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_main_sequence', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_main_sequence', 'name');
    }
};

subtest 'delete_slide_animation_main_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_main_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_animation_main_sequence', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_animation_main_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_main_sequence', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_main_sequence', 'slide_index');
    }
};

subtest 'delete_slide_animation_main_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_main_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_animation_main_sequence', 'password', $params{ password });
    $utils->initialize('delete_slide_animation_main_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_main_sequence', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_main_sequence', 'password');
    }
};

subtest 'delete_slide_animation_main_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_main_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_animation_main_sequence', 'folder', $params{ folder });
    $utils->initialize('delete_slide_animation_main_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_main_sequence', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_main_sequence', 'folder');
    }
};

subtest 'delete_slide_animation_main_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_animation_main_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_animation_main_sequence', 'storage', $params{ storage });
    $utils->initialize('delete_slide_animation_main_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_animation_main_sequence', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_animation_main_sequence', 'storage');
    }
};

#
# delete_slide_by_index test
#
subtest 'delete_slide_by_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_by_index', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_by_index', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_by_index', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_by_index', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_by_index', 'storage', 'string'));
    $utils->initialize('delete_slide_by_index', '');
    eval {
        my $result = $utils->{api}->delete_slide_by_index(%params);
    };
    if ($@) {
        fail("delete_slide_by_index raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_by_index invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_by_index', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_by_index', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_by_index', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_by_index', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_by_index', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_by_index', 'name', $params{ name });
    $utils->initialize('delete_slide_by_index', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_by_index(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_by_index', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_by_index', 'name');
    }
};

subtest 'delete_slide_by_index invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_by_index', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_by_index', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_by_index', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_by_index', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_by_index', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_by_index', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_by_index', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_by_index(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_by_index', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_by_index', 'slide_index');
    }
};

subtest 'delete_slide_by_index invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_by_index', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_by_index', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_by_index', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_by_index', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_by_index', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_by_index', 'password', $params{ password });
    $utils->initialize('delete_slide_by_index', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_by_index(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_by_index', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_by_index', 'password');
    }
};

subtest 'delete_slide_by_index invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_by_index', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_by_index', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_by_index', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_by_index', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_by_index', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_by_index', 'folder', $params{ folder });
    $utils->initialize('delete_slide_by_index', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_by_index(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_by_index', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_by_index', 'folder');
    }
};

subtest 'delete_slide_by_index invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_by_index', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_by_index', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide_by_index', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_by_index', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_by_index', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_by_index', 'storage', $params{ storage });
    $utils->initialize('delete_slide_by_index', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_by_index(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_by_index', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_by_index', 'storage');
    }
};

#
# delete_slide_shape test
#
subtest 'delete_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shape', 'storage', 'string'));
    $utils->initialize('delete_slide_shape', '');
    eval {
        my $result = $utils->{api}->delete_slide_shape(%params);
    };
    if ($@) {
        fail("delete_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_shape', 'name', $params{ name });
    $utils->initialize('delete_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shape', 'name');
    }
};

subtest 'delete_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shape', 'slide_index');
    }
};

subtest 'delete_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shape', 'shape_index');
    }
};

subtest 'delete_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_shape', 'password', $params{ password });
    $utils->initialize('delete_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shape', 'password');
    }
};

subtest 'delete_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_shape', 'folder', $params{ folder });
    $utils->initialize('delete_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shape', 'folder');
    }
};

subtest 'delete_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_shape', 'storage', $params{ storage });
    $utils->initialize('delete_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shape', 'storage');
    }
};

#
# delete_slide_shapes test
#
subtest 'delete_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shapes', 'storage', 'string'));
    $utils->initialize('delete_slide_shapes', '');
    eval {
        my $result = $utils->{api}->delete_slide_shapes(%params);
    };
    if ($@) {
        fail("delete_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_shapes', 'name', $params{ name });
    $utils->initialize('delete_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shapes', 'name');
    }
};

subtest 'delete_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shapes', 'slide_index');
    }
};

subtest 'delete_slide_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shapes', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('delete_slide_shapes', 'shapes', $params{ shapes });
    $utils->initialize('delete_slide_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->delete_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shapes', 'shapes', $params{ shapes }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shapes', 'shapes');
    }
};

subtest 'delete_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_shapes', 'password', $params{ password });
    $utils->initialize('delete_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shapes', 'password');
    }
};

subtest 'delete_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_shapes', 'folder', $params{ folder });
    $utils->initialize('delete_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shapes', 'folder');
    }
};

subtest 'delete_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_shapes', 'storage', $params{ storage });
    $utils->initialize('delete_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_shapes', 'storage');
    }
};

#
# delete_slide_subshape test
#
subtest 'delete_slide_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshape', 'storage', 'string'));
    $utils->initialize('delete_slide_subshape', '');
    eval {
        my $result = $utils->{api}->delete_slide_subshape(%params);
    };
    if ($@) {
        fail("delete_slide_subshape raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_subshape', 'name', $params{ name });
    $utils->initialize('delete_slide_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshape', 'name');
    }
};

subtest 'delete_slide_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshape', 'slide_index');
    }
};

subtest 'delete_slide_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_slide_subshape', 'path', $params{ path });
    $utils->initialize('delete_slide_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshape', 'path');
    }
};

subtest 'delete_slide_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_slide_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_slide_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshape', 'shape_index');
    }
};

subtest 'delete_slide_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_subshape', 'password', $params{ password });
    $utils->initialize('delete_slide_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshape', 'password');
    }
};

subtest 'delete_slide_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_subshape', 'folder', $params{ folder });
    $utils->initialize('delete_slide_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshape', 'folder');
    }
};

subtest 'delete_slide_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_subshape', 'storage', $params{ storage });
    $utils->initialize('delete_slide_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshape', 'storage');
    }
};

#
# delete_slide_subshapes test
#
subtest 'delete_slide_subshapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshapes', 'storage', 'string'));
    $utils->initialize('delete_slide_subshapes', '');
    eval {
        my $result = $utils->{api}->delete_slide_subshapes(%params);
    };
    if ($@) {
        fail("delete_slide_subshapes raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_subshapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_subshapes', 'name', $params{ name });
    $utils->initialize('delete_slide_subshapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshapes', 'name');
    }
};

subtest 'delete_slide_subshapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_subshapes', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_subshapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshapes', 'slide_index');
    }
};

subtest 'delete_slide_subshapes invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshapes', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_slide_subshapes', 'path', $params{ path });
    $utils->initialize('delete_slide_subshapes', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshapes', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshapes', 'path');
    }
};

subtest 'delete_slide_subshapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshapes', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('delete_slide_subshapes', 'shapes', $params{ shapes });
    $utils->initialize('delete_slide_subshapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->delete_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshapes', 'shapes', $params{ shapes }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshapes', 'shapes');
    }
};

subtest 'delete_slide_subshapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_subshapes', 'password', $params{ password });
    $utils->initialize('delete_slide_subshapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshapes', 'password');
    }
};

subtest 'delete_slide_subshapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_subshapes', 'folder', $params{ folder });
    $utils->initialize('delete_slide_subshapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshapes', 'folder');
    }
};

subtest 'delete_slide_subshapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_subshapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_subshapes', 'storage', $params{ storage });
    $utils->initialize('delete_slide_subshapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_subshapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_subshapes', 'storage');
    }
};

#
# delete_slides_clean_slides_list test
#
subtest 'delete_slides_clean_slides_list' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_clean_slides_list', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides_clean_slides_list', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides_clean_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_clean_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_clean_slides_list', 'storage', 'string'));
    $utils->initialize('delete_slides_clean_slides_list', '');
    eval {
        my $result = $utils->{api}->delete_slides_clean_slides_list(%params);
    };
    if ($@) {
        fail("delete_slides_clean_slides_list raised an exception: $@");
    }
    pass();
};

subtest 'delete_slides_clean_slides_list invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_clean_slides_list', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides_clean_slides_list', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides_clean_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_clean_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_clean_slides_list', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slides_clean_slides_list', 'name', $params{ name });
    $utils->initialize('delete_slides_clean_slides_list', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slides_clean_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_clean_slides_list', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slides_clean_slides_list', 'name');
    }
};

subtest 'delete_slides_clean_slides_list invalid slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_clean_slides_list', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides_clean_slides_list', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides_clean_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_clean_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_clean_slides_list', 'storage', 'string'));
    $params{ slides } = $utils->invalidize_param_value('delete_slides_clean_slides_list', 'slides', $params{ slides });
    $utils->initialize('delete_slides_clean_slides_list', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->delete_slides_clean_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_clean_slides_list', 'slides', $params{ slides }, $@);
    } else {
        $utils->assert_no_error('delete_slides_clean_slides_list', 'slides');
    }
};

subtest 'delete_slides_clean_slides_list invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_clean_slides_list', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides_clean_slides_list', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides_clean_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_clean_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_clean_slides_list', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slides_clean_slides_list', 'password', $params{ password });
    $utils->initialize('delete_slides_clean_slides_list', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slides_clean_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_clean_slides_list', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slides_clean_slides_list', 'password');
    }
};

subtest 'delete_slides_clean_slides_list invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_clean_slides_list', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides_clean_slides_list', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides_clean_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_clean_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_clean_slides_list', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slides_clean_slides_list', 'folder', $params{ folder });
    $utils->initialize('delete_slides_clean_slides_list', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slides_clean_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_clean_slides_list', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slides_clean_slides_list', 'folder');
    }
};

subtest 'delete_slides_clean_slides_list invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_clean_slides_list', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides_clean_slides_list', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides_clean_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_clean_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_clean_slides_list', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slides_clean_slides_list', 'storage', $params{ storage });
    $utils->initialize('delete_slides_clean_slides_list', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slides_clean_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_clean_slides_list', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slides_clean_slides_list', 'storage');
    }
};

#
# delete_slides_document_properties test
#
subtest 'delete_slides_document_properties' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_properties', 'storage', 'string'));
    $utils->initialize('delete_slides_document_properties', '');
    eval {
        my $result = $utils->{api}->delete_slides_document_properties(%params);
    };
    if ($@) {
        fail("delete_slides_document_properties raised an exception: $@");
    }
    pass();
};

subtest 'delete_slides_document_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slides_document_properties', 'name', $params{ name });
    $utils->initialize('delete_slides_document_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slides_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_document_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slides_document_properties', 'name');
    }
};

subtest 'delete_slides_document_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slides_document_properties', 'password', $params{ password });
    $utils->initialize('delete_slides_document_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slides_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_document_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slides_document_properties', 'password');
    }
};

subtest 'delete_slides_document_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slides_document_properties', 'folder', $params{ folder });
    $utils->initialize('delete_slides_document_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slides_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_document_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slides_document_properties', 'folder');
    }
};

subtest 'delete_slides_document_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slides_document_properties', 'storage', $params{ storage });
    $utils->initialize('delete_slides_document_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slides_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_document_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slides_document_properties', 'storage');
    }
};

#
# delete_slides_document_property test
#
subtest 'delete_slides_document_property' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_property', 'storage', 'string'));
    $utils->initialize('delete_slides_document_property', '');
    eval {
        my $result = $utils->{api}->delete_slides_document_property(%params);
    };
    if ($@) {
        fail("delete_slides_document_property raised an exception: $@");
    }
    pass();
};

subtest 'delete_slides_document_property invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_property', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slides_document_property', 'name', $params{ name });
    $utils->initialize('delete_slides_document_property', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_document_property', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slides_document_property', 'name');
    }
};

subtest 'delete_slides_document_property invalid property_name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_property', 'storage', 'string'));
    $params{ property_name } = $utils->invalidize_param_value('delete_slides_document_property', 'property_name', $params{ property_name });
    $utils->initialize('delete_slides_document_property', 'property_name', $params{ property_name });

    eval {
        my $result = $utils->{api}->delete_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_document_property', 'property_name', $params{ property_name }, $@);
    } else {
        $utils->assert_no_error('delete_slides_document_property', 'property_name');
    }
};

subtest 'delete_slides_document_property invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_property', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slides_document_property', 'password', $params{ password });
    $utils->initialize('delete_slides_document_property', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_document_property', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slides_document_property', 'password');
    }
};

subtest 'delete_slides_document_property invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_property', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slides_document_property', 'folder', $params{ folder });
    $utils->initialize('delete_slides_document_property', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_document_property', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slides_document_property', 'folder');
    }
};

subtest 'delete_slides_document_property invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_document_property', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slides_document_property', 'storage', $params{ storage });
    $utils->initialize('delete_slides_document_property', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_document_property', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slides_document_property', 'storage');
    }
};

#
# delete_slides_slide_background test
#
subtest 'delete_slides_slide_background' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_slide_background', 'storage', 'string'));
    $utils->initialize('delete_slides_slide_background', '');
    eval {
        my $result = $utils->{api}->delete_slides_slide_background(%params);
    };
    if ($@) {
        fail("delete_slides_slide_background raised an exception: $@");
    }
    pass();
};

subtest 'delete_slides_slide_background invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_slide_background', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slides_slide_background', 'name', $params{ name });
    $utils->initialize('delete_slides_slide_background', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_slide_background', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slides_slide_background', 'name');
    }
};

subtest 'delete_slides_slide_background invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_slide_background', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slides_slide_background', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slides_slide_background', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_slide_background', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slides_slide_background', 'slide_index');
    }
};

subtest 'delete_slides_slide_background invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_slide_background', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slides_slide_background', 'password', $params{ password });
    $utils->initialize('delete_slides_slide_background', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_slide_background', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slides_slide_background', 'password');
    }
};

subtest 'delete_slides_slide_background invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_slide_background', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slides_slide_background', 'folder', $params{ folder });
    $utils->initialize('delete_slides_slide_background', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_slide_background', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slides_slide_background', 'folder');
    }
};

subtest 'delete_slides_slide_background invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides_slide_background', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slides_slide_background', 'storage', $params{ storage });
    $utils->initialize('delete_slides_slide_background', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides_slide_background', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slides_slide_background', 'storage');
    }
};

#
# delete_subshape_paragraph test
#
subtest 'delete_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('delete_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        fail("delete_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('delete_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'name');
    }
};

subtest 'delete_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'slide_index');
    }
};

subtest 'delete_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('delete_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'path');
    }
};

subtest 'delete_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'shape_index');
    }
};

subtest 'delete_subshape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'paragraph_index');
    }
};

subtest 'delete_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('delete_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'password');
    }
};

subtest 'delete_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('delete_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'folder');
    }
};

subtest 'delete_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('delete_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'storage');
    }
};

#
# delete_subshape_paragraphs test
#
subtest 'delete_subshape_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $utils->initialize('delete_subshape_paragraphs', '');
    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        fail("delete_subshape_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshape_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'name', $params{ name });
    $utils->initialize('delete_subshape_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'name');
    }
};

subtest 'delete_subshape_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshape_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'slide_index');
    }
};

subtest 'delete_subshape_paragraphs invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'path', $params{ path });
    $utils->initialize('delete_subshape_paragraphs', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'path');
    }
};

subtest 'delete_subshape_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_subshape_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'shape_index');
    }
};

subtest 'delete_subshape_paragraphs invalid paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ paragraphs } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'paragraphs', $params{ paragraphs });
    $utils->initialize('delete_subshape_paragraphs', 'paragraphs', $params{ paragraphs });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'paragraphs', $params{ paragraphs }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'paragraphs');
    }
};

subtest 'delete_subshape_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'password', $params{ password });
    $utils->initialize('delete_subshape_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'password');
    }
};

subtest 'delete_subshape_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'folder', $params{ folder });
    $utils->initialize('delete_subshape_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'folder');
    }
};

subtest 'delete_subshape_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'storage', $params{ storage });
    $utils->initialize('delete_subshape_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'storage');
    }
};

#
# delete_subshape_portion test
#
subtest 'delete_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $utils->initialize('delete_subshape_portion', '');
    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        fail("delete_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshape_portion', 'name', $params{ name });
    $utils->initialize('delete_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'name');
    }
};

subtest 'delete_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'slide_index');
    }
};

subtest 'delete_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshape_portion', 'path', $params{ path });
    $utils->initialize('delete_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'path');
    }
};

subtest 'delete_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'shape_index');
    }
};

subtest 'delete_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'paragraph_index');
    }
};

subtest 'delete_subshape_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_subshape_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('delete_subshape_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'portion_index');
    }
};

subtest 'delete_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshape_portion', 'password', $params{ password });
    $utils->initialize('delete_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'password');
    }
};

subtest 'delete_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('delete_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'folder');
    }
};

subtest 'delete_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('delete_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'storage');
    }
};

#
# delete_subshape_portions test
#
subtest 'delete_subshape_portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $utils->initialize('delete_subshape_portions', '');
    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        fail("delete_subshape_portions raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshape_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshape_portions', 'name', $params{ name });
    $utils->initialize('delete_subshape_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'name');
    }
};

subtest 'delete_subshape_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshape_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshape_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'slide_index');
    }
};

subtest 'delete_subshape_portions invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshape_portions', 'path', $params{ path });
    $utils->initialize('delete_subshape_portions', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'path');
    }
};

subtest 'delete_subshape_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_subshape_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_subshape_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'shape_index');
    }
};

subtest 'delete_subshape_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_subshape_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_subshape_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'paragraph_index');
    }
};

subtest 'delete_subshape_portions invalid portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ portions } = $utils->invalidize_param_value('delete_subshape_portions', 'portions', $params{ portions });
    $utils->initialize('delete_subshape_portions', 'portions', $params{ portions });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'portions', $params{ portions }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'portions');
    }
};

subtest 'delete_subshape_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshape_portions', 'password', $params{ password });
    $utils->initialize('delete_subshape_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'password');
    }
};

subtest 'delete_subshape_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshape_portions', 'folder', $params{ folder });
    $utils->initialize('delete_subshape_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'folder');
    }
};

subtest 'delete_subshape_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshape_portions', 'storage', $params{ storage });
    $utils->initialize('delete_subshape_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'storage');
    }
};

#
# download_file test
#
subtest 'download_file' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $utils->initialize('download_file', '');
    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        fail("download_file raised an exception: $@");
    }
    pass();
};

subtest 'download_file invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $params{ path } = $utils->invalidize_param_value('download_file', 'path', $params{ path });
    $utils->initialize('download_file', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        $utils->assert_error('download_file', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('download_file', 'path');
    }
};

subtest 'download_file invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('download_file', 'storage_name', $params{ storage_name });
    $utils->initialize('download_file', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        $utils->assert_error('download_file', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('download_file', 'storage_name');
    }
};

subtest 'download_file invalid version_id' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('download_file', 'version_id', $params{ version_id });
    $utils->initialize('download_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        $utils->assert_error('download_file', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('download_file', 'version_id');
    }
};

#
# get_disc_usage test
#
subtest 'get_disc_usage' => sub {
    my %params = ('storage_name' => $utils->get_param_value('get_disc_usage', 'storage_name', 'string'));
    $utils->initialize('get_disc_usage', '');
    eval {
        my $result = $utils->{api}->get_disc_usage(%params);
    };
    if ($@) {
        fail("get_disc_usage raised an exception: $@");
    }
    pass();
};

subtest 'get_disc_usage invalid storage_name' => sub {
    my %params = ('storage_name' => $utils->get_param_value('get_disc_usage', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('get_disc_usage', 'storage_name', $params{ storage_name });
    $utils->initialize('get_disc_usage', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->get_disc_usage(%params);
    };
    if ($@) {
        $utils->assert_error('get_disc_usage', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('get_disc_usage', 'storage_name');
    }
};

#
# get_file_versions test
#
subtest 'get_file_versions' => sub {
    my %params = ('path' => $utils->get_param_value('get_file_versions', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_file_versions', 'storage_name', 'string'));
    $utils->initialize('get_file_versions', '');
    eval {
        my $result = $utils->{api}->get_file_versions(%params);
    };
    if ($@) {
        fail("get_file_versions raised an exception: $@");
    }
    pass();
};

subtest 'get_file_versions invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('get_file_versions', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_file_versions', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_file_versions', 'path', $params{ path });
    $utils->initialize('get_file_versions', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_file_versions(%params);
    };
    if ($@) {
        $utils->assert_error('get_file_versions', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_file_versions', 'path');
    }
};

subtest 'get_file_versions invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('get_file_versions', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_file_versions', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('get_file_versions', 'storage_name', $params{ storage_name });
    $utils->initialize('get_file_versions', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->get_file_versions(%params);
    };
    if ($@) {
        $utils->assert_error('get_file_versions', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('get_file_versions', 'storage_name');
    }
};

#
# get_files_list test
#
subtest 'get_files_list' => sub {
    my %params = ('path' => $utils->get_param_value('get_files_list', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_files_list', 'storage_name', 'string'));
    $utils->initialize('get_files_list', '');
    eval {
        my $result = $utils->{api}->get_files_list(%params);
    };
    if ($@) {
        fail("get_files_list raised an exception: $@");
    }
    pass();
};

subtest 'get_files_list invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('get_files_list', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_files_list', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_files_list', 'path', $params{ path });
    $utils->initialize('get_files_list', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_files_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_files_list', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_files_list', 'path');
    }
};

subtest 'get_files_list invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('get_files_list', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_files_list', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('get_files_list', 'storage_name', $params{ storage_name });
    $utils->initialize('get_files_list', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->get_files_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_files_list', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('get_files_list', 'storage_name');
    }
};

#
# get_layout_slide test
#
subtest 'get_layout_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $utils->initialize('get_layout_slide', '');
    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        fail("get_layout_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_layout_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_layout_slide', 'name', $params{ name });
    $utils->initialize('get_layout_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'name');
    }
};

subtest 'get_layout_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_layout_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('get_layout_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'slide_index');
    }
};

subtest 'get_layout_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_layout_slide', 'password', $params{ password });
    $utils->initialize('get_layout_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'password');
    }
};

subtest 'get_layout_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_layout_slide', 'folder', $params{ folder });
    $utils->initialize('get_layout_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'folder');
    }
};

subtest 'get_layout_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_layout_slide', 'storage', $params{ storage });
    $utils->initialize('get_layout_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'storage');
    }
};

#
# get_layout_slides_list test
#
subtest 'get_layout_slides_list' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides_list', 'storage', 'string'));
    $utils->initialize('get_layout_slides_list', '');
    eval {
        my $result = $utils->{api}->get_layout_slides_list(%params);
    };
    if ($@) {
        fail("get_layout_slides_list raised an exception: $@");
    }
    pass();
};

subtest 'get_layout_slides_list invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides_list', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_layout_slides_list', 'name', $params{ name });
    $utils->initialize('get_layout_slides_list', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_layout_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides_list', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_layout_slides_list', 'name');
    }
};

subtest 'get_layout_slides_list invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides_list', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_layout_slides_list', 'password', $params{ password });
    $utils->initialize('get_layout_slides_list', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_layout_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides_list', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_layout_slides_list', 'password');
    }
};

subtest 'get_layout_slides_list invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides_list', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_layout_slides_list', 'folder', $params{ folder });
    $utils->initialize('get_layout_slides_list', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_layout_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides_list', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_layout_slides_list', 'folder');
    }
};

subtest 'get_layout_slides_list invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides_list', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_layout_slides_list', 'storage', $params{ storage });
    $utils->initialize('get_layout_slides_list', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_layout_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides_list', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_layout_slides_list', 'storage');
    }
};

#
# get_master_slide test
#
subtest 'get_master_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $utils->initialize('get_master_slide', '');
    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        fail("get_master_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_master_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_master_slide', 'name', $params{ name });
    $utils->initialize('get_master_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'name');
    }
};

subtest 'get_master_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_master_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('get_master_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'slide_index');
    }
};

subtest 'get_master_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_master_slide', 'password', $params{ password });
    $utils->initialize('get_master_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'password');
    }
};

subtest 'get_master_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_master_slide', 'folder', $params{ folder });
    $utils->initialize('get_master_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'folder');
    }
};

subtest 'get_master_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_master_slide', 'storage', $params{ storage });
    $utils->initialize('get_master_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'storage');
    }
};

#
# get_master_slides_list test
#
subtest 'get_master_slides_list' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides_list', 'storage', 'string'));
    $utils->initialize('get_master_slides_list', '');
    eval {
        my $result = $utils->{api}->get_master_slides_list(%params);
    };
    if ($@) {
        fail("get_master_slides_list raised an exception: $@");
    }
    pass();
};

subtest 'get_master_slides_list invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides_list', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_master_slides_list', 'name', $params{ name });
    $utils->initialize('get_master_slides_list', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_master_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides_list', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_master_slides_list', 'name');
    }
};

subtest 'get_master_slides_list invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides_list', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_master_slides_list', 'password', $params{ password });
    $utils->initialize('get_master_slides_list', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_master_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides_list', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_master_slides_list', 'password');
    }
};

subtest 'get_master_slides_list invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides_list', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_master_slides_list', 'folder', $params{ folder });
    $utils->initialize('get_master_slides_list', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_master_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides_list', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_master_slides_list', 'folder');
    }
};

subtest 'get_master_slides_list invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides_list', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_master_slides_list', 'storage', $params{ storage });
    $utils->initialize('get_master_slides_list', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_master_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides_list', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_master_slides_list', 'storage');
    }
};

#
# get_notes_slide test
#
subtest 'get_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $utils->initialize('get_notes_slide', '');
    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        fail("get_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide', 'name', $params{ name });
    $utils->initialize('get_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'name');
    }
};

subtest 'get_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'slide_index');
    }
};

subtest 'get_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide', 'password', $params{ password });
    $utils->initialize('get_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'password');
    }
};

subtest 'get_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'folder');
    }
};

subtest 'get_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'storage');
    }
};

#
# get_notes_slide_exists test
#
subtest 'get_notes_slide_exists' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_exists', 'storage', 'string'));
    $utils->initialize('get_notes_slide_exists', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_exists(%params);
    };
    if ($@) {
        fail("get_notes_slide_exists raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_exists invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_exists', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_exists', 'name', $params{ name });
    $utils->initialize('get_notes_slide_exists', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_exists', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_exists', 'name');
    }
};

subtest 'get_notes_slide_exists invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_exists', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_exists', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_exists', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_exists', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_exists', 'slide_index');
    }
};

subtest 'get_notes_slide_exists invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_exists', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_exists', 'password', $params{ password });
    $utils->initialize('get_notes_slide_exists', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_exists', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_exists', 'password');
    }
};

subtest 'get_notes_slide_exists invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_exists', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_exists', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_exists', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_exists', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_exists', 'folder');
    }
};

subtest 'get_notes_slide_exists invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_exists', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_exists', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_exists', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_exists', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_exists', 'storage');
    }
};

#
# get_notes_slide_header_footer test
#
subtest 'get_notes_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'));
    $utils->initialize('get_notes_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        fail("get_notes_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'name', $params{ name });
    $utils->initialize('get_notes_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'name');
    }
};

subtest 'get_notes_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'slide_index');
    }
};

subtest 'get_notes_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'password', $params{ password });
    $utils->initialize('get_notes_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'password');
    }
};

subtest 'get_notes_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'storage');
    }
};

subtest 'get_notes_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'folder');
    }
};

#
# get_notes_slide_shape test
#
subtest 'get_notes_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape', 'storage', 'string'));
    $utils->initialize('get_notes_slide_shape', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_shape(%params);
    };
    if ($@) {
        fail("get_notes_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_shape', 'name', $params{ name });
    $utils->initialize('get_notes_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape', 'name');
    }
};

subtest 'get_notes_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape', 'slide_index');
    }
};

subtest 'get_notes_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_notes_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('get_notes_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape', 'shape_index');
    }
};

subtest 'get_notes_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_shape', 'password', $params{ password });
    $utils->initialize('get_notes_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape', 'password');
    }
};

subtest 'get_notes_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_shape', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape', 'folder');
    }
};

subtest 'get_notes_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_shape', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape', 'storage');
    }
};

#
# get_notes_slide_shape_paragraph test
#
subtest 'get_notes_slide_shape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'storage', 'string'));
    $utils->initialize('get_notes_slide_shape_paragraph', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        fail("get_notes_slide_shape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_shape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_shape_paragraph', 'name', $params{ name });
    $utils->initialize('get_notes_slide_shape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraph', 'name');
    }
};

subtest 'get_notes_slide_shape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_shape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_shape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraph', 'slide_index');
    }
};

subtest 'get_notes_slide_shape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_notes_slide_shape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('get_notes_slide_shape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraph', 'shape_index');
    }
};

subtest 'get_notes_slide_shape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_notes_slide_shape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_notes_slide_shape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraph', 'paragraph_index');
    }
};

subtest 'get_notes_slide_shape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_shape_paragraph', 'password', $params{ password });
    $utils->initialize('get_notes_slide_shape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraph', 'password');
    }
};

subtest 'get_notes_slide_shape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_shape_paragraph', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_shape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraph', 'folder');
    }
};

subtest 'get_notes_slide_shape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_shape_paragraph', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_shape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraph', 'storage');
    }
};

#
# get_notes_slide_shape_paragraphs test
#
subtest 'get_notes_slide_shape_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'storage', 'string'));
    $utils->initialize('get_notes_slide_shape_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraphs(%params);
    };
    if ($@) {
        fail("get_notes_slide_shape_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_shape_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_shape_paragraphs', 'name', $params{ name });
    $utils->initialize('get_notes_slide_shape_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraphs', 'name');
    }
};

subtest 'get_notes_slide_shape_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_shape_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_shape_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraphs', 'slide_index');
    }
};

subtest 'get_notes_slide_shape_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_notes_slide_shape_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('get_notes_slide_shape_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraphs', 'shape_index');
    }
};

subtest 'get_notes_slide_shape_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_shape_paragraphs', 'password', $params{ password });
    $utils->initialize('get_notes_slide_shape_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraphs', 'password');
    }
};

subtest 'get_notes_slide_shape_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_shape_paragraphs', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_shape_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraphs', 'folder');
    }
};

subtest 'get_notes_slide_shape_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_shape_paragraphs', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_shape_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_paragraphs', 'storage');
    }
};

#
# get_notes_slide_shape_portion test
#
subtest 'get_notes_slide_shape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portion', 'storage', 'string'));
    $utils->initialize('get_notes_slide_shape_portion', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portion(%params);
    };
    if ($@) {
        fail("get_notes_slide_shape_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_shape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_shape_portion', 'name', $params{ name });
    $utils->initialize('get_notes_slide_shape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portion', 'name');
    }
};

subtest 'get_notes_slide_shape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_shape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_shape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portion', 'slide_index');
    }
};

subtest 'get_notes_slide_shape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_notes_slide_shape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('get_notes_slide_shape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portion', 'shape_index');
    }
};

subtest 'get_notes_slide_shape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_notes_slide_shape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_notes_slide_shape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portion', 'paragraph_index');
    }
};

subtest 'get_notes_slide_shape_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_notes_slide_shape_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('get_notes_slide_shape_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portion', 'portion_index');
    }
};

subtest 'get_notes_slide_shape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_shape_portion', 'password', $params{ password });
    $utils->initialize('get_notes_slide_shape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portion', 'password');
    }
};

subtest 'get_notes_slide_shape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_shape_portion', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_shape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portion', 'folder');
    }
};

subtest 'get_notes_slide_shape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_notes_slide_shape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_shape_portion', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_shape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portion', 'storage');
    }
};

#
# get_notes_slide_shape_portions test
#
subtest 'get_notes_slide_shape_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portions', 'storage', 'string'));
    $utils->initialize('get_notes_slide_shape_portions', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portions(%params);
    };
    if ($@) {
        fail("get_notes_slide_shape_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_shape_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_shape_portions', 'name', $params{ name });
    $utils->initialize('get_notes_slide_shape_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portions', 'name');
    }
};

subtest 'get_notes_slide_shape_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_shape_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_shape_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portions', 'slide_index');
    }
};

subtest 'get_notes_slide_shape_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_notes_slide_shape_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('get_notes_slide_shape_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portions', 'shape_index');
    }
};

subtest 'get_notes_slide_shape_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_notes_slide_shape_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_notes_slide_shape_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portions', 'paragraph_index');
    }
};

subtest 'get_notes_slide_shape_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_shape_portions', 'password', $params{ password });
    $utils->initialize('get_notes_slide_shape_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portions', 'password');
    }
};

subtest 'get_notes_slide_shape_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_shape_portions', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_shape_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portions', 'folder');
    }
};

subtest 'get_notes_slide_shape_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_notes_slide_shape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shape_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_shape_portions', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_shape_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_shape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shape_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shape_portions', 'storage');
    }
};

#
# get_notes_slide_shapes test
#
subtest 'get_notes_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shapes', 'storage', 'string'));
    $utils->initialize('get_notes_slide_shapes', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_shapes(%params);
    };
    if ($@) {
        fail("get_notes_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_shapes', 'name', $params{ name });
    $utils->initialize('get_notes_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shapes', 'name');
    }
};

subtest 'get_notes_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shapes', 'slide_index');
    }
};

subtest 'get_notes_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_shapes', 'password', $params{ password });
    $utils->initialize('get_notes_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shapes', 'password');
    }
};

subtest 'get_notes_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_shapes', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shapes', 'folder');
    }
};

subtest 'get_notes_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_shapes', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_shapes', 'storage');
    }
};

#
# get_notes_slide_with_format test
#
subtest 'get_notes_slide_with_format' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $utils->initialize('get_notes_slide_with_format', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        fail("get_notes_slide_with_format raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_with_format invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_with_format', 'name', $params{ name });
    $utils->initialize('get_notes_slide_with_format', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_with_format', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_with_format', 'name');
    }
};

subtest 'get_notes_slide_with_format invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_with_format', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_with_format', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_with_format', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_with_format', 'slide_index');
    }
};

subtest 'get_notes_slide_with_format invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('get_notes_slide_with_format', 'format', $params{ format });
    $utils->initialize('get_notes_slide_with_format', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_with_format', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_with_format', 'format');
    }
};

subtest 'get_notes_slide_with_format invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('get_notes_slide_with_format', 'width', $params{ width });
    $utils->initialize('get_notes_slide_with_format', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_with_format', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_with_format', 'width');
    }
};

subtest 'get_notes_slide_with_format invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('get_notes_slide_with_format', 'height', $params{ height });
    $utils->initialize('get_notes_slide_with_format', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_with_format', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_with_format', 'height');
    }
};

subtest 'get_notes_slide_with_format invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_with_format', 'password', $params{ password });
    $utils->initialize('get_notes_slide_with_format', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_with_format', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_with_format', 'password');
    }
};

subtest 'get_notes_slide_with_format invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_with_format', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_with_format', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_with_format', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_with_format', 'folder');
    }
};

subtest 'get_notes_slide_with_format invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_with_format', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_with_format', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_with_format', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_with_format', 'storage');
    }
};

subtest 'get_notes_slide_with_format invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_with_format', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('get_notes_slide_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_with_format', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('get_notes_slide_with_format', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('get_notes_slide_with_format', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_with_format', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_with_format', 'fonts_folder');
    }
};

#
# get_paragraph_portion test
#
subtest 'get_paragraph_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portion', 'storage', 'string'));
    $utils->initialize('get_paragraph_portion', '');
    eval {
        my $result = $utils->{api}->get_paragraph_portion(%params);
    };
    if ($@) {
        fail("get_paragraph_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_paragraph_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_paragraph_portion', 'name', $params{ name });
    $utils->initialize('get_paragraph_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portion', 'name');
    }
};

subtest 'get_paragraph_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_paragraph_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('get_paragraph_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portion', 'slide_index');
    }
};

subtest 'get_paragraph_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_paragraph_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('get_paragraph_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portion', 'shape_index');
    }
};

subtest 'get_paragraph_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_paragraph_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_paragraph_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portion', 'paragraph_index');
    }
};

subtest 'get_paragraph_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_paragraph_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('get_paragraph_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portion', 'portion_index');
    }
};

subtest 'get_paragraph_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_paragraph_portion', 'password', $params{ password });
    $utils->initialize('get_paragraph_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portion', 'password');
    }
};

subtest 'get_paragraph_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_paragraph_portion', 'folder', $params{ folder });
    $utils->initialize('get_paragraph_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portion', 'folder');
    }
};

subtest 'get_paragraph_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_paragraph_portion', 'storage', $params{ storage });
    $utils->initialize('get_paragraph_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portion', 'storage');
    }
};

#
# get_paragraph_portions test
#
subtest 'get_paragraph_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portions', 'storage', 'string'));
    $utils->initialize('get_paragraph_portions', '');
    eval {
        my $result = $utils->{api}->get_paragraph_portions(%params);
    };
    if ($@) {
        fail("get_paragraph_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_paragraph_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_paragraph_portions', 'name', $params{ name });
    $utils->initialize('get_paragraph_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portions', 'name');
    }
};

subtest 'get_paragraph_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_paragraph_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('get_paragraph_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portions', 'slide_index');
    }
};

subtest 'get_paragraph_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_paragraph_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('get_paragraph_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portions', 'shape_index');
    }
};

subtest 'get_paragraph_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_paragraph_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_paragraph_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portions', 'paragraph_index');
    }
};

subtest 'get_paragraph_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_paragraph_portions', 'password', $params{ password });
    $utils->initialize('get_paragraph_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portions', 'password');
    }
};

subtest 'get_paragraph_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_paragraph_portions', 'folder', $params{ folder });
    $utils->initialize('get_paragraph_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portions', 'folder');
    }
};

subtest 'get_paragraph_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_paragraph_portions', 'storage', $params{ storage });
    $utils->initialize('get_paragraph_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_paragraph_portions', 'storage');
    }
};

#
# get_sections test
#
subtest 'get_sections' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $utils->initialize('get_sections', '');
    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        fail("get_sections raised an exception: $@");
    }
    pass();
};

subtest 'get_sections invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_sections', 'name', $params{ name });
    $utils->initialize('get_sections', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_sections', 'name');
    }
};

subtest 'get_sections invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_sections', 'password', $params{ password });
    $utils->initialize('get_sections', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_sections', 'password');
    }
};

subtest 'get_sections invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_sections', 'folder', $params{ folder });
    $utils->initialize('get_sections', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_sections', 'folder');
    }
};

subtest 'get_sections invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_sections', 'storage', $params{ storage });
    $utils->initialize('get_sections', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_sections', 'storage');
    }
};

#
# get_slide_animation test
#
subtest 'get_slide_animation' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_animation', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_animation', 'storage', 'string'));
    $utils->initialize('get_slide_animation', '');
    eval {
        my $result = $utils->{api}->get_slide_animation(%params);
    };
    if ($@) {
        fail("get_slide_animation raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_animation', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_animation', 'name', $params{ name });
    $utils->initialize('get_slide_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_animation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_animation', 'name');
    }
};

subtest 'get_slide_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_animation', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_animation', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_animation', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_animation', 'slide_index');
    }
};

subtest 'get_slide_animation invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_animation', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_animation', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_slide_animation', 'shape_index', $params{ shape_index });
    $utils->initialize('get_slide_animation', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_animation', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_animation', 'shape_index');
    }
};

subtest 'get_slide_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_animation', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_animation', 'password', $params{ password });
    $utils->initialize('get_slide_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_animation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_animation', 'password');
    }
};

subtest 'get_slide_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_animation', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_animation', 'folder', $params{ folder });
    $utils->initialize('get_slide_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_animation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_animation', 'folder');
    }
};

subtest 'get_slide_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_animation', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_animation', 'storage', $params{ storage });
    $utils->initialize('get_slide_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_animation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_animation', 'storage');
    }
};

#
# get_slide_header_footer test
#
subtest 'get_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $utils->initialize('get_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        fail("get_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_header_footer', 'name', $params{ name });
    $utils->initialize('get_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'name');
    }
};

subtest 'get_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_header_footer', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'slide_index');
    }
};

subtest 'get_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_header_footer', 'password', $params{ password });
    $utils->initialize('get_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'password');
    }
};

subtest 'get_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_header_footer', 'folder', $params{ folder });
    $utils->initialize('get_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'folder');
    }
};

subtest 'get_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_header_footer', 'storage', $params{ storage });
    $utils->initialize('get_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'storage');
    }
};

#
# get_slide_shape test
#
subtest 'get_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape', 'storage', 'string'));
    $utils->initialize('get_slide_shape', '');
    eval {
        my $result = $utils->{api}->get_slide_shape(%params);
    };
    if ($@) {
        fail("get_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_shape', 'name', $params{ name });
    $utils->initialize('get_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape', 'name');
    }
};

subtest 'get_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape', 'slide_index');
    }
};

subtest 'get_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('get_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape', 'shape_index');
    }
};

subtest 'get_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_shape', 'password', $params{ password });
    $utils->initialize('get_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape', 'password');
    }
};

subtest 'get_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_shape', 'folder', $params{ folder });
    $utils->initialize('get_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape', 'folder');
    }
};

subtest 'get_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_shape', 'storage', $params{ storage });
    $utils->initialize('get_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape', 'storage');
    }
};

#
# get_slide_shape_paragraph test
#
subtest 'get_slide_shape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraph', 'storage', 'string'));
    $utils->initialize('get_slide_shape_paragraph', '');
    eval {
        my $result = $utils->{api}->get_slide_shape_paragraph(%params);
    };
    if ($@) {
        fail("get_slide_shape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_shape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_shape_paragraph', 'name', $params{ name });
    $utils->initialize('get_slide_shape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraph', 'name');
    }
};

subtest 'get_slide_shape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_shape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_shape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraph', 'slide_index');
    }
};

subtest 'get_slide_shape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_slide_shape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('get_slide_shape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraph', 'shape_index');
    }
};

subtest 'get_slide_shape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_slide_shape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_slide_shape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraph', 'paragraph_index');
    }
};

subtest 'get_slide_shape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_shape_paragraph', 'password', $params{ password });
    $utils->initialize('get_slide_shape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraph', 'password');
    }
};

subtest 'get_slide_shape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_shape_paragraph', 'folder', $params{ folder });
    $utils->initialize('get_slide_shape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraph', 'folder');
    }
};

subtest 'get_slide_shape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_shape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_shape_paragraph', 'storage', $params{ storage });
    $utils->initialize('get_slide_shape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraph', 'storage');
    }
};

#
# get_slide_shape_paragraphs test
#
subtest 'get_slide_shape_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraphs', 'storage', 'string'));
    $utils->initialize('get_slide_shape_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_slide_shape_paragraphs(%params);
    };
    if ($@) {
        fail("get_slide_shape_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_shape_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_shape_paragraphs', 'name', $params{ name });
    $utils->initialize('get_slide_shape_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraphs', 'name');
    }
};

subtest 'get_slide_shape_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_shape_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_shape_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraphs', 'slide_index');
    }
};

subtest 'get_slide_shape_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_slide_shape_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('get_slide_shape_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraphs', 'shape_index');
    }
};

subtest 'get_slide_shape_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_shape_paragraphs', 'password', $params{ password });
    $utils->initialize('get_slide_shape_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraphs', 'password');
    }
};

subtest 'get_slide_shape_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_shape_paragraphs', 'folder', $params{ folder });
    $utils->initialize('get_slide_shape_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraphs', 'folder');
    }
};

subtest 'get_slide_shape_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_slide_shape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_shape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shape_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_shape_paragraphs', 'storage', $params{ storage });
    $utils->initialize('get_slide_shape_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_shape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shape_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_shape_paragraphs', 'storage');
    }
};

#
# get_slide_shapes test
#
subtest 'get_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shapes', 'storage', 'string'));
    $utils->initialize('get_slide_shapes', '');
    eval {
        my $result = $utils->{api}->get_slide_shapes(%params);
    };
    if ($@) {
        fail("get_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_shapes', 'name', $params{ name });
    $utils->initialize('get_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_shapes', 'name');
    }
};

subtest 'get_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_shapes', 'slide_index');
    }
};

subtest 'get_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_shapes', 'password', $params{ password });
    $utils->initialize('get_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_shapes', 'password');
    }
};

subtest 'get_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_shapes', 'folder', $params{ folder });
    $utils->initialize('get_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_shapes', 'folder');
    }
};

subtest 'get_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_shapes', 'storage', $params{ storage });
    $utils->initialize('get_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_shapes', 'storage');
    }
};

#
# get_slide_subshape test
#
subtest 'get_slide_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape', 'storage', 'string'));
    $utils->initialize('get_slide_subshape', '');
    eval {
        my $result = $utils->{api}->get_slide_subshape(%params);
    };
    if ($@) {
        fail("get_slide_subshape raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_subshape', 'name', $params{ name });
    $utils->initialize('get_slide_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape', 'name');
    }
};

subtest 'get_slide_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape', 'slide_index');
    }
};

subtest 'get_slide_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_slide_subshape', 'path', $params{ path });
    $utils->initialize('get_slide_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape', 'path');
    }
};

subtest 'get_slide_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_slide_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('get_slide_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape', 'shape_index');
    }
};

subtest 'get_slide_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_subshape', 'password', $params{ password });
    $utils->initialize('get_slide_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape', 'password');
    }
};

subtest 'get_slide_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_subshape', 'folder', $params{ folder });
    $utils->initialize('get_slide_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape', 'folder');
    }
};

subtest 'get_slide_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_subshape', 'storage', $params{ storage });
    $utils->initialize('get_slide_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape', 'storage');
    }
};

#
# get_slide_subshape_paragraph test
#
subtest 'get_slide_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('get_slide_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraph(%params);
    };
    if ($@) {
        fail("get_slide_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('get_slide_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraph', 'name');
    }
};

subtest 'get_slide_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraph', 'slide_index');
    }
};

subtest 'get_slide_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_slide_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('get_slide_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraph', 'path');
    }
};

subtest 'get_slide_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_slide_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('get_slide_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraph', 'shape_index');
    }
};

subtest 'get_slide_subshape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraph', 'paragraph_index');
    }
};

subtest 'get_slide_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('get_slide_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraph', 'password');
    }
};

subtest 'get_slide_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('get_slide_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraph', 'folder');
    }
};

subtest 'get_slide_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('get_slide_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraph', 'storage');
    }
};

#
# get_slide_subshape_paragraphs test
#
subtest 'get_slide_subshape_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraphs', 'storage', 'string'));
    $utils->initialize('get_slide_subshape_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        fail("get_slide_subshape_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_subshape_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_subshape_paragraphs', 'name', $params{ name });
    $utils->initialize('get_slide_subshape_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraphs', 'name');
    }
};

subtest 'get_slide_subshape_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_subshape_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_subshape_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraphs', 'slide_index');
    }
};

subtest 'get_slide_subshape_paragraphs invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_slide_subshape_paragraphs', 'path', $params{ path });
    $utils->initialize('get_slide_subshape_paragraphs', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraphs', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraphs', 'path');
    }
};

subtest 'get_slide_subshape_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_slide_subshape_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('get_slide_subshape_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraphs', 'shape_index');
    }
};

subtest 'get_slide_subshape_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_subshape_paragraphs', 'password', $params{ password });
    $utils->initialize('get_slide_subshape_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraphs', 'password');
    }
};

subtest 'get_slide_subshape_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_subshape_paragraphs', 'folder', $params{ folder });
    $utils->initialize('get_slide_subshape_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraphs', 'folder');
    }
};

subtest 'get_slide_subshape_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_subshape_paragraphs', 'storage', $params{ storage });
    $utils->initialize('get_slide_subshape_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshape_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshape_paragraphs', 'storage');
    }
};

#
# get_slide_subshapes test
#
subtest 'get_slide_subshapes' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshapes', 'storage', 'string'));
    $utils->initialize('get_slide_subshapes', '');
    eval {
        my $result = $utils->{api}->get_slide_subshapes(%params);
    };
    if ($@) {
        fail("get_slide_subshapes raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_subshapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_subshapes', 'name', $params{ name });
    $utils->initialize('get_slide_subshapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshapes', 'name');
    }
};

subtest 'get_slide_subshapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_subshapes', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_subshapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshapes', 'slide_index');
    }
};

subtest 'get_slide_subshapes invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshapes', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_slide_subshapes', 'path', $params{ path });
    $utils->initialize('get_slide_subshapes', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshapes', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshapes', 'path');
    }
};

subtest 'get_slide_subshapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_subshapes', 'password', $params{ password });
    $utils->initialize('get_slide_subshapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshapes', 'password');
    }
};

subtest 'get_slide_subshapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_subshapes', 'folder', $params{ folder });
    $utils->initialize('get_slide_subshapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshapes', 'folder');
    }
};

subtest 'get_slide_subshapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_subshapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_subshapes', 'storage', $params{ storage });
    $utils->initialize('get_slide_subshapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_subshapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_subshapes', 'storage');
    }
};

#
# get_slides_api_info test
#
subtest 'get_slides_api_info' => sub {
    my %params = ();
    $utils->initialize('get_slides_api_info', '');
    eval {
        my $result = $utils->{api}->get_slides_api_info(%params);
    };
    if ($@) {
        fail("get_slides_api_info raised an exception: $@");
    }
    pass();
};

#
# get_slides_document test
#
subtest 'get_slides_document' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('get_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('get_slides_document', 'folder', 'string'));
    $utils->initialize('get_slides_document', '');
    eval {
        my $result = $utils->{api}->get_slides_document(%params);
    };
    if ($@) {
        fail("get_slides_document raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_document invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('get_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('get_slides_document', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_document', 'name', $params{ name });
    $utils->initialize('get_slides_document', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_document', 'name');
    }
};

subtest 'get_slides_document invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('get_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('get_slides_document', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_document', 'password', $params{ password });
    $utils->initialize('get_slides_document', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_document', 'password');
    }
};

subtest 'get_slides_document invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('get_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('get_slides_document', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_document', 'storage', $params{ storage });
    $utils->initialize('get_slides_document', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_document', 'storage');
    }
};

subtest 'get_slides_document invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('get_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('get_slides_document', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_document', 'folder', $params{ folder });
    $utils->initialize('get_slides_document', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_document', 'folder');
    }
};

#
# get_slides_document_properties test
#
subtest 'get_slides_document_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_properties', 'storage', 'string'));
    $utils->initialize('get_slides_document_properties', '');
    eval {
        my $result = $utils->{api}->get_slides_document_properties(%params);
    };
    if ($@) {
        fail("get_slides_document_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_document_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_document_properties', 'name', $params{ name });
    $utils->initialize('get_slides_document_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_document_properties', 'name');
    }
};

subtest 'get_slides_document_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_document_properties', 'password', $params{ password });
    $utils->initialize('get_slides_document_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_document_properties', 'password');
    }
};

subtest 'get_slides_document_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_document_properties', 'folder', $params{ folder });
    $utils->initialize('get_slides_document_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_document_properties', 'folder');
    }
};

subtest 'get_slides_document_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_document_properties', 'storage', $params{ storage });
    $utils->initialize('get_slides_document_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_document_properties', 'storage');
    }
};

#
# get_slides_document_property test
#
subtest 'get_slides_document_property' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_property', 'storage', 'string'));
    $utils->initialize('get_slides_document_property', '');
    eval {
        my $result = $utils->{api}->get_slides_document_property(%params);
    };
    if ($@) {
        fail("get_slides_document_property raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_document_property invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_property', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_document_property', 'name', $params{ name });
    $utils->initialize('get_slides_document_property', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document_property', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_document_property', 'name');
    }
};

subtest 'get_slides_document_property invalid property_name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_property', 'storage', 'string'));
    $params{ property_name } = $utils->invalidize_param_value('get_slides_document_property', 'property_name', $params{ property_name });
    $utils->initialize('get_slides_document_property', 'property_name', $params{ property_name });

    eval {
        my $result = $utils->{api}->get_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document_property', 'property_name', $params{ property_name }, $@);
    } else {
        $utils->assert_no_error('get_slides_document_property', 'property_name');
    }
};

subtest 'get_slides_document_property invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_property', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_document_property', 'password', $params{ password });
    $utils->initialize('get_slides_document_property', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document_property', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_document_property', 'password');
    }
};

subtest 'get_slides_document_property invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_property', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_document_property', 'folder', $params{ folder });
    $utils->initialize('get_slides_document_property', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document_property', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_document_property', 'folder');
    }
};

subtest 'get_slides_document_property invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_slides_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_slides_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_document_property', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_document_property', 'storage', $params{ storage });
    $utils->initialize('get_slides_document_property', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_document_property', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_document_property', 'storage');
    }
};

#
# get_slides_image_with_default_format test
#
subtest 'get_slides_image_with_default_format' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_default_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_default_format', 'index', 'int'), 'password' => $utils->get_param_value('get_slides_image_with_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_default_format', 'storage', 'string'));
    $utils->initialize('get_slides_image_with_default_format', '');
    eval {
        my $result = $utils->{api}->get_slides_image_with_default_format(%params);
    };
    if ($@) {
        fail("get_slides_image_with_default_format raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_image_with_default_format invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_default_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_default_format', 'index', 'int'), 'password' => $utils->get_param_value('get_slides_image_with_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_default_format', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_image_with_default_format', 'name', $params{ name });
    $utils->initialize('get_slides_image_with_default_format', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_image_with_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_default_format', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_default_format', 'name');
    }
};

subtest 'get_slides_image_with_default_format invalid index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_default_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_default_format', 'index', 'int'), 'password' => $utils->get_param_value('get_slides_image_with_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_default_format', 'storage', 'string'));
    $params{ index } = $utils->invalidize_param_value('get_slides_image_with_default_format', 'index', $params{ index });
    $utils->initialize('get_slides_image_with_default_format', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->get_slides_image_with_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_default_format', 'index', $params{ index }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_default_format', 'index');
    }
};

subtest 'get_slides_image_with_default_format invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_default_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_default_format', 'index', 'int'), 'password' => $utils->get_param_value('get_slides_image_with_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_default_format', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_image_with_default_format', 'password', $params{ password });
    $utils->initialize('get_slides_image_with_default_format', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_image_with_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_default_format', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_default_format', 'password');
    }
};

subtest 'get_slides_image_with_default_format invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_default_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_default_format', 'index', 'int'), 'password' => $utils->get_param_value('get_slides_image_with_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_default_format', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_image_with_default_format', 'folder', $params{ folder });
    $utils->initialize('get_slides_image_with_default_format', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_image_with_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_default_format', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_default_format', 'folder');
    }
};

subtest 'get_slides_image_with_default_format invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_default_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_default_format', 'index', 'int'), 'password' => $utils->get_param_value('get_slides_image_with_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_default_format', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_image_with_default_format', 'storage', $params{ storage });
    $utils->initialize('get_slides_image_with_default_format', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_image_with_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_default_format', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_default_format', 'storage');
    }
};

#
# get_slides_image_with_format test
#
subtest 'get_slides_image_with_format' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_format', 'index', 'int'), 'format' => $utils->get_param_value('get_slides_image_with_format', 'format', 'string'), 'password' => $utils->get_param_value('get_slides_image_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_format', 'storage', 'string'));
    $utils->initialize('get_slides_image_with_format', '');
    eval {
        my $result = $utils->{api}->get_slides_image_with_format(%params);
    };
    if ($@) {
        fail("get_slides_image_with_format raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_image_with_format invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_format', 'index', 'int'), 'format' => $utils->get_param_value('get_slides_image_with_format', 'format', 'string'), 'password' => $utils->get_param_value('get_slides_image_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_format', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_image_with_format', 'name', $params{ name });
    $utils->initialize('get_slides_image_with_format', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_image_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_format', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_format', 'name');
    }
};

subtest 'get_slides_image_with_format invalid index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_format', 'index', 'int'), 'format' => $utils->get_param_value('get_slides_image_with_format', 'format', 'string'), 'password' => $utils->get_param_value('get_slides_image_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_format', 'storage', 'string'));
    $params{ index } = $utils->invalidize_param_value('get_slides_image_with_format', 'index', $params{ index });
    $utils->initialize('get_slides_image_with_format', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->get_slides_image_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_format', 'index', $params{ index }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_format', 'index');
    }
};

subtest 'get_slides_image_with_format invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_format', 'index', 'int'), 'format' => $utils->get_param_value('get_slides_image_with_format', 'format', 'string'), 'password' => $utils->get_param_value('get_slides_image_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_format', 'storage', 'string'));
    $params{ format } = $utils->invalidize_param_value('get_slides_image_with_format', 'format', $params{ format });
    $utils->initialize('get_slides_image_with_format', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->get_slides_image_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_format', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_format', 'format');
    }
};

subtest 'get_slides_image_with_format invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_format', 'index', 'int'), 'format' => $utils->get_param_value('get_slides_image_with_format', 'format', 'string'), 'password' => $utils->get_param_value('get_slides_image_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_format', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_image_with_format', 'password', $params{ password });
    $utils->initialize('get_slides_image_with_format', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_image_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_format', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_format', 'password');
    }
};

subtest 'get_slides_image_with_format invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_format', 'index', 'int'), 'format' => $utils->get_param_value('get_slides_image_with_format', 'format', 'string'), 'password' => $utils->get_param_value('get_slides_image_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_format', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_image_with_format', 'folder', $params{ folder });
    $utils->initialize('get_slides_image_with_format', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_image_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_format', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_format', 'folder');
    }
};

subtest 'get_slides_image_with_format invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_image_with_format', 'name', 'string'), 'index' => $utils->get_param_value('get_slides_image_with_format', 'index', 'int'), 'format' => $utils->get_param_value('get_slides_image_with_format', 'format', 'string'), 'password' => $utils->get_param_value('get_slides_image_with_format', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_image_with_format', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_image_with_format', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_image_with_format', 'storage', $params{ storage });
    $utils->initialize('get_slides_image_with_format', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_image_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_image_with_format', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_image_with_format', 'storage');
    }
};

#
# get_slides_images test
#
subtest 'get_slides_images' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_images', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_images', 'storage', 'string'));
    $utils->initialize('get_slides_images', '');
    eval {
        my $result = $utils->{api}->get_slides_images(%params);
    };
    if ($@) {
        fail("get_slides_images raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_images invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_images', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_images', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_images', 'name', $params{ name });
    $utils->initialize('get_slides_images', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_images', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_images', 'name');
    }
};

subtest 'get_slides_images invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_images', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_images', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_images', 'password', $params{ password });
    $utils->initialize('get_slides_images', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_images', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_images', 'password');
    }
};

subtest 'get_slides_images invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_images', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_images', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_images', 'folder', $params{ folder });
    $utils->initialize('get_slides_images', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_images', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_images', 'folder');
    }
};

subtest 'get_slides_images invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_images', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_images', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_images', 'storage', $params{ storage });
    $utils->initialize('get_slides_images', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_images', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_images', 'storage');
    }
};

#
# get_slides_placeholder test
#
subtest 'get_slides_placeholder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_slides_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholder', 'storage', 'string'));
    $utils->initialize('get_slides_placeholder', '');
    eval {
        my $result = $utils->{api}->get_slides_placeholder(%params);
    };
    if ($@) {
        fail("get_slides_placeholder raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_placeholder invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_slides_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholder', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_placeholder', 'name', $params{ name });
    $utils->initialize('get_slides_placeholder', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholder', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholder', 'name');
    }
};

subtest 'get_slides_placeholder invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_slides_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholder', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_placeholder', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_placeholder', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholder', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholder', 'slide_index');
    }
};

subtest 'get_slides_placeholder invalid placeholder_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_slides_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholder', 'storage', 'string'));
    $params{ placeholder_index } = $utils->invalidize_param_value('get_slides_placeholder', 'placeholder_index', $params{ placeholder_index });
    $utils->initialize('get_slides_placeholder', 'placeholder_index', $params{ placeholder_index });

    eval {
        my $result = $utils->{api}->get_slides_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholder', 'placeholder_index', $params{ placeholder_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholder', 'placeholder_index');
    }
};

subtest 'get_slides_placeholder invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_slides_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholder', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_placeholder', 'password', $params{ password });
    $utils->initialize('get_slides_placeholder', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholder', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholder', 'password');
    }
};

subtest 'get_slides_placeholder invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_slides_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholder', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_placeholder', 'folder', $params{ folder });
    $utils->initialize('get_slides_placeholder', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholder', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholder', 'folder');
    }
};

subtest 'get_slides_placeholder invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_slides_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholder', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_placeholder', 'storage', $params{ storage });
    $utils->initialize('get_slides_placeholder', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholder', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholder', 'storage');
    }
};

#
# get_slides_placeholders test
#
subtest 'get_slides_placeholders' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholders', 'storage', 'string'));
    $utils->initialize('get_slides_placeholders', '');
    eval {
        my $result = $utils->{api}->get_slides_placeholders(%params);
    };
    if ($@) {
        fail("get_slides_placeholders raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_placeholders invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholders', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_placeholders', 'name', $params{ name });
    $utils->initialize('get_slides_placeholders', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholders', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholders', 'name');
    }
};

subtest 'get_slides_placeholders invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholders', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_placeholders', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_placeholders', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholders', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholders', 'slide_index');
    }
};

subtest 'get_slides_placeholders invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholders', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_placeholders', 'password', $params{ password });
    $utils->initialize('get_slides_placeholders', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholders', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholders', 'password');
    }
};

subtest 'get_slides_placeholders invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholders', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_placeholders', 'folder', $params{ folder });
    $utils->initialize('get_slides_placeholders', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholders', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholders', 'folder');
    }
};

subtest 'get_slides_placeholders invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_placeholders', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_placeholders', 'storage', $params{ storage });
    $utils->initialize('get_slides_placeholders', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_placeholders', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_placeholders', 'storage');
    }
};

#
# get_slides_presentation_text_items test
#
subtest 'get_slides_presentation_text_items' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_slides_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_presentation_text_items', 'storage', 'string'));
    $utils->initialize('get_slides_presentation_text_items', '');
    eval {
        my $result = $utils->{api}->get_slides_presentation_text_items(%params);
    };
    if ($@) {
        fail("get_slides_presentation_text_items raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_presentation_text_items invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_slides_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_presentation_text_items', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_presentation_text_items', 'name', $params{ name });
    $utils->initialize('get_slides_presentation_text_items', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_presentation_text_items', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_presentation_text_items', 'name');
    }
};

subtest 'get_slides_presentation_text_items invalid with_empty' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_slides_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_presentation_text_items', 'storage', 'string'));
    $params{ with_empty } = $utils->invalidize_param_value('get_slides_presentation_text_items', 'with_empty', $params{ with_empty });
    $utils->initialize('get_slides_presentation_text_items', 'with_empty', $params{ with_empty });

    eval {
        my $result = $utils->{api}->get_slides_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_presentation_text_items', 'with_empty', $params{ with_empty }, $@);
    } else {
        $utils->assert_no_error('get_slides_presentation_text_items', 'with_empty');
    }
};

subtest 'get_slides_presentation_text_items invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_slides_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_presentation_text_items', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_presentation_text_items', 'password', $params{ password });
    $utils->initialize('get_slides_presentation_text_items', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_presentation_text_items', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_presentation_text_items', 'password');
    }
};

subtest 'get_slides_presentation_text_items invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_slides_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_presentation_text_items', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_presentation_text_items', 'folder', $params{ folder });
    $utils->initialize('get_slides_presentation_text_items', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_presentation_text_items', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_presentation_text_items', 'folder');
    }
};

subtest 'get_slides_presentation_text_items invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_slides_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_presentation_text_items', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_presentation_text_items', 'storage', $params{ storage });
    $utils->initialize('get_slides_presentation_text_items', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_presentation_text_items', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_presentation_text_items', 'storage');
    }
};

#
# get_slides_protection_properties test
#
subtest 'get_slides_protection_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_protection_properties', 'storage', 'string'));
    $utils->initialize('get_slides_protection_properties', '');
    eval {
        my $result = $utils->{api}->get_slides_protection_properties(%params);
    };
    if ($@) {
        fail("get_slides_protection_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_protection_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_protection_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_protection_properties', 'name', $params{ name });
    $utils->initialize('get_slides_protection_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_protection_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_protection_properties', 'name');
    }
};

subtest 'get_slides_protection_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_protection_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_protection_properties', 'password', $params{ password });
    $utils->initialize('get_slides_protection_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_protection_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_protection_properties', 'password');
    }
};

subtest 'get_slides_protection_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_protection_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_protection_properties', 'folder', $params{ folder });
    $utils->initialize('get_slides_protection_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_protection_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_protection_properties', 'folder');
    }
};

subtest 'get_slides_protection_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_protection_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_protection_properties', 'storage', $params{ storage });
    $utils->initialize('get_slides_protection_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_protection_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_protection_properties', 'storage');
    }
};

#
# get_slides_slide test
#
subtest 'get_slides_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide', 'storage', 'string'));
    $utils->initialize('get_slides_slide', '');
    eval {
        my $result = $utils->{api}->get_slides_slide(%params);
    };
    if ($@) {
        fail("get_slides_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_slide', 'name', $params{ name });
    $utils->initialize('get_slides_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide', 'name');
    }
};

subtest 'get_slides_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide', 'slide_index');
    }
};

subtest 'get_slides_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_slide', 'password', $params{ password });
    $utils->initialize('get_slides_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide', 'password');
    }
};

subtest 'get_slides_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_slide', 'folder', $params{ folder });
    $utils->initialize('get_slides_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide', 'folder');
    }
};

subtest 'get_slides_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_slide', 'storage', $params{ storage });
    $utils->initialize('get_slides_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide', 'storage');
    }
};

#
# get_slides_slide_background test
#
subtest 'get_slides_slide_background' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_background', 'storage', 'string'));
    $utils->initialize('get_slides_slide_background', '');
    eval {
        my $result = $utils->{api}->get_slides_slide_background(%params);
    };
    if ($@) {
        fail("get_slides_slide_background raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_slide_background invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_background', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_slide_background', 'name', $params{ name });
    $utils->initialize('get_slides_slide_background', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_background', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_background', 'name');
    }
};

subtest 'get_slides_slide_background invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_background', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_slide_background', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_slide_background', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_background', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_background', 'slide_index');
    }
};

subtest 'get_slides_slide_background invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_background', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_slide_background', 'password', $params{ password });
    $utils->initialize('get_slides_slide_background', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_background', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_background', 'password');
    }
};

subtest 'get_slides_slide_background invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_background', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_slide_background', 'folder', $params{ folder });
    $utils->initialize('get_slides_slide_background', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_background', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_background', 'folder');
    }
};

subtest 'get_slides_slide_background invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_background', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_slide_background', 'storage', $params{ storage });
    $utils->initialize('get_slides_slide_background', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_background', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_background', 'storage');
    }
};

#
# get_slides_slide_comments test
#
subtest 'get_slides_slide_comments' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_comments', 'storage', 'string'));
    $utils->initialize('get_slides_slide_comments', '');
    eval {
        my $result = $utils->{api}->get_slides_slide_comments(%params);
    };
    if ($@) {
        fail("get_slides_slide_comments raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_slide_comments invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_comments', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_slide_comments', 'name', $params{ name });
    $utils->initialize('get_slides_slide_comments', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_comments', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_comments', 'name');
    }
};

subtest 'get_slides_slide_comments invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_comments', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_slide_comments', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_slide_comments', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_comments', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_comments', 'slide_index');
    }
};

subtest 'get_slides_slide_comments invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_comments', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_slide_comments', 'password', $params{ password });
    $utils->initialize('get_slides_slide_comments', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_comments', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_comments', 'password');
    }
};

subtest 'get_slides_slide_comments invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_comments', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_slide_comments', 'folder', $params{ folder });
    $utils->initialize('get_slides_slide_comments', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_comments', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_comments', 'folder');
    }
};

subtest 'get_slides_slide_comments invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_comments', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_slide_comments', 'storage', $params{ storage });
    $utils->initialize('get_slides_slide_comments', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_comments', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_comments', 'storage');
    }
};

#
# get_slides_slide_images test
#
subtest 'get_slides_slide_images' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_images', 'storage', 'string'));
    $utils->initialize('get_slides_slide_images', '');
    eval {
        my $result = $utils->{api}->get_slides_slide_images(%params);
    };
    if ($@) {
        fail("get_slides_slide_images raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_slide_images invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_images', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_slide_images', 'name', $params{ name });
    $utils->initialize('get_slides_slide_images', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_images', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_images', 'name');
    }
};

subtest 'get_slides_slide_images invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_images', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_slide_images', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_slide_images', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_images', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_images', 'slide_index');
    }
};

subtest 'get_slides_slide_images invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_images', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_slide_images', 'password', $params{ password });
    $utils->initialize('get_slides_slide_images', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_images', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_images', 'password');
    }
};

subtest 'get_slides_slide_images invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_images', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_slide_images', 'folder', $params{ folder });
    $utils->initialize('get_slides_slide_images', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_images', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_images', 'folder');
    }
};

subtest 'get_slides_slide_images invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_images', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_slide_images', 'storage', $params{ storage });
    $utils->initialize('get_slides_slide_images', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_images', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_images', 'storage');
    }
};

#
# get_slides_slide_properties test
#
subtest 'get_slides_slide_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_properties', 'storage', 'string'));
    $utils->initialize('get_slides_slide_properties', '');
    eval {
        my $result = $utils->{api}->get_slides_slide_properties(%params);
    };
    if ($@) {
        fail("get_slides_slide_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_slide_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_slide_properties', 'name', $params{ name });
    $utils->initialize('get_slides_slide_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_properties', 'name');
    }
};

subtest 'get_slides_slide_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_slide_properties', 'password', $params{ password });
    $utils->initialize('get_slides_slide_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_properties', 'password');
    }
};

subtest 'get_slides_slide_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_slide_properties', 'folder', $params{ folder });
    $utils->initialize('get_slides_slide_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_properties', 'folder');
    }
};

subtest 'get_slides_slide_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_slide_properties', 'storage', $params{ storage });
    $utils->initialize('get_slides_slide_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_properties', 'storage');
    }
};

#
# get_slides_slide_text_items test
#
subtest 'get_slides_slide_text_items' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slides_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_text_items', 'storage', 'string'));
    $utils->initialize('get_slides_slide_text_items', '');
    eval {
        my $result = $utils->{api}->get_slides_slide_text_items(%params);
    };
    if ($@) {
        fail("get_slides_slide_text_items raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_slide_text_items invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slides_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_text_items', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_slide_text_items', 'name', $params{ name });
    $utils->initialize('get_slides_slide_text_items', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_text_items', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_text_items', 'name');
    }
};

subtest 'get_slides_slide_text_items invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slides_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_text_items', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_slide_text_items', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_slide_text_items', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_text_items', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_text_items', 'slide_index');
    }
};

subtest 'get_slides_slide_text_items invalid with_empty' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slides_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_text_items', 'storage', 'string'));
    $params{ with_empty } = $utils->invalidize_param_value('get_slides_slide_text_items', 'with_empty', $params{ with_empty });
    $utils->initialize('get_slides_slide_text_items', 'with_empty', $params{ with_empty });

    eval {
        my $result = $utils->{api}->get_slides_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_text_items', 'with_empty', $params{ with_empty }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_text_items', 'with_empty');
    }
};

subtest 'get_slides_slide_text_items invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slides_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_text_items', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_slide_text_items', 'password', $params{ password });
    $utils->initialize('get_slides_slide_text_items', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_text_items', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_text_items', 'password');
    }
};

subtest 'get_slides_slide_text_items invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slides_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_text_items', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_slide_text_items', 'folder', $params{ folder });
    $utils->initialize('get_slides_slide_text_items', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_text_items', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_text_items', 'folder');
    }
};

subtest 'get_slides_slide_text_items invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slides_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slides_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slide_text_items', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_slide_text_items', 'storage', $params{ storage });
    $utils->initialize('get_slides_slide_text_items', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slide_text_items', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_slide_text_items', 'storage');
    }
};

#
# get_slides_slides_list test
#
subtest 'get_slides_slides_list' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slides_list', 'storage', 'string'));
    $utils->initialize('get_slides_slides_list', '');
    eval {
        my $result = $utils->{api}->get_slides_slides_list(%params);
    };
    if ($@) {
        fail("get_slides_slides_list raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_slides_list invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slides_list', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_slides_list', 'name', $params{ name });
    $utils->initialize('get_slides_slides_list', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slides_list', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_slides_list', 'name');
    }
};

subtest 'get_slides_slides_list invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slides_list', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_slides_list', 'password', $params{ password });
    $utils->initialize('get_slides_slides_list', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slides_list', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_slides_list', 'password');
    }
};

subtest 'get_slides_slides_list invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slides_list', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_slides_list', 'folder', $params{ folder });
    $utils->initialize('get_slides_slides_list', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slides_list', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_slides_list', 'folder');
    }
};

subtest 'get_slides_slides_list invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_slides_list', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_slides_list', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_slides_list', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_slides_list', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_slides_list', 'storage', $params{ storage });
    $utils->initialize('get_slides_slides_list', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_slides_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_slides_list', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_slides_list', 'storage');
    }
};

#
# get_slides_theme test
#
subtest 'get_slides_theme' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme', 'storage', 'string'));
    $utils->initialize('get_slides_theme', '');
    eval {
        my $result = $utils->{api}->get_slides_theme(%params);
    };
    if ($@) {
        fail("get_slides_theme raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_theme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_theme', 'name', $params{ name });
    $utils->initialize('get_slides_theme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme', 'name');
    }
};

subtest 'get_slides_theme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_theme', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_theme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme', 'slide_index');
    }
};

subtest 'get_slides_theme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_theme', 'password', $params{ password });
    $utils->initialize('get_slides_theme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme', 'password');
    }
};

subtest 'get_slides_theme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_theme', 'folder', $params{ folder });
    $utils->initialize('get_slides_theme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme', 'folder');
    }
};

subtest 'get_slides_theme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_theme', 'storage', $params{ storage });
    $utils->initialize('get_slides_theme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme', 'storage');
    }
};

#
# get_slides_theme_color_scheme test
#
subtest 'get_slides_theme_color_scheme' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_color_scheme', 'storage', 'string'));
    $utils->initialize('get_slides_theme_color_scheme', '');
    eval {
        my $result = $utils->{api}->get_slides_theme_color_scheme(%params);
    };
    if ($@) {
        fail("get_slides_theme_color_scheme raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_theme_color_scheme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_color_scheme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_theme_color_scheme', 'name', $params{ name });
    $utils->initialize('get_slides_theme_color_scheme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_theme_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_color_scheme', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_color_scheme', 'name');
    }
};

subtest 'get_slides_theme_color_scheme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_color_scheme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_theme_color_scheme', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_theme_color_scheme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_theme_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_color_scheme', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_color_scheme', 'slide_index');
    }
};

subtest 'get_slides_theme_color_scheme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_color_scheme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_theme_color_scheme', 'password', $params{ password });
    $utils->initialize('get_slides_theme_color_scheme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_theme_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_color_scheme', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_color_scheme', 'password');
    }
};

subtest 'get_slides_theme_color_scheme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_color_scheme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_theme_color_scheme', 'folder', $params{ folder });
    $utils->initialize('get_slides_theme_color_scheme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_theme_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_color_scheme', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_color_scheme', 'folder');
    }
};

subtest 'get_slides_theme_color_scheme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_color_scheme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_theme_color_scheme', 'storage', $params{ storage });
    $utils->initialize('get_slides_theme_color_scheme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_theme_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_color_scheme', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_color_scheme', 'storage');
    }
};

#
# get_slides_theme_font_scheme test
#
subtest 'get_slides_theme_font_scheme' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_font_scheme', 'storage', 'string'));
    $utils->initialize('get_slides_theme_font_scheme', '');
    eval {
        my $result = $utils->{api}->get_slides_theme_font_scheme(%params);
    };
    if ($@) {
        fail("get_slides_theme_font_scheme raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_theme_font_scheme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_font_scheme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_theme_font_scheme', 'name', $params{ name });
    $utils->initialize('get_slides_theme_font_scheme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_theme_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_font_scheme', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_font_scheme', 'name');
    }
};

subtest 'get_slides_theme_font_scheme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_font_scheme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_theme_font_scheme', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_theme_font_scheme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_theme_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_font_scheme', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_font_scheme', 'slide_index');
    }
};

subtest 'get_slides_theme_font_scheme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_font_scheme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_theme_font_scheme', 'password', $params{ password });
    $utils->initialize('get_slides_theme_font_scheme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_theme_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_font_scheme', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_font_scheme', 'password');
    }
};

subtest 'get_slides_theme_font_scheme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_font_scheme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_theme_font_scheme', 'folder', $params{ folder });
    $utils->initialize('get_slides_theme_font_scheme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_theme_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_font_scheme', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_font_scheme', 'folder');
    }
};

subtest 'get_slides_theme_font_scheme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_font_scheme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_theme_font_scheme', 'storage', $params{ storage });
    $utils->initialize('get_slides_theme_font_scheme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_theme_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_font_scheme', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_font_scheme', 'storage');
    }
};

#
# get_slides_theme_format_scheme test
#
subtest 'get_slides_theme_format_scheme' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_format_scheme', 'storage', 'string'));
    $utils->initialize('get_slides_theme_format_scheme', '');
    eval {
        my $result = $utils->{api}->get_slides_theme_format_scheme(%params);
    };
    if ($@) {
        fail("get_slides_theme_format_scheme raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_theme_format_scheme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_format_scheme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_theme_format_scheme', 'name', $params{ name });
    $utils->initialize('get_slides_theme_format_scheme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_theme_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_format_scheme', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_format_scheme', 'name');
    }
};

subtest 'get_slides_theme_format_scheme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_format_scheme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slides_theme_format_scheme', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slides_theme_format_scheme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slides_theme_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_format_scheme', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_format_scheme', 'slide_index');
    }
};

subtest 'get_slides_theme_format_scheme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_format_scheme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_theme_format_scheme', 'password', $params{ password });
    $utils->initialize('get_slides_theme_format_scheme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_theme_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_format_scheme', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_format_scheme', 'password');
    }
};

subtest 'get_slides_theme_format_scheme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_format_scheme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_theme_format_scheme', 'folder', $params{ folder });
    $utils->initialize('get_slides_theme_format_scheme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_theme_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_format_scheme', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_format_scheme', 'folder');
    }
};

subtest 'get_slides_theme_format_scheme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_theme_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slides_theme_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slides_theme_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_theme_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_theme_format_scheme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_theme_format_scheme', 'storage', $params{ storage });
    $utils->initialize('get_slides_theme_format_scheme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_theme_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_theme_format_scheme', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_theme_format_scheme', 'storage');
    }
};

#
# get_slides_view_properties test
#
subtest 'get_slides_view_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_view_properties', 'storage', 'string'));
    $utils->initialize('get_slides_view_properties', '');
    eval {
        my $result = $utils->{api}->get_slides_view_properties(%params);
    };
    if ($@) {
        fail("get_slides_view_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_slides_view_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_view_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides_view_properties', 'name', $params{ name });
    $utils->initialize('get_slides_view_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_view_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides_view_properties', 'name');
    }
};

subtest 'get_slides_view_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_view_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides_view_properties', 'password', $params{ password });
    $utils->initialize('get_slides_view_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_view_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides_view_properties', 'password');
    }
};

subtest 'get_slides_view_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_view_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides_view_properties', 'folder', $params{ folder });
    $utils->initialize('get_slides_view_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_view_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides_view_properties', 'folder');
    }
};

subtest 'get_slides_view_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides_view_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides_view_properties', 'storage', $params{ storage });
    $utils->initialize('get_slides_view_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides_view_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides_view_properties', 'storage');
    }
};

#
# get_subshape_paragraph_portion test
#
subtest 'get_subshape_paragraph_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $utils->initialize('get_subshape_paragraph_portion', '');
    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        fail("get_subshape_paragraph_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_subshape_paragraph_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_subshape_paragraph_portion', 'name', $params{ name });
    $utils->initialize('get_subshape_paragraph_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portion', 'name');
    }
};

subtest 'get_subshape_paragraph_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_subshape_paragraph_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('get_subshape_paragraph_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portion', 'slide_index');
    }
};

subtest 'get_subshape_paragraph_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_subshape_paragraph_portion', 'path', $params{ path });
    $utils->initialize('get_subshape_paragraph_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portion', 'path');
    }
};

subtest 'get_subshape_paragraph_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_subshape_paragraph_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('get_subshape_paragraph_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portion', 'shape_index');
    }
};

subtest 'get_subshape_paragraph_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_subshape_paragraph_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_subshape_paragraph_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portion', 'paragraph_index');
    }
};

subtest 'get_subshape_paragraph_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_subshape_paragraph_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('get_subshape_paragraph_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portion', 'portion_index');
    }
};

subtest 'get_subshape_paragraph_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_subshape_paragraph_portion', 'password', $params{ password });
    $utils->initialize('get_subshape_paragraph_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portion', 'password');
    }
};

subtest 'get_subshape_paragraph_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_subshape_paragraph_portion', 'folder', $params{ folder });
    $utils->initialize('get_subshape_paragraph_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portion', 'folder');
    }
};

subtest 'get_subshape_paragraph_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_paragraph_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_subshape_paragraph_portion', 'storage', $params{ storage });
    $utils->initialize('get_subshape_paragraph_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portion', 'storage');
    }
};

#
# get_subshape_paragraph_portions test
#
subtest 'get_subshape_paragraph_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portions', 'storage', 'string'));
    $utils->initialize('get_subshape_paragraph_portions', '');
    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portions(%params);
    };
    if ($@) {
        fail("get_subshape_paragraph_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_subshape_paragraph_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_subshape_paragraph_portions', 'name', $params{ name });
    $utils->initialize('get_subshape_paragraph_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portions', 'name');
    }
};

subtest 'get_subshape_paragraph_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_subshape_paragraph_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('get_subshape_paragraph_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portions', 'slide_index');
    }
};

subtest 'get_subshape_paragraph_portions invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portions', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_subshape_paragraph_portions', 'path', $params{ path });
    $utils->initialize('get_subshape_paragraph_portions', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portions', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portions', 'path');
    }
};

subtest 'get_subshape_paragraph_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_subshape_paragraph_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('get_subshape_paragraph_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portions', 'shape_index');
    }
};

subtest 'get_subshape_paragraph_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_subshape_paragraph_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_subshape_paragraph_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portions', 'paragraph_index');
    }
};

subtest 'get_subshape_paragraph_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_subshape_paragraph_portions', 'password', $params{ password });
    $utils->initialize('get_subshape_paragraph_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portions', 'password');
    }
};

subtest 'get_subshape_paragraph_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_subshape_paragraph_portions', 'folder', $params{ folder });
    $utils->initialize('get_subshape_paragraph_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portions', 'folder');
    }
};

subtest 'get_subshape_paragraph_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_subshape_paragraph_portions', 'storage', $params{ storage });
    $utils->initialize('get_subshape_paragraph_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph_portions', 'storage');
    }
};

#
# move_file test
#
subtest 'move_file' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $utils->initialize('move_file', '');
    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        fail("move_file raised an exception: $@");
    }
    pass();
};

subtest 'move_file invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('move_file', 'src_path', $params{ src_path });
    $utils->initialize('move_file', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'src_path', $params{ src_path }, $@);
    } else {
        $utils->assert_no_error('move_file', 'src_path');
    }
};

subtest 'move_file invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('move_file', 'dest_path', $params{ dest_path });
    $utils->initialize('move_file', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'dest_path', $params{ dest_path }, $@);
    } else {
        $utils->assert_no_error('move_file', 'dest_path');
    }
};

subtest 'move_file invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('move_file', 'src_storage_name', $params{ src_storage_name });
    $utils->initialize('move_file', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'src_storage_name', $params{ src_storage_name }, $@);
    } else {
        $utils->assert_no_error('move_file', 'src_storage_name');
    }
};

subtest 'move_file invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('move_file', 'dest_storage_name', $params{ dest_storage_name });
    $utils->initialize('move_file', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'dest_storage_name', $params{ dest_storage_name }, $@);
    } else {
        $utils->assert_no_error('move_file', 'dest_storage_name');
    }
};

subtest 'move_file invalid version_id' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('move_file', 'version_id', $params{ version_id });
    $utils->initialize('move_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('move_file', 'version_id');
    }
};

#
# move_folder test
#
subtest 'move_folder' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $utils->initialize('move_folder', '');
    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        fail("move_folder raised an exception: $@");
    }
    pass();
};

subtest 'move_folder invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('move_folder', 'src_path', $params{ src_path });
    $utils->initialize('move_folder', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'src_path', $params{ src_path }, $@);
    } else {
        $utils->assert_no_error('move_folder', 'src_path');
    }
};

subtest 'move_folder invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('move_folder', 'dest_path', $params{ dest_path });
    $utils->initialize('move_folder', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'dest_path', $params{ dest_path }, $@);
    } else {
        $utils->assert_no_error('move_folder', 'dest_path');
    }
};

subtest 'move_folder invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('move_folder', 'src_storage_name', $params{ src_storage_name });
    $utils->initialize('move_folder', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'src_storage_name', $params{ src_storage_name }, $@);
    } else {
        $utils->assert_no_error('move_folder', 'src_storage_name');
    }
};

subtest 'move_folder invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('move_folder', 'dest_storage_name', $params{ dest_storage_name });
    $utils->initialize('move_folder', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'dest_storage_name', $params{ dest_storage_name }, $@);
    } else {
        $utils->assert_no_error('move_folder', 'dest_storage_name');
    }
};

#
# object_exists test
#
subtest 'object_exists' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $utils->initialize('object_exists', '');
    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        fail("object_exists raised an exception: $@");
    }
    pass();
};

subtest 'object_exists invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $params{ path } = $utils->invalidize_param_value('object_exists', 'path', $params{ path });
    $utils->initialize('object_exists', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        $utils->assert_error('object_exists', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('object_exists', 'path');
    }
};

subtest 'object_exists invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('object_exists', 'storage_name', $params{ storage_name });
    $utils->initialize('object_exists', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        $utils->assert_error('object_exists', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('object_exists', 'storage_name');
    }
};

subtest 'object_exists invalid version_id' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('object_exists', 'version_id', $params{ version_id });
    $utils->initialize('object_exists', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        $utils->assert_error('object_exists', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('object_exists', 'version_id');
    }
};

#
# post_add_new_paragraph test
#
subtest 'post_add_new_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_paragraph', 'position', 'int'));
    $utils->initialize('post_add_new_paragraph', '');
    eval {
        my $result = $utils->{api}->post_add_new_paragraph(%params);
    };
    if ($@) {
        fail("post_add_new_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'post_add_new_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_paragraph', 'position', 'int'));
    $params{ name } = $utils->invalidize_param_value('post_add_new_paragraph', 'name', $params{ name });
    $utils->initialize('post_add_new_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_add_new_paragraph', 'name');
    }
};

subtest 'post_add_new_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_paragraph', 'position', 'int'));
    $params{ slide_index } = $utils->invalidize_param_value('post_add_new_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('post_add_new_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_paragraph', 'slide_index');
    }
};

subtest 'post_add_new_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_paragraph', 'position', 'int'));
    $params{ shape_index } = $utils->invalidize_param_value('post_add_new_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('post_add_new_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_paragraph', 'shape_index');
    }
};

subtest 'post_add_new_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_paragraph', 'position', 'int'));
    $params{ dto } = $utils->invalidize_param_value('post_add_new_paragraph', 'dto', $params{ dto });
    $utils->initialize('post_add_new_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_add_new_paragraph', 'dto');
    }
};

subtest 'post_add_new_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_paragraph', 'position', 'int'));
    $params{ password } = $utils->invalidize_param_value('post_add_new_paragraph', 'password', $params{ password });
    $utils->initialize('post_add_new_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_add_new_paragraph', 'password');
    }
};

subtest 'post_add_new_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_paragraph', 'position', 'int'));
    $params{ folder } = $utils->invalidize_param_value('post_add_new_paragraph', 'folder', $params{ folder });
    $utils->initialize('post_add_new_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_add_new_paragraph', 'folder');
    }
};

subtest 'post_add_new_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_paragraph', 'position', 'int'));
    $params{ storage } = $utils->invalidize_param_value('post_add_new_paragraph', 'storage', $params{ storage });
    $utils->initialize('post_add_new_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_add_new_paragraph', 'storage');
    }
};

subtest 'post_add_new_paragraph invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_paragraph', 'position', 'int'));
    $params{ position } = $utils->invalidize_param_value('post_add_new_paragraph', 'position', $params{ position });
    $utils->initialize('post_add_new_paragraph', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_paragraph', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_add_new_paragraph', 'position');
    }
};

#
# post_add_new_portion test
#
subtest 'post_add_new_portion' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $utils->initialize('post_add_new_portion', '');
    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        fail("post_add_new_portion raised an exception: $@");
    }
    pass();
};

subtest 'post_add_new_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $params{ name } = $utils->invalidize_param_value('post_add_new_portion', 'name', $params{ name });
    $utils->initialize('post_add_new_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_add_new_portion', 'name');
    }
};

subtest 'post_add_new_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $params{ slide_index } = $utils->invalidize_param_value('post_add_new_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('post_add_new_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_portion', 'slide_index');
    }
};

subtest 'post_add_new_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $params{ shape_index } = $utils->invalidize_param_value('post_add_new_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('post_add_new_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_portion', 'shape_index');
    }
};

subtest 'post_add_new_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $params{ paragraph_index } = $utils->invalidize_param_value('post_add_new_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('post_add_new_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_portion', 'paragraph_index');
    }
};

subtest 'post_add_new_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $params{ dto } = $utils->invalidize_param_value('post_add_new_portion', 'dto', $params{ dto });
    $utils->initialize('post_add_new_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_add_new_portion', 'dto');
    }
};

subtest 'post_add_new_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $params{ password } = $utils->invalidize_param_value('post_add_new_portion', 'password', $params{ password });
    $utils->initialize('post_add_new_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_add_new_portion', 'password');
    }
};

subtest 'post_add_new_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $params{ folder } = $utils->invalidize_param_value('post_add_new_portion', 'folder', $params{ folder });
    $utils->initialize('post_add_new_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_add_new_portion', 'folder');
    }
};

subtest 'post_add_new_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $params{ storage } = $utils->invalidize_param_value('post_add_new_portion', 'storage', $params{ storage });
    $utils->initialize('post_add_new_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_add_new_portion', 'storage');
    }
};

subtest 'post_add_new_portion invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_portion', 'position', 'int'));
    $params{ position } = $utils->invalidize_param_value('post_add_new_portion', 'position', $params{ position });
    $utils->initialize('post_add_new_portion', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_portion', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_add_new_portion', 'position');
    }
};

#
# post_add_new_shape test
#
subtest 'post_add_new_shape' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_shape', 'position', 'int'));
    $utils->initialize('post_add_new_shape', '');
    eval {
        my $result = $utils->{api}->post_add_new_shape(%params);
    };
    if ($@) {
        fail("post_add_new_shape raised an exception: $@");
    }
    pass();
};

subtest 'post_add_new_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_shape', 'position', 'int'));
    $params{ name } = $utils->invalidize_param_value('post_add_new_shape', 'name', $params{ name });
    $utils->initialize('post_add_new_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_add_new_shape', 'name');
    }
};

subtest 'post_add_new_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_shape', 'position', 'int'));
    $params{ slide_index } = $utils->invalidize_param_value('post_add_new_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('post_add_new_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_shape', 'slide_index');
    }
};

subtest 'post_add_new_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_shape', 'position', 'int'));
    $params{ dto } = $utils->invalidize_param_value('post_add_new_shape', 'dto', $params{ dto });
    $utils->initialize('post_add_new_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_shape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_add_new_shape', 'dto');
    }
};

subtest 'post_add_new_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_shape', 'position', 'int'));
    $params{ password } = $utils->invalidize_param_value('post_add_new_shape', 'password', $params{ password });
    $utils->initialize('post_add_new_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_add_new_shape', 'password');
    }
};

subtest 'post_add_new_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_shape', 'position', 'int'));
    $params{ folder } = $utils->invalidize_param_value('post_add_new_shape', 'folder', $params{ folder });
    $utils->initialize('post_add_new_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_add_new_shape', 'folder');
    }
};

subtest 'post_add_new_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_shape', 'position', 'int'));
    $params{ storage } = $utils->invalidize_param_value('post_add_new_shape', 'storage', $params{ storage });
    $utils->initialize('post_add_new_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_add_new_shape', 'storage');
    }
};

subtest 'post_add_new_shape invalid shape_to_clone' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_shape', 'position', 'int'));
    $params{ shape_to_clone } = $utils->invalidize_param_value('post_add_new_shape', 'shape_to_clone', $params{ shape_to_clone });
    $utils->initialize('post_add_new_shape', 'shape_to_clone', $params{ shape_to_clone });

    eval {
        my $result = $utils->{api}->post_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_shape', 'shape_to_clone', $params{ shape_to_clone }, $@);
    } else {
        $utils->assert_no_error('post_add_new_shape', 'shape_to_clone');
    }
};

subtest 'post_add_new_shape invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_shape', 'position', 'int'));
    $params{ position } = $utils->invalidize_param_value('post_add_new_shape', 'position', $params{ position });
    $utils->initialize('post_add_new_shape', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_shape', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_add_new_shape', 'position');
    }
};

#
# post_add_new_subshape test
#
subtest 'post_add_new_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $utils->initialize('post_add_new_subshape', '');
    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        fail("post_add_new_subshape raised an exception: $@");
    }
    pass();
};

subtest 'post_add_new_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $params{ name } = $utils->invalidize_param_value('post_add_new_subshape', 'name', $params{ name });
    $utils->initialize('post_add_new_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape', 'name');
    }
};

subtest 'post_add_new_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $params{ slide_index } = $utils->invalidize_param_value('post_add_new_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('post_add_new_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape', 'slide_index');
    }
};

subtest 'post_add_new_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $params{ path } = $utils->invalidize_param_value('post_add_new_subshape', 'path', $params{ path });
    $utils->initialize('post_add_new_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape', 'path');
    }
};

subtest 'post_add_new_subshape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $params{ dto } = $utils->invalidize_param_value('post_add_new_subshape', 'dto', $params{ dto });
    $utils->initialize('post_add_new_subshape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape', 'dto');
    }
};

subtest 'post_add_new_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $params{ password } = $utils->invalidize_param_value('post_add_new_subshape', 'password', $params{ password });
    $utils->initialize('post_add_new_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape', 'password');
    }
};

subtest 'post_add_new_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $params{ folder } = $utils->invalidize_param_value('post_add_new_subshape', 'folder', $params{ folder });
    $utils->initialize('post_add_new_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape', 'folder');
    }
};

subtest 'post_add_new_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $params{ storage } = $utils->invalidize_param_value('post_add_new_subshape', 'storage', $params{ storage });
    $utils->initialize('post_add_new_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape', 'storage');
    }
};

subtest 'post_add_new_subshape invalid shape_to_clone' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $params{ shape_to_clone } = $utils->invalidize_param_value('post_add_new_subshape', 'shape_to_clone', $params{ shape_to_clone });
    $utils->initialize('post_add_new_subshape', 'shape_to_clone', $params{ shape_to_clone });

    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape', 'shape_to_clone', $params{ shape_to_clone }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape', 'shape_to_clone');
    }
};

subtest 'post_add_new_subshape invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('post_add_new_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_add_new_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_add_new_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_add_new_subshape', 'position', 'int'));
    $params{ position } = $utils->invalidize_param_value('post_add_new_subshape', 'position', $params{ position });
    $utils->initialize('post_add_new_subshape', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_add_new_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape', 'position');
    }
};

#
# post_add_new_subshape_paragraph test
#
subtest 'post_add_new_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $utils->initialize('post_add_new_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        fail("post_add_new_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'post_add_new_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $params{ name } = $utils->invalidize_param_value('post_add_new_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('post_add_new_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_paragraph', 'name');
    }
};

subtest 'post_add_new_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $params{ slide_index } = $utils->invalidize_param_value('post_add_new_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('post_add_new_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_paragraph', 'slide_index');
    }
};

subtest 'post_add_new_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $params{ path } = $utils->invalidize_param_value('post_add_new_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('post_add_new_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_paragraph', 'path');
    }
};

subtest 'post_add_new_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $params{ shape_index } = $utils->invalidize_param_value('post_add_new_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('post_add_new_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_paragraph', 'shape_index');
    }
};

subtest 'post_add_new_subshape_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $params{ dto } = $utils->invalidize_param_value('post_add_new_subshape_paragraph', 'dto', $params{ dto });
    $utils->initialize('post_add_new_subshape_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_paragraph', 'dto');
    }
};

subtest 'post_add_new_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $params{ password } = $utils->invalidize_param_value('post_add_new_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('post_add_new_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_paragraph', 'password');
    }
};

subtest 'post_add_new_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $params{ folder } = $utils->invalidize_param_value('post_add_new_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('post_add_new_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_paragraph', 'folder');
    }
};

subtest 'post_add_new_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $params{ storage } = $utils->invalidize_param_value('post_add_new_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('post_add_new_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_paragraph', 'storage');
    }
};

subtest 'post_add_new_subshape_paragraph invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_add_new_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_paragraph', 'position', 'int'));
    $params{ position } = $utils->invalidize_param_value('post_add_new_subshape_paragraph', 'position', $params{ position });
    $utils->initialize('post_add_new_subshape_paragraph', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_paragraph', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_paragraph', 'position');
    }
};

#
# post_add_new_subshape_portion test
#
subtest 'post_add_new_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $utils->initialize('post_add_new_subshape_portion', '');
    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        fail("post_add_new_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'post_add_new_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ name } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'name', $params{ name });
    $utils->initialize('post_add_new_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'name');
    }
};

subtest 'post_add_new_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ slide_index } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('post_add_new_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'slide_index');
    }
};

subtest 'post_add_new_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ path } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'path', $params{ path });
    $utils->initialize('post_add_new_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'path');
    }
};

subtest 'post_add_new_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ shape_index } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('post_add_new_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'shape_index');
    }
};

subtest 'post_add_new_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ paragraph_index } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('post_add_new_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'paragraph_index');
    }
};

subtest 'post_add_new_subshape_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ dto } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'dto', $params{ dto });
    $utils->initialize('post_add_new_subshape_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'dto');
    }
};

subtest 'post_add_new_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ password } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'password', $params{ password });
    $utils->initialize('post_add_new_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'password');
    }
};

subtest 'post_add_new_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ folder } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('post_add_new_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'folder');
    }
};

subtest 'post_add_new_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ storage } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('post_add_new_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'storage');
    }
};

subtest 'post_add_new_subshape_portion invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_new_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_new_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_add_new_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_add_new_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_add_new_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_add_new_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_add_new_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_new_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_new_subshape_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_add_new_subshape_portion', 'position', 'int'));
    $params{ position } = $utils->invalidize_param_value('post_add_new_subshape_portion', 'position', $params{ position });
    $utils->initialize('post_add_new_subshape_portion', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_add_new_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_new_subshape_portion', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_add_new_subshape_portion', 'position');
    }
};

#
# post_add_notes_slide test
#
subtest 'post_add_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('post_add_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_notes_slide', 'storage', 'string'));
    $utils->initialize('post_add_notes_slide', '');
    eval {
        my $result = $utils->{api}->post_add_notes_slide(%params);
    };
    if ($@) {
        fail("post_add_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'post_add_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('post_add_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_add_notes_slide', 'name', $params{ name });
    $utils->initialize('post_add_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_add_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_notes_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_add_notes_slide', 'name');
    }
};

subtest 'post_add_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('post_add_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_add_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('post_add_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_add_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_add_notes_slide', 'slide_index');
    }
};

subtest 'post_add_notes_slide invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('post_add_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_notes_slide', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('post_add_notes_slide', 'dto', $params{ dto });
    $utils->initialize('post_add_notes_slide', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_add_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_notes_slide', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_add_notes_slide', 'dto');
    }
};

subtest 'post_add_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('post_add_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_add_notes_slide', 'password', $params{ password });
    $utils->initialize('post_add_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_add_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_add_notes_slide', 'password');
    }
};

subtest 'post_add_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('post_add_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_add_notes_slide', 'folder', $params{ folder });
    $utils->initialize('post_add_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_add_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_notes_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_add_notes_slide', 'folder');
    }
};

subtest 'post_add_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_add_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_add_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_add_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('post_add_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('post_add_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('post_add_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_add_notes_slide', 'storage', $params{ storage });
    $utils->initialize('post_add_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_add_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('post_add_notes_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_add_notes_slide', 'storage');
    }
};

#
# post_chart_category test
#
subtest 'post_chart_category' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('post_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('post_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_category', 'storage', 'string'));
    $utils->initialize('post_chart_category', '');
    eval {
        my $result = $utils->{api}->post_chart_category(%params);
    };
    if ($@) {
        fail("post_chart_category raised an exception: $@");
    }
    pass();
};

subtest 'post_chart_category invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('post_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('post_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_category', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_chart_category', 'name', $params{ name });
    $utils->initialize('post_chart_category', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_category', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_chart_category', 'name');
    }
};

subtest 'post_chart_category invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('post_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('post_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_category', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_chart_category', 'slide_index', $params{ slide_index });
    $utils->initialize('post_chart_category', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_category', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_chart_category', 'slide_index');
    }
};

subtest 'post_chart_category invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('post_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('post_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_category', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('post_chart_category', 'shape_index', $params{ shape_index });
    $utils->initialize('post_chart_category', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_category', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_chart_category', 'shape_index');
    }
};

subtest 'post_chart_category invalid category' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('post_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('post_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_category', 'storage', 'string'));
    $params{ category } = $utils->invalidize_param_value('post_chart_category', 'category', $params{ category });
    $utils->initialize('post_chart_category', 'category', $params{ category });

    eval {
        my $result = $utils->{api}->post_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_category', 'category', $params{ category }, $@);
    } else {
        $utils->assert_no_error('post_chart_category', 'category');
    }
};

subtest 'post_chart_category invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('post_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('post_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_category', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_chart_category', 'password', $params{ password });
    $utils->initialize('post_chart_category', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_category', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_chart_category', 'password');
    }
};

subtest 'post_chart_category invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('post_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('post_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_category', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_chart_category', 'folder', $params{ folder });
    $utils->initialize('post_chart_category', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_category', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_chart_category', 'folder');
    }
};

subtest 'post_chart_category invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('post_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('post_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_category', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_chart_category', 'storage', $params{ storage });
    $utils->initialize('post_chart_category', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_category', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_chart_category', 'storage');
    }
};

#
# post_chart_data_point test
#
subtest 'post_chart_data_point' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('post_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('post_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('post_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_data_point', 'storage', 'string'));
    $utils->initialize('post_chart_data_point', '');
    eval {
        my $result = $utils->{api}->post_chart_data_point(%params);
    };
    if ($@) {
        fail("post_chart_data_point raised an exception: $@");
    }
    pass();
};

subtest 'post_chart_data_point invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('post_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('post_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('post_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_data_point', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_chart_data_point', 'name', $params{ name });
    $utils->initialize('post_chart_data_point', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_data_point', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_chart_data_point', 'name');
    }
};

subtest 'post_chart_data_point invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('post_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('post_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('post_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_data_point', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_chart_data_point', 'slide_index', $params{ slide_index });
    $utils->initialize('post_chart_data_point', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_data_point', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_chart_data_point', 'slide_index');
    }
};

subtest 'post_chart_data_point invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('post_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('post_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('post_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_data_point', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('post_chart_data_point', 'shape_index', $params{ shape_index });
    $utils->initialize('post_chart_data_point', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_data_point', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_chart_data_point', 'shape_index');
    }
};

subtest 'post_chart_data_point invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('post_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('post_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('post_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_data_point', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('post_chart_data_point', 'series_index', $params{ series_index });
    $utils->initialize('post_chart_data_point', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->post_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_data_point', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('post_chart_data_point', 'series_index');
    }
};

subtest 'post_chart_data_point invalid data_point' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('post_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('post_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('post_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_data_point', 'storage', 'string'));
    $params{ data_point } = $utils->invalidize_param_value('post_chart_data_point', 'data_point', $params{ data_point });
    $utils->initialize('post_chart_data_point', 'data_point', $params{ data_point });

    eval {
        my $result = $utils->{api}->post_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_data_point', 'data_point', $params{ data_point }, $@);
    } else {
        $utils->assert_no_error('post_chart_data_point', 'data_point');
    }
};

subtest 'post_chart_data_point invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('post_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('post_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('post_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_data_point', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_chart_data_point', 'password', $params{ password });
    $utils->initialize('post_chart_data_point', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_data_point', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_chart_data_point', 'password');
    }
};

subtest 'post_chart_data_point invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('post_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('post_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('post_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_data_point', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_chart_data_point', 'folder', $params{ folder });
    $utils->initialize('post_chart_data_point', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_data_point', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_chart_data_point', 'folder');
    }
};

subtest 'post_chart_data_point invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('post_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('post_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('post_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_data_point', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_chart_data_point', 'storage', $params{ storage });
    $utils->initialize('post_chart_data_point', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_data_point', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_chart_data_point', 'storage');
    }
};

#
# post_chart_series test
#
subtest 'post_chart_series' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('post_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('post_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_series', 'storage', 'string'));
    $utils->initialize('post_chart_series', '');
    eval {
        my $result = $utils->{api}->post_chart_series(%params);
    };
    if ($@) {
        fail("post_chart_series raised an exception: $@");
    }
    pass();
};

subtest 'post_chart_series invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('post_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('post_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_series', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_chart_series', 'name', $params{ name });
    $utils->initialize('post_chart_series', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_series', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_chart_series', 'name');
    }
};

subtest 'post_chart_series invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('post_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('post_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_series', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_chart_series', 'slide_index', $params{ slide_index });
    $utils->initialize('post_chart_series', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_series', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_chart_series', 'slide_index');
    }
};

subtest 'post_chart_series invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('post_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('post_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_series', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('post_chart_series', 'shape_index', $params{ shape_index });
    $utils->initialize('post_chart_series', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_series', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_chart_series', 'shape_index');
    }
};

subtest 'post_chart_series invalid series' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('post_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('post_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_series', 'storage', 'string'));
    $params{ series } = $utils->invalidize_param_value('post_chart_series', 'series', $params{ series });
    $utils->initialize('post_chart_series', 'series', $params{ series });

    eval {
        my $result = $utils->{api}->post_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_series', 'series', $params{ series }, $@);
    } else {
        $utils->assert_no_error('post_chart_series', 'series');
    }
};

subtest 'post_chart_series invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('post_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('post_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_series', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_chart_series', 'password', $params{ password });
    $utils->initialize('post_chart_series', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_series', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_chart_series', 'password');
    }
};

subtest 'post_chart_series invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('post_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('post_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_series', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_chart_series', 'folder', $params{ folder });
    $utils->initialize('post_chart_series', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_series', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_chart_series', 'folder');
    }
};

subtest 'post_chart_series invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('post_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('post_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('post_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('post_chart_series', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_chart_series', 'storage', $params{ storage });
    $utils->initialize('post_chart_series', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('post_chart_series', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_chart_series', 'storage');
    }
};

#
# post_copy_layout_slide_from_source_presentation test
#
subtest 'post_copy_layout_slide_from_source_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'storage', 'string'));
    $utils->initialize('post_copy_layout_slide_from_source_presentation', '');
    eval {
        my $result = $utils->{api}->post_copy_layout_slide_from_source_presentation(%params);
    };
    if ($@) {
        fail("post_copy_layout_slide_from_source_presentation raised an exception: $@");
    }
    pass();
};

subtest 'post_copy_layout_slide_from_source_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_copy_layout_slide_from_source_presentation', 'name', $params{ name });
    $utils->initialize('post_copy_layout_slide_from_source_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_copy_layout_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_layout_slide_from_source_presentation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_copy_layout_slide_from_source_presentation', 'name');
    }
};

subtest 'post_copy_layout_slide_from_source_presentation invalid clone_from' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'storage', 'string'));
    $params{ clone_from } = $utils->invalidize_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', $params{ clone_from });
    $utils->initialize('post_copy_layout_slide_from_source_presentation', 'clone_from', $params{ clone_from });

    eval {
        my $result = $utils->{api}->post_copy_layout_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_layout_slide_from_source_presentation', 'clone_from', $params{ clone_from }, $@);
    } else {
        $utils->assert_no_error('post_copy_layout_slide_from_source_presentation', 'clone_from');
    }
};

subtest 'post_copy_layout_slide_from_source_presentation invalid clone_from_position' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'storage', 'string'));
    $params{ clone_from_position } = $utils->invalidize_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', $params{ clone_from_position });
    $utils->initialize('post_copy_layout_slide_from_source_presentation', 'clone_from_position', $params{ clone_from_position });

    eval {
        my $result = $utils->{api}->post_copy_layout_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_layout_slide_from_source_presentation', 'clone_from_position', $params{ clone_from_position }, $@);
    } else {
        $utils->assert_no_error('post_copy_layout_slide_from_source_presentation', 'clone_from_position');
    }
};

subtest 'post_copy_layout_slide_from_source_presentation invalid clone_from_password' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'storage', 'string'));
    $params{ clone_from_password } = $utils->invalidize_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', $params{ clone_from_password });
    $utils->initialize('post_copy_layout_slide_from_source_presentation', 'clone_from_password', $params{ clone_from_password });

    eval {
        my $result = $utils->{api}->post_copy_layout_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_layout_slide_from_source_presentation', 'clone_from_password', $params{ clone_from_password }, $@);
    } else {
        $utils->assert_no_error('post_copy_layout_slide_from_source_presentation', 'clone_from_password');
    }
};

subtest 'post_copy_layout_slide_from_source_presentation invalid clone_from_storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'storage', 'string'));
    $params{ clone_from_storage } = $utils->invalidize_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', $params{ clone_from_storage });
    $utils->initialize('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', $params{ clone_from_storage });

    eval {
        my $result = $utils->{api}->post_copy_layout_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', $params{ clone_from_storage }, $@);
    } else {
        $utils->assert_no_error('post_copy_layout_slide_from_source_presentation', 'clone_from_storage');
    }
};

subtest 'post_copy_layout_slide_from_source_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_copy_layout_slide_from_source_presentation', 'password', $params{ password });
    $utils->initialize('post_copy_layout_slide_from_source_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_copy_layout_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_layout_slide_from_source_presentation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_copy_layout_slide_from_source_presentation', 'password');
    }
};

subtest 'post_copy_layout_slide_from_source_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_copy_layout_slide_from_source_presentation', 'folder', $params{ folder });
    $utils->initialize('post_copy_layout_slide_from_source_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_copy_layout_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_layout_slide_from_source_presentation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_copy_layout_slide_from_source_presentation', 'folder');
    }
};

subtest 'post_copy_layout_slide_from_source_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_layout_slide_from_source_presentation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_copy_layout_slide_from_source_presentation', 'storage', $params{ storage });
    $utils->initialize('post_copy_layout_slide_from_source_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_copy_layout_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_layout_slide_from_source_presentation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_copy_layout_slide_from_source_presentation', 'storage');
    }
};

#
# post_copy_master_slide_from_source_presentation test
#
subtest 'post_copy_master_slide_from_source_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $utils->initialize('post_copy_master_slide_from_source_presentation', '');
    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        fail("post_copy_master_slide_from_source_presentation raised an exception: $@");
    }
    pass();
};

subtest 'post_copy_master_slide_from_source_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_copy_master_slide_from_source_presentation', 'name', $params{ name });
    $utils->initialize('post_copy_master_slide_from_source_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_master_slide_from_source_presentation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_copy_master_slide_from_source_presentation', 'name');
    }
};

subtest 'post_copy_master_slide_from_source_presentation invalid clone_from' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $params{ clone_from } = $utils->invalidize_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', $params{ clone_from });
    $utils->initialize('post_copy_master_slide_from_source_presentation', 'clone_from', $params{ clone_from });

    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_master_slide_from_source_presentation', 'clone_from', $params{ clone_from }, $@);
    } else {
        $utils->assert_no_error('post_copy_master_slide_from_source_presentation', 'clone_from');
    }
};

subtest 'post_copy_master_slide_from_source_presentation invalid clone_from_position' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $params{ clone_from_position } = $utils->invalidize_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', $params{ clone_from_position });
    $utils->initialize('post_copy_master_slide_from_source_presentation', 'clone_from_position', $params{ clone_from_position });

    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_master_slide_from_source_presentation', 'clone_from_position', $params{ clone_from_position }, $@);
    } else {
        $utils->assert_no_error('post_copy_master_slide_from_source_presentation', 'clone_from_position');
    }
};

subtest 'post_copy_master_slide_from_source_presentation invalid clone_from_password' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $params{ clone_from_password } = $utils->invalidize_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', $params{ clone_from_password });
    $utils->initialize('post_copy_master_slide_from_source_presentation', 'clone_from_password', $params{ clone_from_password });

    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_master_slide_from_source_presentation', 'clone_from_password', $params{ clone_from_password }, $@);
    } else {
        $utils->assert_no_error('post_copy_master_slide_from_source_presentation', 'clone_from_password');
    }
};

subtest 'post_copy_master_slide_from_source_presentation invalid clone_from_storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $params{ clone_from_storage } = $utils->invalidize_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', $params{ clone_from_storage });
    $utils->initialize('post_copy_master_slide_from_source_presentation', 'clone_from_storage', $params{ clone_from_storage });

    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_master_slide_from_source_presentation', 'clone_from_storage', $params{ clone_from_storage }, $@);
    } else {
        $utils->assert_no_error('post_copy_master_slide_from_source_presentation', 'clone_from_storage');
    }
};

subtest 'post_copy_master_slide_from_source_presentation invalid apply_to_all' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $params{ apply_to_all } = $utils->invalidize_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', $params{ apply_to_all });
    $utils->initialize('post_copy_master_slide_from_source_presentation', 'apply_to_all', $params{ apply_to_all });

    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_master_slide_from_source_presentation', 'apply_to_all', $params{ apply_to_all }, $@);
    } else {
        $utils->assert_no_error('post_copy_master_slide_from_source_presentation', 'apply_to_all');
    }
};

subtest 'post_copy_master_slide_from_source_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_copy_master_slide_from_source_presentation', 'password', $params{ password });
    $utils->initialize('post_copy_master_slide_from_source_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_master_slide_from_source_presentation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_copy_master_slide_from_source_presentation', 'password');
    }
};

subtest 'post_copy_master_slide_from_source_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_copy_master_slide_from_source_presentation', 'folder', $params{ folder });
    $utils->initialize('post_copy_master_slide_from_source_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_master_slide_from_source_presentation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_copy_master_slide_from_source_presentation', 'folder');
    }
};

subtest 'post_copy_master_slide_from_source_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'name', 'string'), 'clone_from' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('post_copy_master_slide_from_source_presentation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_copy_master_slide_from_source_presentation', 'storage', $params{ storage });
    $utils->initialize('post_copy_master_slide_from_source_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_copy_master_slide_from_source_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('post_copy_master_slide_from_source_presentation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_copy_master_slide_from_source_presentation', 'storage');
    }
};

#
# post_get_notes_slide test
#
subtest 'post_get_notes_slide' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide', 'password', 'string'));
    $utils->initialize('post_get_notes_slide', '');
    eval {
        my $result = $utils->{api}->post_get_notes_slide(%params);
    };
    if ($@) {
        fail("post_get_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'post_get_notes_slide invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('post_get_notes_slide', 'document', $params{ document });
    $utils->initialize('post_get_notes_slide', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->post_get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide', 'document');
    }
};

subtest 'post_get_notes_slide invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_get_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('post_get_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide', 'slide_index');
    }
};

subtest 'post_get_notes_slide invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_get_notes_slide', 'password', $params{ password });
    $utils->initialize('post_get_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide', 'password');
    }
};

#
# post_get_notes_slide_exists test
#
subtest 'post_get_notes_slide_exists' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_exists', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_exists', 'password', 'string'));
    $utils->initialize('post_get_notes_slide_exists', '');
    eval {
        my $result = $utils->{api}->post_get_notes_slide_exists(%params);
    };
    if ($@) {
        fail("post_get_notes_slide_exists raised an exception: $@");
    }
    pass();
};

subtest 'post_get_notes_slide_exists invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_exists', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_exists', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('post_get_notes_slide_exists', 'document', $params{ document });
    $utils->initialize('post_get_notes_slide_exists', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_exists', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_exists', 'document');
    }
};

subtest 'post_get_notes_slide_exists invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_exists', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_exists', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_get_notes_slide_exists', 'slide_index', $params{ slide_index });
    $utils->initialize('post_get_notes_slide_exists', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_exists', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_exists', 'slide_index');
    }
};

subtest 'post_get_notes_slide_exists invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_exists', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_exists', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_get_notes_slide_exists', 'password', $params{ password });
    $utils->initialize('post_get_notes_slide_exists', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_exists', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_exists', 'password');
    }
};

#
# post_get_notes_slide_with_format test
#
subtest 'post_get_notes_slide_with_format' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_with_format', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('post_get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('post_get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_with_format', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_get_notes_slide_with_format', 'fonts_folder', 'string'));
    $utils->initialize('post_get_notes_slide_with_format', '');
    eval {
        my $result = $utils->{api}->post_get_notes_slide_with_format(%params);
    };
    if ($@) {
        fail("post_get_notes_slide_with_format raised an exception: $@");
    }
    pass();
};

subtest 'post_get_notes_slide_with_format invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_with_format', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('post_get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('post_get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_with_format', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ document } = $utils->invalidize_param_value('post_get_notes_slide_with_format', 'document', $params{ document });
    $utils->initialize('post_get_notes_slide_with_format', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_with_format', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_with_format', 'document');
    }
};

subtest 'post_get_notes_slide_with_format invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_with_format', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('post_get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('post_get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_with_format', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_get_notes_slide_with_format', 'slide_index', $params{ slide_index });
    $utils->initialize('post_get_notes_slide_with_format', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_with_format', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_with_format', 'slide_index');
    }
};

subtest 'post_get_notes_slide_with_format invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_with_format', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('post_get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('post_get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_with_format', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('post_get_notes_slide_with_format', 'format', $params{ format });
    $utils->initialize('post_get_notes_slide_with_format', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_with_format', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_with_format', 'format');
    }
};

subtest 'post_get_notes_slide_with_format invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_with_format', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('post_get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('post_get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_with_format', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('post_get_notes_slide_with_format', 'width', $params{ width });
    $utils->initialize('post_get_notes_slide_with_format', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_with_format', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_with_format', 'width');
    }
};

subtest 'post_get_notes_slide_with_format invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_with_format', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('post_get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('post_get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_with_format', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('post_get_notes_slide_with_format', 'height', $params{ height });
    $utils->initialize('post_get_notes_slide_with_format', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_with_format', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_with_format', 'height');
    }
};

subtest 'post_get_notes_slide_with_format invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_with_format', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('post_get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('post_get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_with_format', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_get_notes_slide_with_format', 'password', $params{ password });
    $utils->initialize('post_get_notes_slide_with_format', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_with_format', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_with_format', 'password');
    }
};

subtest 'post_get_notes_slide_with_format invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('post_get_notes_slide_with_format', 'document', 'File'), 'slide_index' => $utils->get_param_value('post_get_notes_slide_with_format', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_get_notes_slide_with_format', 'format', 'string'), 'width' => $utils->get_param_value('post_get_notes_slide_with_format', 'width', 'int'), 'height' => $utils->get_param_value('post_get_notes_slide_with_format', 'height', 'int'), 'password' => $utils->get_param_value('post_get_notes_slide_with_format', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_get_notes_slide_with_format', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('post_get_notes_slide_with_format', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('post_get_notes_slide_with_format', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->post_get_notes_slide_with_format(%params);
    };
    if ($@) {
        $utils->assert_error('post_get_notes_slide_with_format', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('post_get_notes_slide_with_format', 'fonts_folder');
    }
};

#
# post_notes_slide_add_new_paragraph test
#
subtest 'post_notes_slide_add_new_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'position', 'int'));
    $utils->initialize('post_notes_slide_add_new_paragraph', '');
    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_paragraph(%params);
    };
    if ($@) {
        fail("post_notes_slide_add_new_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'post_notes_slide_add_new_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'position', 'int'));
    $params{ name } = $utils->invalidize_param_value('post_notes_slide_add_new_paragraph', 'name', $params{ name });
    $utils->initialize('post_notes_slide_add_new_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_paragraph', 'name');
    }
};

subtest 'post_notes_slide_add_new_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'position', 'int'));
    $params{ slide_index } = $utils->invalidize_param_value('post_notes_slide_add_new_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('post_notes_slide_add_new_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_paragraph', 'slide_index');
    }
};

subtest 'post_notes_slide_add_new_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'position', 'int'));
    $params{ shape_index } = $utils->invalidize_param_value('post_notes_slide_add_new_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('post_notes_slide_add_new_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_paragraph', 'shape_index');
    }
};

subtest 'post_notes_slide_add_new_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'position', 'int'));
    $params{ dto } = $utils->invalidize_param_value('post_notes_slide_add_new_paragraph', 'dto', $params{ dto });
    $utils->initialize('post_notes_slide_add_new_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_paragraph', 'dto');
    }
};

subtest 'post_notes_slide_add_new_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'position', 'int'));
    $params{ password } = $utils->invalidize_param_value('post_notes_slide_add_new_paragraph', 'password', $params{ password });
    $utils->initialize('post_notes_slide_add_new_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_paragraph', 'password');
    }
};

subtest 'post_notes_slide_add_new_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'position', 'int'));
    $params{ folder } = $utils->invalidize_param_value('post_notes_slide_add_new_paragraph', 'folder', $params{ folder });
    $utils->initialize('post_notes_slide_add_new_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_paragraph', 'folder');
    }
};

subtest 'post_notes_slide_add_new_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'position', 'int'));
    $params{ storage } = $utils->invalidize_param_value('post_notes_slide_add_new_paragraph', 'storage', $params{ storage });
    $utils->initialize('post_notes_slide_add_new_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_paragraph', 'storage');
    }
};

subtest 'post_notes_slide_add_new_paragraph invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_paragraph', 'position', 'int'));
    $params{ position } = $utils->invalidize_param_value('post_notes_slide_add_new_paragraph', 'position', $params{ position });
    $utils->initialize('post_notes_slide_add_new_paragraph', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_paragraph', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_paragraph', 'position');
    }
};

#
# post_notes_slide_add_new_portion test
#
subtest 'post_notes_slide_add_new_portion' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $utils->initialize('post_notes_slide_add_new_portion', '');
    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        fail("post_notes_slide_add_new_portion raised an exception: $@");
    }
    pass();
};

subtest 'post_notes_slide_add_new_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $params{ name } = $utils->invalidize_param_value('post_notes_slide_add_new_portion', 'name', $params{ name });
    $utils->initialize('post_notes_slide_add_new_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_portion', 'name');
    }
};

subtest 'post_notes_slide_add_new_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $params{ slide_index } = $utils->invalidize_param_value('post_notes_slide_add_new_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('post_notes_slide_add_new_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_portion', 'slide_index');
    }
};

subtest 'post_notes_slide_add_new_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $params{ shape_index } = $utils->invalidize_param_value('post_notes_slide_add_new_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('post_notes_slide_add_new_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_portion', 'shape_index');
    }
};

subtest 'post_notes_slide_add_new_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $params{ paragraph_index } = $utils->invalidize_param_value('post_notes_slide_add_new_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('post_notes_slide_add_new_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_portion', 'paragraph_index');
    }
};

subtest 'post_notes_slide_add_new_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $params{ dto } = $utils->invalidize_param_value('post_notes_slide_add_new_portion', 'dto', $params{ dto });
    $utils->initialize('post_notes_slide_add_new_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_portion', 'dto');
    }
};

subtest 'post_notes_slide_add_new_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $params{ password } = $utils->invalidize_param_value('post_notes_slide_add_new_portion', 'password', $params{ password });
    $utils->initialize('post_notes_slide_add_new_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_portion', 'password');
    }
};

subtest 'post_notes_slide_add_new_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $params{ folder } = $utils->invalidize_param_value('post_notes_slide_add_new_portion', 'folder', $params{ folder });
    $utils->initialize('post_notes_slide_add_new_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_portion', 'folder');
    }
};

subtest 'post_notes_slide_add_new_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $params{ storage } = $utils->invalidize_param_value('post_notes_slide_add_new_portion', 'storage', $params{ storage });
    $utils->initialize('post_notes_slide_add_new_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_portion', 'storage');
    }
};

subtest 'post_notes_slide_add_new_portion invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('post_notes_slide_add_new_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('post_notes_slide_add_new_portion', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_portion', 'storage', 'string'), 'position' => $utils->get_param_value('post_notes_slide_add_new_portion', 'position', 'int'));
    $params{ position } = $utils->invalidize_param_value('post_notes_slide_add_new_portion', 'position', $params{ position });
    $utils->initialize('post_notes_slide_add_new_portion', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_portion(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_portion', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_portion', 'position');
    }
};

#
# post_notes_slide_add_new_shape test
#
subtest 'post_notes_slide_add_new_shape' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_notes_slide_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_notes_slide_add_new_shape', 'position', 'int'));
    $utils->initialize('post_notes_slide_add_new_shape', '');
    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_shape(%params);
    };
    if ($@) {
        fail("post_notes_slide_add_new_shape raised an exception: $@");
    }
    pass();
};

subtest 'post_notes_slide_add_new_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_notes_slide_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_notes_slide_add_new_shape', 'position', 'int'));
    $params{ name } = $utils->invalidize_param_value('post_notes_slide_add_new_shape', 'name', $params{ name });
    $utils->initialize('post_notes_slide_add_new_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_shape', 'name');
    }
};

subtest 'post_notes_slide_add_new_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_notes_slide_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_notes_slide_add_new_shape', 'position', 'int'));
    $params{ slide_index } = $utils->invalidize_param_value('post_notes_slide_add_new_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('post_notes_slide_add_new_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_shape', 'slide_index');
    }
};

subtest 'post_notes_slide_add_new_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_notes_slide_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_notes_slide_add_new_shape', 'position', 'int'));
    $params{ dto } = $utils->invalidize_param_value('post_notes_slide_add_new_shape', 'dto', $params{ dto });
    $utils->initialize('post_notes_slide_add_new_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_shape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_shape', 'dto');
    }
};

subtest 'post_notes_slide_add_new_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_notes_slide_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_notes_slide_add_new_shape', 'position', 'int'));
    $params{ password } = $utils->invalidize_param_value('post_notes_slide_add_new_shape', 'password', $params{ password });
    $utils->initialize('post_notes_slide_add_new_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_shape', 'password');
    }
};

subtest 'post_notes_slide_add_new_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_notes_slide_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_notes_slide_add_new_shape', 'position', 'int'));
    $params{ folder } = $utils->invalidize_param_value('post_notes_slide_add_new_shape', 'folder', $params{ folder });
    $utils->initialize('post_notes_slide_add_new_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_shape', 'folder');
    }
};

subtest 'post_notes_slide_add_new_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_notes_slide_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_notes_slide_add_new_shape', 'position', 'int'));
    $params{ storage } = $utils->invalidize_param_value('post_notes_slide_add_new_shape', 'storage', $params{ storage });
    $utils->initialize('post_notes_slide_add_new_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_shape', 'storage');
    }
};

subtest 'post_notes_slide_add_new_shape invalid shape_to_clone' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_notes_slide_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_notes_slide_add_new_shape', 'position', 'int'));
    $params{ shape_to_clone } = $utils->invalidize_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', $params{ shape_to_clone });
    $utils->initialize('post_notes_slide_add_new_shape', 'shape_to_clone', $params{ shape_to_clone });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_shape', 'shape_to_clone', $params{ shape_to_clone }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_shape', 'shape_to_clone');
    }
};

subtest 'post_notes_slide_add_new_shape invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_add_new_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_add_new_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('post_notes_slide_add_new_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('post_notes_slide_add_new_shape', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_add_new_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_add_new_shape', 'storage', 'string'), 'shape_to_clone' => $utils->get_param_value('post_notes_slide_add_new_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('post_notes_slide_add_new_shape', 'position', 'int'));
    $params{ position } = $utils->invalidize_param_value('post_notes_slide_add_new_shape', 'position', $params{ position });
    $utils->initialize('post_notes_slide_add_new_shape', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_notes_slide_add_new_shape(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_add_new_shape', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_add_new_shape', 'position');
    }
};

#
# post_notes_slide_shape_save_as test
#
subtest 'post_notes_slide_shape_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $utils->initialize('post_notes_slide_shape_save_as', '');
    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        fail("post_notes_slide_shape_save_as raised an exception: $@");
    }
    pass();
};

subtest 'post_notes_slide_shape_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'name', $params{ name });
    $utils->initialize('post_notes_slide_shape_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'name');
    }
};

subtest 'post_notes_slide_shape_save_as invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'slide_index', $params{ slide_index });
    $utils->initialize('post_notes_slide_shape_save_as', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'slide_index');
    }
};

subtest 'post_notes_slide_shape_save_as invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'shape_index', $params{ shape_index });
    $utils->initialize('post_notes_slide_shape_save_as', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'shape_index');
    }
};

subtest 'post_notes_slide_shape_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'format', $params{ format });
    $utils->initialize('post_notes_slide_shape_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'format');
    }
};

subtest 'post_notes_slide_shape_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'options', $params{ options });
    $utils->initialize('post_notes_slide_shape_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'options');
    }
};

subtest 'post_notes_slide_shape_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'password', $params{ password });
    $utils->initialize('post_notes_slide_shape_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'password');
    }
};

subtest 'post_notes_slide_shape_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'folder', $params{ folder });
    $utils->initialize('post_notes_slide_shape_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'folder');
    }
};

subtest 'post_notes_slide_shape_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'storage', $params{ storage });
    $utils->initialize('post_notes_slide_shape_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'storage');
    }
};

subtest 'post_notes_slide_shape_save_as invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'scale_x', $params{ scale_x });
    $utils->initialize('post_notes_slide_shape_save_as', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'scale_x');
    }
};

subtest 'post_notes_slide_shape_save_as invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'scale_y', $params{ scale_y });
    $utils->initialize('post_notes_slide_shape_save_as', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'scale_y');
    }
};

subtest 'post_notes_slide_shape_save_as invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'bounds', $params{ bounds });
    $utils->initialize('post_notes_slide_shape_save_as', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'bounds');
    }
};

subtest 'post_notes_slide_shape_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_notes_slide_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('post_notes_slide_shape_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('post_notes_slide_shape_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->post_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_notes_slide_shape_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('post_notes_slide_shape_save_as', 'fonts_folder');
    }
};

#
# post_presentation_merge test
#
subtest 'post_presentation_merge' => sub {
    my %params = ('name' => $utils->get_param_value('post_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('post_presentation_merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('post_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('post_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('post_presentation_merge', 'folder', 'string'));
    $utils->initialize('post_presentation_merge', '');
    eval {
        my $result = $utils->{api}->post_presentation_merge(%params);
    };
    if ($@) {
        fail("post_presentation_merge raised an exception: $@");
    }
    pass();
};

subtest 'post_presentation_merge invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('post_presentation_merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('post_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('post_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('post_presentation_merge', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_presentation_merge', 'name', $params{ name });
    $utils->initialize('post_presentation_merge', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('post_presentation_merge', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_presentation_merge', 'name');
    }
};

subtest 'post_presentation_merge invalid request' => sub {
    my %params = ('name' => $utils->get_param_value('post_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('post_presentation_merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('post_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('post_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('post_presentation_merge', 'folder', 'string'));
    $params{ request } = $utils->invalidize_param_value('post_presentation_merge', 'request', $params{ request });
    $utils->initialize('post_presentation_merge', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->post_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('post_presentation_merge', 'request', $params{ request }, $@);
    } else {
        $utils->assert_no_error('post_presentation_merge', 'request');
    }
};

subtest 'post_presentation_merge invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('post_presentation_merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('post_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('post_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('post_presentation_merge', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_presentation_merge', 'password', $params{ password });
    $utils->initialize('post_presentation_merge', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('post_presentation_merge', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_presentation_merge', 'password');
    }
};

subtest 'post_presentation_merge invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('post_presentation_merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('post_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('post_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('post_presentation_merge', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_presentation_merge', 'storage', $params{ storage });
    $utils->initialize('post_presentation_merge', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('post_presentation_merge', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_presentation_merge', 'storage');
    }
};

subtest 'post_presentation_merge invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('post_presentation_merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('post_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('post_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('post_presentation_merge', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_presentation_merge', 'folder', $params{ folder });
    $utils->initialize('post_presentation_merge', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('post_presentation_merge', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_presentation_merge', 'folder');
    }
};

#
# post_section test
#
subtest 'post_section' => sub {
    my %params = ('name' => $utils->get_param_value('post_section', 'name', 'string'), 'section_name' => $utils->get_param_value('post_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('post_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_section', 'password', 'string'), 'folder' => $utils->get_param_value('post_section', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section', 'storage', 'string'));
    $utils->initialize('post_section', '');
    eval {
        my $result = $utils->{api}->post_section(%params);
    };
    if ($@) {
        fail("post_section raised an exception: $@");
    }
    pass();
};

subtest 'post_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_section', 'name', 'string'), 'section_name' => $utils->get_param_value('post_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('post_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_section', 'password', 'string'), 'folder' => $utils->get_param_value('post_section', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_section', 'name', $params{ name });
    $utils->initialize('post_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_section(%params);
    };
    if ($@) {
        $utils->assert_error('post_section', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_section', 'name');
    }
};

subtest 'post_section invalid section_name' => sub {
    my %params = ('name' => $utils->get_param_value('post_section', 'name', 'string'), 'section_name' => $utils->get_param_value('post_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('post_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_section', 'password', 'string'), 'folder' => $utils->get_param_value('post_section', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section', 'storage', 'string'));
    $params{ section_name } = $utils->invalidize_param_value('post_section', 'section_name', $params{ section_name });
    $utils->initialize('post_section', 'section_name', $params{ section_name });

    eval {
        my $result = $utils->{api}->post_section(%params);
    };
    if ($@) {
        $utils->assert_error('post_section', 'section_name', $params{ section_name }, $@);
    } else {
        $utils->assert_no_error('post_section', 'section_name');
    }
};

subtest 'post_section invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_section', 'name', 'string'), 'section_name' => $utils->get_param_value('post_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('post_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_section', 'password', 'string'), 'folder' => $utils->get_param_value('post_section', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_section', 'slide_index', $params{ slide_index });
    $utils->initialize('post_section', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_section(%params);
    };
    if ($@) {
        $utils->assert_error('post_section', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_section', 'slide_index');
    }
};

subtest 'post_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_section', 'name', 'string'), 'section_name' => $utils->get_param_value('post_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('post_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_section', 'password', 'string'), 'folder' => $utils->get_param_value('post_section', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_section', 'password', $params{ password });
    $utils->initialize('post_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_section(%params);
    };
    if ($@) {
        $utils->assert_error('post_section', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_section', 'password');
    }
};

subtest 'post_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_section', 'name', 'string'), 'section_name' => $utils->get_param_value('post_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('post_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_section', 'password', 'string'), 'folder' => $utils->get_param_value('post_section', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_section', 'folder', $params{ folder });
    $utils->initialize('post_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_section(%params);
    };
    if ($@) {
        $utils->assert_error('post_section', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_section', 'folder');
    }
};

subtest 'post_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_section', 'name', 'string'), 'section_name' => $utils->get_param_value('post_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('post_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('post_section', 'password', 'string'), 'folder' => $utils->get_param_value('post_section', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_section', 'storage', $params{ storage });
    $utils->initialize('post_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_section(%params);
    };
    if ($@) {
        $utils->assert_error('post_section', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_section', 'storage');
    }
};

#
# post_section_move test
#
subtest 'post_section_move' => sub {
    my %params = ('name' => $utils->get_param_value('post_section_move', 'name', 'string'), 'section_index' => $utils->get_param_value('post_section_move', 'section_index', 'int'), 'new_position' => $utils->get_param_value('post_section_move', 'new_position', 'int'), 'password' => $utils->get_param_value('post_section_move', 'password', 'string'), 'folder' => $utils->get_param_value('post_section_move', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section_move', 'storage', 'string'));
    $utils->initialize('post_section_move', '');
    eval {
        my $result = $utils->{api}->post_section_move(%params);
    };
    if ($@) {
        fail("post_section_move raised an exception: $@");
    }
    pass();
};

subtest 'post_section_move invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_section_move', 'name', 'string'), 'section_index' => $utils->get_param_value('post_section_move', 'section_index', 'int'), 'new_position' => $utils->get_param_value('post_section_move', 'new_position', 'int'), 'password' => $utils->get_param_value('post_section_move', 'password', 'string'), 'folder' => $utils->get_param_value('post_section_move', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section_move', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_section_move', 'name', $params{ name });
    $utils->initialize('post_section_move', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_section_move(%params);
    };
    if ($@) {
        $utils->assert_error('post_section_move', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_section_move', 'name');
    }
};

subtest 'post_section_move invalid section_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_section_move', 'name', 'string'), 'section_index' => $utils->get_param_value('post_section_move', 'section_index', 'int'), 'new_position' => $utils->get_param_value('post_section_move', 'new_position', 'int'), 'password' => $utils->get_param_value('post_section_move', 'password', 'string'), 'folder' => $utils->get_param_value('post_section_move', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section_move', 'storage', 'string'));
    $params{ section_index } = $utils->invalidize_param_value('post_section_move', 'section_index', $params{ section_index });
    $utils->initialize('post_section_move', 'section_index', $params{ section_index });

    eval {
        my $result = $utils->{api}->post_section_move(%params);
    };
    if ($@) {
        $utils->assert_error('post_section_move', 'section_index', $params{ section_index }, $@);
    } else {
        $utils->assert_no_error('post_section_move', 'section_index');
    }
};

subtest 'post_section_move invalid new_position' => sub {
    my %params = ('name' => $utils->get_param_value('post_section_move', 'name', 'string'), 'section_index' => $utils->get_param_value('post_section_move', 'section_index', 'int'), 'new_position' => $utils->get_param_value('post_section_move', 'new_position', 'int'), 'password' => $utils->get_param_value('post_section_move', 'password', 'string'), 'folder' => $utils->get_param_value('post_section_move', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section_move', 'storage', 'string'));
    $params{ new_position } = $utils->invalidize_param_value('post_section_move', 'new_position', $params{ new_position });
    $utils->initialize('post_section_move', 'new_position', $params{ new_position });

    eval {
        my $result = $utils->{api}->post_section_move(%params);
    };
    if ($@) {
        $utils->assert_error('post_section_move', 'new_position', $params{ new_position }, $@);
    } else {
        $utils->assert_no_error('post_section_move', 'new_position');
    }
};

subtest 'post_section_move invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_section_move', 'name', 'string'), 'section_index' => $utils->get_param_value('post_section_move', 'section_index', 'int'), 'new_position' => $utils->get_param_value('post_section_move', 'new_position', 'int'), 'password' => $utils->get_param_value('post_section_move', 'password', 'string'), 'folder' => $utils->get_param_value('post_section_move', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section_move', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_section_move', 'password', $params{ password });
    $utils->initialize('post_section_move', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_section_move(%params);
    };
    if ($@) {
        $utils->assert_error('post_section_move', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_section_move', 'password');
    }
};

subtest 'post_section_move invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_section_move', 'name', 'string'), 'section_index' => $utils->get_param_value('post_section_move', 'section_index', 'int'), 'new_position' => $utils->get_param_value('post_section_move', 'new_position', 'int'), 'password' => $utils->get_param_value('post_section_move', 'password', 'string'), 'folder' => $utils->get_param_value('post_section_move', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section_move', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_section_move', 'folder', $params{ folder });
    $utils->initialize('post_section_move', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_section_move(%params);
    };
    if ($@) {
        $utils->assert_error('post_section_move', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_section_move', 'folder');
    }
};

subtest 'post_section_move invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_section_move', 'name', 'string'), 'section_index' => $utils->get_param_value('post_section_move', 'section_index', 'int'), 'new_position' => $utils->get_param_value('post_section_move', 'new_position', 'int'), 'password' => $utils->get_param_value('post_section_move', 'password', 'string'), 'folder' => $utils->get_param_value('post_section_move', 'folder', 'string'), 'storage' => $utils->get_param_value('post_section_move', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_section_move', 'storage', $params{ storage });
    $utils->initialize('post_section_move', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_section_move(%params);
    };
    if ($@) {
        $utils->assert_error('post_section_move', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_section_move', 'storage');
    }
};

#
# post_shape_save_as test
#
subtest 'post_shape_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $utils->initialize('post_shape_save_as', '');
    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        fail("post_shape_save_as raised an exception: $@");
    }
    pass();
};

subtest 'post_shape_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_shape_save_as', 'name', $params{ name });
    $utils->initialize('post_shape_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'name');
    }
};

subtest 'post_shape_save_as invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_shape_save_as', 'slide_index', $params{ slide_index });
    $utils->initialize('post_shape_save_as', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'slide_index');
    }
};

subtest 'post_shape_save_as invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('post_shape_save_as', 'shape_index', $params{ shape_index });
    $utils->initialize('post_shape_save_as', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'shape_index');
    }
};

subtest 'post_shape_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('post_shape_save_as', 'format', $params{ format });
    $utils->initialize('post_shape_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'format');
    }
};

subtest 'post_shape_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('post_shape_save_as', 'options', $params{ options });
    $utils->initialize('post_shape_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'options');
    }
};

subtest 'post_shape_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_shape_save_as', 'password', $params{ password });
    $utils->initialize('post_shape_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'password');
    }
};

subtest 'post_shape_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_shape_save_as', 'folder', $params{ folder });
    $utils->initialize('post_shape_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'folder');
    }
};

subtest 'post_shape_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_shape_save_as', 'storage', $params{ storage });
    $utils->initialize('post_shape_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'storage');
    }
};

subtest 'post_shape_save_as invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('post_shape_save_as', 'scale_x', $params{ scale_x });
    $utils->initialize('post_shape_save_as', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'scale_x');
    }
};

subtest 'post_shape_save_as invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('post_shape_save_as', 'scale_y', $params{ scale_y });
    $utils->initialize('post_shape_save_as', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'scale_y');
    }
};

subtest 'post_shape_save_as invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('post_shape_save_as', 'bounds', $params{ bounds });
    $utils->initialize('post_shape_save_as', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'bounds');
    }
};

subtest 'post_shape_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('post_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_shape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_shape_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('post_shape_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('post_shape_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->post_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_shape_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('post_shape_save_as', 'fonts_folder');
    }
};

#
# post_slide_animation_effect test
#
subtest 'post_slide_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_effect', 'storage', 'string'));
    $utils->initialize('post_slide_animation_effect', '');
    eval {
        my $result = $utils->{api}->post_slide_animation_effect(%params);
    };
    if ($@) {
        fail("post_slide_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'post_slide_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slide_animation_effect', 'name', $params{ name });
    $utils->initialize('post_slide_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_effect', 'name');
    }
};

subtest 'post_slide_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_slide_animation_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('post_slide_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_effect', 'slide_index');
    }
};

subtest 'post_slide_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('post_slide_animation_effect', 'effect', $params{ effect });
    $utils->initialize('post_slide_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->post_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_effect', 'effect');
    }
};

subtest 'post_slide_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slide_animation_effect', 'password', $params{ password });
    $utils->initialize('post_slide_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_effect', 'password');
    }
};

subtest 'post_slide_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slide_animation_effect', 'folder', $params{ folder });
    $utils->initialize('post_slide_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_effect', 'folder');
    }
};

subtest 'post_slide_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slide_animation_effect', 'storage', $params{ storage });
    $utils->initialize('post_slide_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_effect', 'storage');
    }
};

#
# post_slide_animation_interactive_sequence test
#
subtest 'post_slide_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('post_slide_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("post_slide_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'post_slide_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence', 'name', $params{ name });
    $utils->initialize('post_slide_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence', 'name');
    }
};

subtest 'post_slide_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });
    $utils->initialize('post_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence', 'slide_index');
    }
};

subtest 'post_slide_animation_interactive_sequence invalid sequence' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence', 'sequence', $params{ sequence });
    $utils->initialize('post_slide_animation_interactive_sequence', 'sequence', $params{ sequence });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence', 'sequence', $params{ sequence }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence', 'sequence');
    }
};

subtest 'post_slide_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence', 'password', $params{ password });
    $utils->initialize('post_slide_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence', 'password');
    }
};

subtest 'post_slide_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence', 'folder', $params{ folder });
    $utils->initialize('post_slide_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence', 'folder');
    }
};

subtest 'post_slide_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence', 'storage', $params{ storage });
    $utils->initialize('post_slide_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence', 'storage');
    }
};

#
# post_slide_animation_interactive_sequence_effect test
#
subtest 'post_slide_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('post_slide_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("post_slide_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'post_slide_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence_effect', 'name', $params{ name });
    $utils->initialize('post_slide_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence_effect', 'name');
    }
};

subtest 'post_slide_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('post_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence_effect', 'slide_index');
    }
};

subtest 'post_slide_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });
    $utils->initialize('post_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence_effect', 'sequence_index');
    }
};

subtest 'post_slide_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });
    $utils->initialize('post_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence_effect', 'effect');
    }
};

subtest 'post_slide_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence_effect', 'password', $params{ password });
    $utils->initialize('post_slide_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence_effect', 'password');
    }
};

subtest 'post_slide_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });
    $utils->initialize('post_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence_effect', 'folder');
    }
};

subtest 'post_slide_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });
    $utils->initialize('post_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slide_animation_interactive_sequence_effect', 'storage');
    }
};

#
# post_slide_save_as test
#
subtest 'post_slide_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $utils->initialize('post_slide_save_as', '');
    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        fail("post_slide_save_as raised an exception: $@");
    }
    pass();
};

subtest 'post_slide_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slide_save_as', 'name', $params{ name });
    $utils->initialize('post_slide_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'name');
    }
};

subtest 'post_slide_save_as invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_slide_save_as', 'slide_index', $params{ slide_index });
    $utils->initialize('post_slide_save_as', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'slide_index');
    }
};

subtest 'post_slide_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('post_slide_save_as', 'format', $params{ format });
    $utils->initialize('post_slide_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'format');
    }
};

subtest 'post_slide_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('post_slide_save_as', 'options', $params{ options });
    $utils->initialize('post_slide_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'options');
    }
};

subtest 'post_slide_save_as invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('post_slide_save_as', 'width', $params{ width });
    $utils->initialize('post_slide_save_as', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'width');
    }
};

subtest 'post_slide_save_as invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('post_slide_save_as', 'height', $params{ height });
    $utils->initialize('post_slide_save_as', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'height');
    }
};

subtest 'post_slide_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slide_save_as', 'password', $params{ password });
    $utils->initialize('post_slide_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'password');
    }
};

subtest 'post_slide_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slide_save_as', 'folder', $params{ folder });
    $utils->initialize('post_slide_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'folder');
    }
};

subtest 'post_slide_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slide_save_as', 'storage', $params{ storage });
    $utils->initialize('post_slide_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'storage');
    }
};

subtest 'post_slide_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('post_slide_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('post_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('post_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('post_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('post_slide_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('post_slide_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('post_slide_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->post_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slide_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('post_slide_save_as', 'fonts_folder');
    }
};

#
# post_slides_add test
#
subtest 'post_slides_add' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_add', 'name', 'string'), 'position' => $utils->get_param_value('post_slides_add', 'position', 'int'), 'password' => $utils->get_param_value('post_slides_add', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_add', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_add', 'storage', 'string'), 'layout_alias' => $utils->get_param_value('post_slides_add', 'layout_alias', 'string'));
    $utils->initialize('post_slides_add', '');
    eval {
        my $result = $utils->{api}->post_slides_add(%params);
    };
    if ($@) {
        fail("post_slides_add raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_add invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_add', 'name', 'string'), 'position' => $utils->get_param_value('post_slides_add', 'position', 'int'), 'password' => $utils->get_param_value('post_slides_add', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_add', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_add', 'storage', 'string'), 'layout_alias' => $utils->get_param_value('post_slides_add', 'layout_alias', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_add', 'name', $params{ name });
    $utils->initialize('post_slides_add', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_add(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_add', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_add', 'name');
    }
};

subtest 'post_slides_add invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_add', 'name', 'string'), 'position' => $utils->get_param_value('post_slides_add', 'position', 'int'), 'password' => $utils->get_param_value('post_slides_add', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_add', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_add', 'storage', 'string'), 'layout_alias' => $utils->get_param_value('post_slides_add', 'layout_alias', 'string'));
    $params{ position } = $utils->invalidize_param_value('post_slides_add', 'position', $params{ position });
    $utils->initialize('post_slides_add', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_slides_add(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_add', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_slides_add', 'position');
    }
};

subtest 'post_slides_add invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_add', 'name', 'string'), 'position' => $utils->get_param_value('post_slides_add', 'position', 'int'), 'password' => $utils->get_param_value('post_slides_add', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_add', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_add', 'storage', 'string'), 'layout_alias' => $utils->get_param_value('post_slides_add', 'layout_alias', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_add', 'password', $params{ password });
    $utils->initialize('post_slides_add', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_add(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_add', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_add', 'password');
    }
};

subtest 'post_slides_add invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_add', 'name', 'string'), 'position' => $utils->get_param_value('post_slides_add', 'position', 'int'), 'password' => $utils->get_param_value('post_slides_add', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_add', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_add', 'storage', 'string'), 'layout_alias' => $utils->get_param_value('post_slides_add', 'layout_alias', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_add', 'folder', $params{ folder });
    $utils->initialize('post_slides_add', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_add(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_add', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_add', 'folder');
    }
};

subtest 'post_slides_add invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_add', 'name', 'string'), 'position' => $utils->get_param_value('post_slides_add', 'position', 'int'), 'password' => $utils->get_param_value('post_slides_add', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_add', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_add', 'storage', 'string'), 'layout_alias' => $utils->get_param_value('post_slides_add', 'layout_alias', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_add', 'storage', $params{ storage });
    $utils->initialize('post_slides_add', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_add(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_add', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_add', 'storage');
    }
};

subtest 'post_slides_add invalid layout_alias' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_add', 'name', 'string'), 'position' => $utils->get_param_value('post_slides_add', 'position', 'int'), 'password' => $utils->get_param_value('post_slides_add', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_add', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_add', 'storage', 'string'), 'layout_alias' => $utils->get_param_value('post_slides_add', 'layout_alias', 'string'));
    $params{ layout_alias } = $utils->invalidize_param_value('post_slides_add', 'layout_alias', $params{ layout_alias });
    $utils->initialize('post_slides_add', 'layout_alias', $params{ layout_alias });

    eval {
        my $result = $utils->{api}->post_slides_add(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_add', 'layout_alias', $params{ layout_alias }, $@);
    } else {
        $utils->assert_no_error('post_slides_add', 'layout_alias');
    }
};

#
# post_slides_convert test
#
subtest 'post_slides_convert' => sub {
    my %params = ('document' => $utils->get_param_value('post_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('post_slides_convert', 'format', 'string'), 'password' => $utils->get_param_value('post_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_convert', 'fonts_folder', 'string'));
    $utils->initialize('post_slides_convert', '');
    eval {
        my $result = $utils->{api}->post_slides_convert(%params);
    };
    if ($@) {
        fail("post_slides_convert raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_convert invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('post_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('post_slides_convert', 'format', 'string'), 'password' => $utils->get_param_value('post_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_convert', 'fonts_folder', 'string'));
    $params{ document } = $utils->invalidize_param_value('post_slides_convert', 'document', $params{ document });
    $utils->initialize('post_slides_convert', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->post_slides_convert(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_convert', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('post_slides_convert', 'document');
    }
};

subtest 'post_slides_convert invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('post_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('post_slides_convert', 'format', 'string'), 'password' => $utils->get_param_value('post_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_convert', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('post_slides_convert', 'format', $params{ format });
    $utils->initialize('post_slides_convert', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->post_slides_convert(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_convert', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('post_slides_convert', 'format');
    }
};

subtest 'post_slides_convert invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('post_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('post_slides_convert', 'format', 'string'), 'password' => $utils->get_param_value('post_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_convert', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_convert', 'password', $params{ password });
    $utils->initialize('post_slides_convert', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_convert(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_convert', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_convert', 'password');
    }
};

subtest 'post_slides_convert invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('post_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('post_slides_convert', 'format', 'string'), 'password' => $utils->get_param_value('post_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_convert', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('post_slides_convert', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('post_slides_convert', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->post_slides_convert(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_convert', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_convert', 'fonts_folder');
    }
};

#
# post_slides_copy test
#
subtest 'post_slides_copy' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $utils->initialize('post_slides_copy', '');
    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        fail("post_slides_copy raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_copy invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_copy', 'name', $params{ name });
    $utils->initialize('post_slides_copy', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_copy', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_copy', 'name');
    }
};

subtest 'post_slides_copy invalid slide_to_copy' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $params{ slide_to_copy } = $utils->invalidize_param_value('post_slides_copy', 'slide_to_copy', $params{ slide_to_copy });
    $utils->initialize('post_slides_copy', 'slide_to_copy', $params{ slide_to_copy });

    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_copy', 'slide_to_copy', $params{ slide_to_copy }, $@);
    } else {
        $utils->assert_no_error('post_slides_copy', 'slide_to_copy');
    }
};

subtest 'post_slides_copy invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('post_slides_copy', 'position', $params{ position });
    $utils->initialize('post_slides_copy', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_copy', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('post_slides_copy', 'position');
    }
};

subtest 'post_slides_copy invalid source' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $params{ source } = $utils->invalidize_param_value('post_slides_copy', 'source', $params{ source });
    $utils->initialize('post_slides_copy', 'source', $params{ source });

    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_copy', 'source', $params{ source }, $@);
    } else {
        $utils->assert_no_error('post_slides_copy', 'source');
    }
};

subtest 'post_slides_copy invalid source_password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $params{ source_password } = $utils->invalidize_param_value('post_slides_copy', 'source_password', $params{ source_password });
    $utils->initialize('post_slides_copy', 'source_password', $params{ source_password });

    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_copy', 'source_password', $params{ source_password }, $@);
    } else {
        $utils->assert_no_error('post_slides_copy', 'source_password');
    }
};

subtest 'post_slides_copy invalid source_storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $params{ source_storage } = $utils->invalidize_param_value('post_slides_copy', 'source_storage', $params{ source_storage });
    $utils->initialize('post_slides_copy', 'source_storage', $params{ source_storage });

    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_copy', 'source_storage', $params{ source_storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_copy', 'source_storage');
    }
};

subtest 'post_slides_copy invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_copy', 'password', $params{ password });
    $utils->initialize('post_slides_copy', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_copy', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_copy', 'password');
    }
};

subtest 'post_slides_copy invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_copy', 'folder', $params{ folder });
    $utils->initialize('post_slides_copy', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_copy', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_copy', 'folder');
    }
};

subtest 'post_slides_copy invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_copy', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('post_slides_copy', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('post_slides_copy', 'position', 'int'), 'source' => $utils->get_param_value('post_slides_copy', 'source', 'string'), 'source_password' => $utils->get_param_value('post_slides_copy', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_copy', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_copy', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_copy', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_copy', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_copy', 'storage', $params{ storage });
    $utils->initialize('post_slides_copy', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_copy(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_copy', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_copy', 'storage');
    }
};

#
# post_slides_document test
#
subtest 'post_slides_document' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document', 'name', 'string'), 'data' => $utils->get_param_value('post_slides_document', 'data', 'File'), 'input_password' => $utils->get_param_value('post_slides_document', 'input_password', 'string'), 'password' => $utils->get_param_value('post_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document', 'folder', 'string'));
    $utils->initialize('post_slides_document', '');
    eval {
        my $result = $utils->{api}->post_slides_document(%params);
    };
    if ($@) {
        fail("post_slides_document raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_document invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document', 'name', 'string'), 'data' => $utils->get_param_value('post_slides_document', 'data', 'File'), 'input_password' => $utils->get_param_value('post_slides_document', 'input_password', 'string'), 'password' => $utils->get_param_value('post_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_document', 'name', $params{ name });
    $utils->initialize('post_slides_document', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_document', 'name');
    }
};

subtest 'post_slides_document invalid data' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document', 'name', 'string'), 'data' => $utils->get_param_value('post_slides_document', 'data', 'File'), 'input_password' => $utils->get_param_value('post_slides_document', 'input_password', 'string'), 'password' => $utils->get_param_value('post_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document', 'folder', 'string'));
    $params{ data } = $utils->invalidize_param_value('post_slides_document', 'data', $params{ data });
    $utils->initialize('post_slides_document', 'data', $params{ data });

    eval {
        my $result = $utils->{api}->post_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document', 'data', $params{ data }, $@);
    } else {
        $utils->assert_no_error('post_slides_document', 'data');
    }
};

subtest 'post_slides_document invalid input_password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document', 'name', 'string'), 'data' => $utils->get_param_value('post_slides_document', 'data', 'File'), 'input_password' => $utils->get_param_value('post_slides_document', 'input_password', 'string'), 'password' => $utils->get_param_value('post_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document', 'folder', 'string'));
    $params{ input_password } = $utils->invalidize_param_value('post_slides_document', 'input_password', $params{ input_password });
    $utils->initialize('post_slides_document', 'input_password', $params{ input_password });

    eval {
        my $result = $utils->{api}->post_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document', 'input_password', $params{ input_password }, $@);
    } else {
        $utils->assert_no_error('post_slides_document', 'input_password');
    }
};

subtest 'post_slides_document invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document', 'name', 'string'), 'data' => $utils->get_param_value('post_slides_document', 'data', 'File'), 'input_password' => $utils->get_param_value('post_slides_document', 'input_password', 'string'), 'password' => $utils->get_param_value('post_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_document', 'password', $params{ password });
    $utils->initialize('post_slides_document', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_document', 'password');
    }
};

subtest 'post_slides_document invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document', 'name', 'string'), 'data' => $utils->get_param_value('post_slides_document', 'data', 'File'), 'input_password' => $utils->get_param_value('post_slides_document', 'input_password', 'string'), 'password' => $utils->get_param_value('post_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_document', 'storage', $params{ storage });
    $utils->initialize('post_slides_document', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_document', 'storage');
    }
};

subtest 'post_slides_document invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document', 'name', 'string'), 'data' => $utils->get_param_value('post_slides_document', 'data', 'File'), 'input_password' => $utils->get_param_value('post_slides_document', 'input_password', 'string'), 'password' => $utils->get_param_value('post_slides_document', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_document', 'folder', $params{ folder });
    $utils->initialize('post_slides_document', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_document(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_document', 'folder');
    }
};

#
# post_slides_document_from_html test
#
subtest 'post_slides_document_from_html' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('post_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_html', 'folder', 'string'));
    $utils->initialize('post_slides_document_from_html', '');
    eval {
        my $result = $utils->{api}->post_slides_document_from_html(%params);
    };
    if ($@) {
        fail("post_slides_document_from_html raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_document_from_html invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('post_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_html', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_document_from_html', 'name', $params{ name });
    $utils->initialize('post_slides_document_from_html', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_html', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_html', 'name');
    }
};

subtest 'post_slides_document_from_html invalid html' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('post_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_html', 'folder', 'string'));
    $params{ html } = $utils->invalidize_param_value('post_slides_document_from_html', 'html', $params{ html });
    $utils->initialize('post_slides_document_from_html', 'html', $params{ html });

    eval {
        my $result = $utils->{api}->post_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_html', 'html', $params{ html }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_html', 'html');
    }
};

subtest 'post_slides_document_from_html invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('post_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_html', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_document_from_html', 'password', $params{ password });
    $utils->initialize('post_slides_document_from_html', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_html', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_html', 'password');
    }
};

subtest 'post_slides_document_from_html invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('post_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_html', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_document_from_html', 'storage', $params{ storage });
    $utils->initialize('post_slides_document_from_html', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_html', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_html', 'storage');
    }
};

subtest 'post_slides_document_from_html invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('post_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_html', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_document_from_html', 'folder', $params{ folder });
    $utils->initialize('post_slides_document_from_html', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_html', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_html', 'folder');
    }
};

#
# post_slides_document_from_pdf test
#
subtest 'post_slides_document_from_pdf' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('post_slides_document_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('post_slides_document_from_pdf', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_pdf', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_pdf', 'folder', 'string'));
    $utils->initialize('post_slides_document_from_pdf', '');
    eval {
        my $result = $utils->{api}->post_slides_document_from_pdf(%params);
    };
    if ($@) {
        fail("post_slides_document_from_pdf raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_document_from_pdf invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('post_slides_document_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('post_slides_document_from_pdf', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_pdf', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_pdf', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_document_from_pdf', 'name', $params{ name });
    $utils->initialize('post_slides_document_from_pdf', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_document_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_pdf', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_pdf', 'name');
    }
};

subtest 'post_slides_document_from_pdf invalid pdf' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('post_slides_document_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('post_slides_document_from_pdf', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_pdf', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_pdf', 'folder', 'string'));
    $params{ pdf } = $utils->invalidize_param_value('post_slides_document_from_pdf', 'pdf', $params{ pdf });
    $utils->initialize('post_slides_document_from_pdf', 'pdf', $params{ pdf });

    eval {
        my $result = $utils->{api}->post_slides_document_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_pdf', 'pdf', $params{ pdf }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_pdf', 'pdf');
    }
};

subtest 'post_slides_document_from_pdf invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('post_slides_document_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('post_slides_document_from_pdf', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_pdf', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_pdf', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_document_from_pdf', 'password', $params{ password });
    $utils->initialize('post_slides_document_from_pdf', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_document_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_pdf', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_pdf', 'password');
    }
};

subtest 'post_slides_document_from_pdf invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('post_slides_document_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('post_slides_document_from_pdf', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_pdf', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_pdf', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_document_from_pdf', 'storage', $params{ storage });
    $utils->initialize('post_slides_document_from_pdf', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_document_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_pdf', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_pdf', 'storage');
    }
};

subtest 'post_slides_document_from_pdf invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('post_slides_document_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('post_slides_document_from_pdf', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_pdf', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_pdf', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_document_from_pdf', 'folder', $params{ folder });
    $utils->initialize('post_slides_document_from_pdf', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_document_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_pdf', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_pdf', 'folder');
    }
};

#
# post_slides_document_from_source test
#
subtest 'post_slides_document_from_source' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('post_slides_document_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('post_slides_document_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_document_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_source', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_source', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_source', 'folder', 'string'));
    $utils->initialize('post_slides_document_from_source', '');
    eval {
        my $result = $utils->{api}->post_slides_document_from_source(%params);
    };
    if ($@) {
        fail("post_slides_document_from_source raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_document_from_source invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('post_slides_document_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('post_slides_document_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_document_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_source', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_source', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_source', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_document_from_source', 'name', $params{ name });
    $utils->initialize('post_slides_document_from_source', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_document_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_source', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_source', 'name');
    }
};

subtest 'post_slides_document_from_source invalid source_path' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('post_slides_document_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('post_slides_document_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_document_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_source', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_source', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_source', 'folder', 'string'));
    $params{ source_path } = $utils->invalidize_param_value('post_slides_document_from_source', 'source_path', $params{ source_path });
    $utils->initialize('post_slides_document_from_source', 'source_path', $params{ source_path });

    eval {
        my $result = $utils->{api}->post_slides_document_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_source', 'source_path', $params{ source_path }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_source', 'source_path');
    }
};

subtest 'post_slides_document_from_source invalid source_password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('post_slides_document_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('post_slides_document_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_document_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_source', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_source', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_source', 'folder', 'string'));
    $params{ source_password } = $utils->invalidize_param_value('post_slides_document_from_source', 'source_password', $params{ source_password });
    $utils->initialize('post_slides_document_from_source', 'source_password', $params{ source_password });

    eval {
        my $result = $utils->{api}->post_slides_document_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_source', 'source_password', $params{ source_password }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_source', 'source_password');
    }
};

subtest 'post_slides_document_from_source invalid source_storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('post_slides_document_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('post_slides_document_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_document_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_source', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_source', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_source', 'folder', 'string'));
    $params{ source_storage } = $utils->invalidize_param_value('post_slides_document_from_source', 'source_storage', $params{ source_storage });
    $utils->initialize('post_slides_document_from_source', 'source_storage', $params{ source_storage });

    eval {
        my $result = $utils->{api}->post_slides_document_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_source', 'source_storage', $params{ source_storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_source', 'source_storage');
    }
};

subtest 'post_slides_document_from_source invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('post_slides_document_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('post_slides_document_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_document_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_source', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_source', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_source', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_document_from_source', 'password', $params{ password });
    $utils->initialize('post_slides_document_from_source', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_document_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_source', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_source', 'password');
    }
};

subtest 'post_slides_document_from_source invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('post_slides_document_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('post_slides_document_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_document_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_source', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_source', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_source', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_document_from_source', 'storage', $params{ storage });
    $utils->initialize('post_slides_document_from_source', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_document_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_source', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_source', 'storage');
    }
};

subtest 'post_slides_document_from_source invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('post_slides_document_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('post_slides_document_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('post_slides_document_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('post_slides_document_from_source', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_source', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_source', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_document_from_source', 'folder', $params{ folder });
    $utils->initialize('post_slides_document_from_source', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_document_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_source', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_source', 'folder');
    }
};

#
# post_slides_document_from_template test
#
subtest 'post_slides_document_from_template' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $utils->initialize('post_slides_document_from_template', '');
    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        fail("post_slides_document_from_template raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_document_from_template invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_document_from_template', 'name', $params{ name });
    $utils->initialize('post_slides_document_from_template', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_template', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_template', 'name');
    }
};

subtest 'post_slides_document_from_template invalid template_path' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $params{ template_path } = $utils->invalidize_param_value('post_slides_document_from_template', 'template_path', $params{ template_path });
    $utils->initialize('post_slides_document_from_template', 'template_path', $params{ template_path });

    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_template', 'template_path', $params{ template_path }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_template', 'template_path');
    }
};

subtest 'post_slides_document_from_template invalid data' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $params{ data } = $utils->invalidize_param_value('post_slides_document_from_template', 'data', $params{ data });
    $utils->initialize('post_slides_document_from_template', 'data', $params{ data });

    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_template', 'data', $params{ data }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_template', 'data');
    }
};

subtest 'post_slides_document_from_template invalid template_password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $params{ template_password } = $utils->invalidize_param_value('post_slides_document_from_template', 'template_password', $params{ template_password });
    $utils->initialize('post_slides_document_from_template', 'template_password', $params{ template_password });

    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_template', 'template_password', $params{ template_password }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_template', 'template_password');
    }
};

subtest 'post_slides_document_from_template invalid template_storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $params{ template_storage } = $utils->invalidize_param_value('post_slides_document_from_template', 'template_storage', $params{ template_storage });
    $utils->initialize('post_slides_document_from_template', 'template_storage', $params{ template_storage });

    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_template', 'template_storage', $params{ template_storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_template', 'template_storage');
    }
};

subtest 'post_slides_document_from_template invalid is_image_data_embedded' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $params{ is_image_data_embedded } = $utils->invalidize_param_value('post_slides_document_from_template', 'is_image_data_embedded', $params{ is_image_data_embedded });
    $utils->initialize('post_slides_document_from_template', 'is_image_data_embedded', $params{ is_image_data_embedded });

    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_template', 'is_image_data_embedded', $params{ is_image_data_embedded }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_template', 'is_image_data_embedded');
    }
};

subtest 'post_slides_document_from_template invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_document_from_template', 'password', $params{ password });
    $utils->initialize('post_slides_document_from_template', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_template', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_template', 'password');
    }
};

subtest 'post_slides_document_from_template invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_document_from_template', 'storage', $params{ storage });
    $utils->initialize('post_slides_document_from_template', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_template', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_template', 'storage');
    }
};

subtest 'post_slides_document_from_template invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_document_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('post_slides_document_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('post_slides_document_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('post_slides_document_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('post_slides_document_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('post_slides_document_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('post_slides_document_from_template', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_document_from_template', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_document_from_template', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_document_from_template', 'folder', $params{ folder });
    $utils->initialize('post_slides_document_from_template', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_document_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_document_from_template', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_document_from_template', 'folder');
    }
};

#
# post_slides_pipeline test
#
subtest 'post_slides_pipeline' => sub {
    my %params = ('pipeline' => $utils->get_param_value('post_slides_pipeline', 'pipeline', 'Pipeline'), 'files' => $utils->get_param_value('post_slides_pipeline', 'files', 'ARRAY[string]'));
    $utils->initialize('post_slides_pipeline', '');
    eval {
        my $result = $utils->{api}->post_slides_pipeline(%params);
    };
    if ($@) {
        fail("post_slides_pipeline raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_pipeline invalid pipeline' => sub {
    my %params = ('pipeline' => $utils->get_param_value('post_slides_pipeline', 'pipeline', 'Pipeline'), 'files' => $utils->get_param_value('post_slides_pipeline', 'files', 'ARRAY[string]'));
    $params{ pipeline } = $utils->invalidize_param_value('post_slides_pipeline', 'pipeline', $params{ pipeline });
    $utils->initialize('post_slides_pipeline', 'pipeline', $params{ pipeline });

    eval {
        my $result = $utils->{api}->post_slides_pipeline(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_pipeline', 'pipeline', $params{ pipeline }, $@);
    } else {
        $utils->assert_no_error('post_slides_pipeline', 'pipeline');
    }
};

subtest 'post_slides_pipeline invalid files' => sub {
    my %params = ('pipeline' => $utils->get_param_value('post_slides_pipeline', 'pipeline', 'Pipeline'), 'files' => $utils->get_param_value('post_slides_pipeline', 'files', 'ARRAY[string]'));
    $params{ files } = $utils->invalidize_param_value('post_slides_pipeline', 'files', $params{ files });
    $utils->initialize('post_slides_pipeline', 'files', $params{ files });

    eval {
        my $result = $utils->{api}->post_slides_pipeline(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_pipeline', 'files', $params{ files }, $@);
    } else {
        $utils->assert_no_error('post_slides_pipeline', 'files');
    }
};

#
# post_slides_presentation_replace_text test
#
subtest 'post_slides_presentation_replace_text' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_presentation_replace_text', 'name', 'string'), 'old_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_presentation_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_presentation_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_presentation_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_presentation_replace_text', 'storage', 'string'));
    $utils->initialize('post_slides_presentation_replace_text', '');
    eval {
        my $result = $utils->{api}->post_slides_presentation_replace_text(%params);
    };
    if ($@) {
        fail("post_slides_presentation_replace_text raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_presentation_replace_text invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_presentation_replace_text', 'name', 'string'), 'old_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_presentation_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_presentation_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_presentation_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_presentation_replace_text', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_presentation_replace_text', 'name', $params{ name });
    $utils->initialize('post_slides_presentation_replace_text', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_presentation_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_presentation_replace_text', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_presentation_replace_text', 'name');
    }
};

subtest 'post_slides_presentation_replace_text invalid old_value' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_presentation_replace_text', 'name', 'string'), 'old_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_presentation_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_presentation_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_presentation_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_presentation_replace_text', 'storage', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('post_slides_presentation_replace_text', 'old_value', $params{ old_value });
    $utils->initialize('post_slides_presentation_replace_text', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->post_slides_presentation_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_presentation_replace_text', 'old_value', $params{ old_value }, $@);
    } else {
        $utils->assert_no_error('post_slides_presentation_replace_text', 'old_value');
    }
};

subtest 'post_slides_presentation_replace_text invalid new_value' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_presentation_replace_text', 'name', 'string'), 'old_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_presentation_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_presentation_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_presentation_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_presentation_replace_text', 'storage', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('post_slides_presentation_replace_text', 'new_value', $params{ new_value });
    $utils->initialize('post_slides_presentation_replace_text', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->post_slides_presentation_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_presentation_replace_text', 'new_value', $params{ new_value }, $@);
    } else {
        $utils->assert_no_error('post_slides_presentation_replace_text', 'new_value');
    }
};

subtest 'post_slides_presentation_replace_text invalid ignore_case' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_presentation_replace_text', 'name', 'string'), 'old_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_presentation_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_presentation_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_presentation_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_presentation_replace_text', 'storage', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('post_slides_presentation_replace_text', 'ignore_case', $params{ ignore_case });
    $utils->initialize('post_slides_presentation_replace_text', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->post_slides_presentation_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_presentation_replace_text', 'ignore_case', $params{ ignore_case }, $@);
    } else {
        $utils->assert_no_error('post_slides_presentation_replace_text', 'ignore_case');
    }
};

subtest 'post_slides_presentation_replace_text invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_presentation_replace_text', 'name', 'string'), 'old_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_presentation_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_presentation_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_presentation_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_presentation_replace_text', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_presentation_replace_text', 'password', $params{ password });
    $utils->initialize('post_slides_presentation_replace_text', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_presentation_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_presentation_replace_text', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_presentation_replace_text', 'password');
    }
};

subtest 'post_slides_presentation_replace_text invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_presentation_replace_text', 'name', 'string'), 'old_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_presentation_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_presentation_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_presentation_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_presentation_replace_text', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_presentation_replace_text', 'folder', $params{ folder });
    $utils->initialize('post_slides_presentation_replace_text', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_presentation_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_presentation_replace_text', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_presentation_replace_text', 'folder');
    }
};

subtest 'post_slides_presentation_replace_text invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_presentation_replace_text', 'name', 'string'), 'old_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_presentation_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_presentation_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_presentation_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_presentation_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_presentation_replace_text', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_presentation_replace_text', 'storage', $params{ storage });
    $utils->initialize('post_slides_presentation_replace_text', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_presentation_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_presentation_replace_text', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_presentation_replace_text', 'storage');
    }
};

#
# post_slides_reorder test
#
subtest 'post_slides_reorder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_reorder', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('post_slides_reorder', 'new_position', 'int'), 'password' => $utils->get_param_value('post_slides_reorder', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder', 'storage', 'string'));
    $utils->initialize('post_slides_reorder', '');
    eval {
        my $result = $utils->{api}->post_slides_reorder(%params);
    };
    if ($@) {
        fail("post_slides_reorder raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_reorder invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_reorder', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('post_slides_reorder', 'new_position', 'int'), 'password' => $utils->get_param_value('post_slides_reorder', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_reorder', 'name', $params{ name });
    $utils->initialize('post_slides_reorder', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_reorder(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder', 'name');
    }
};

subtest 'post_slides_reorder invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_reorder', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('post_slides_reorder', 'new_position', 'int'), 'password' => $utils->get_param_value('post_slides_reorder', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_slides_reorder', 'slide_index', $params{ slide_index });
    $utils->initialize('post_slides_reorder', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_slides_reorder(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder', 'slide_index');
    }
};

subtest 'post_slides_reorder invalid new_position' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_reorder', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('post_slides_reorder', 'new_position', 'int'), 'password' => $utils->get_param_value('post_slides_reorder', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder', 'storage', 'string'));
    $params{ new_position } = $utils->invalidize_param_value('post_slides_reorder', 'new_position', $params{ new_position });
    $utils->initialize('post_slides_reorder', 'new_position', $params{ new_position });

    eval {
        my $result = $utils->{api}->post_slides_reorder(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder', 'new_position', $params{ new_position }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder', 'new_position');
    }
};

subtest 'post_slides_reorder invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_reorder', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('post_slides_reorder', 'new_position', 'int'), 'password' => $utils->get_param_value('post_slides_reorder', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_reorder', 'password', $params{ password });
    $utils->initialize('post_slides_reorder', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_reorder(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder', 'password');
    }
};

subtest 'post_slides_reorder invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_reorder', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('post_slides_reorder', 'new_position', 'int'), 'password' => $utils->get_param_value('post_slides_reorder', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_reorder', 'folder', $params{ folder });
    $utils->initialize('post_slides_reorder', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_reorder(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder', 'folder');
    }
};

subtest 'post_slides_reorder invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_reorder', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('post_slides_reorder', 'new_position', 'int'), 'password' => $utils->get_param_value('post_slides_reorder', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_reorder', 'storage', $params{ storage });
    $utils->initialize('post_slides_reorder', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_reorder(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder', 'storage');
    }
};

#
# post_slides_reorder_many test
#
subtest 'post_slides_reorder_many' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder_many', 'name', 'string'), 'old_positions' => $utils->get_param_value('post_slides_reorder_many', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('post_slides_reorder_many', 'new_positions', 'string'), 'password' => $utils->get_param_value('post_slides_reorder_many', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder_many', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder_many', 'storage', 'string'));
    $utils->initialize('post_slides_reorder_many', '');
    eval {
        my $result = $utils->{api}->post_slides_reorder_many(%params);
    };
    if ($@) {
        fail("post_slides_reorder_many raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_reorder_many invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder_many', 'name', 'string'), 'old_positions' => $utils->get_param_value('post_slides_reorder_many', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('post_slides_reorder_many', 'new_positions', 'string'), 'password' => $utils->get_param_value('post_slides_reorder_many', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder_many', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder_many', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_reorder_many', 'name', $params{ name });
    $utils->initialize('post_slides_reorder_many', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_reorder_many(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder_many', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder_many', 'name');
    }
};

subtest 'post_slides_reorder_many invalid old_positions' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder_many', 'name', 'string'), 'old_positions' => $utils->get_param_value('post_slides_reorder_many', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('post_slides_reorder_many', 'new_positions', 'string'), 'password' => $utils->get_param_value('post_slides_reorder_many', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder_many', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder_many', 'storage', 'string'));
    $params{ old_positions } = $utils->invalidize_param_value('post_slides_reorder_many', 'old_positions', $params{ old_positions });
    $utils->initialize('post_slides_reorder_many', 'old_positions', $params{ old_positions });

    eval {
        my $result = $utils->{api}->post_slides_reorder_many(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder_many', 'old_positions', $params{ old_positions }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder_many', 'old_positions');
    }
};

subtest 'post_slides_reorder_many invalid new_positions' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder_many', 'name', 'string'), 'old_positions' => $utils->get_param_value('post_slides_reorder_many', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('post_slides_reorder_many', 'new_positions', 'string'), 'password' => $utils->get_param_value('post_slides_reorder_many', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder_many', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder_many', 'storage', 'string'));
    $params{ new_positions } = $utils->invalidize_param_value('post_slides_reorder_many', 'new_positions', $params{ new_positions });
    $utils->initialize('post_slides_reorder_many', 'new_positions', $params{ new_positions });

    eval {
        my $result = $utils->{api}->post_slides_reorder_many(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder_many', 'new_positions', $params{ new_positions }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder_many', 'new_positions');
    }
};

subtest 'post_slides_reorder_many invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder_many', 'name', 'string'), 'old_positions' => $utils->get_param_value('post_slides_reorder_many', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('post_slides_reorder_many', 'new_positions', 'string'), 'password' => $utils->get_param_value('post_slides_reorder_many', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder_many', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder_many', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_reorder_many', 'password', $params{ password });
    $utils->initialize('post_slides_reorder_many', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_reorder_many(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder_many', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder_many', 'password');
    }
};

subtest 'post_slides_reorder_many invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder_many', 'name', 'string'), 'old_positions' => $utils->get_param_value('post_slides_reorder_many', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('post_slides_reorder_many', 'new_positions', 'string'), 'password' => $utils->get_param_value('post_slides_reorder_many', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder_many', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder_many', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_reorder_many', 'folder', $params{ folder });
    $utils->initialize('post_slides_reorder_many', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_reorder_many(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder_many', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder_many', 'folder');
    }
};

subtest 'post_slides_reorder_many invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_reorder_many', 'name', 'string'), 'old_positions' => $utils->get_param_value('post_slides_reorder_many', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('post_slides_reorder_many', 'new_positions', 'string'), 'password' => $utils->get_param_value('post_slides_reorder_many', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_reorder_many', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_reorder_many', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_reorder_many', 'storage', $params{ storage });
    $utils->initialize('post_slides_reorder_many', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_reorder_many(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_reorder_many', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_reorder_many', 'storage');
    }
};

#
# post_slides_save_as test
#
subtest 'post_slides_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_save_as', 'name', 'string'), 'format' => $utils->get_param_value('post_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('post_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_save_as', 'fonts_folder', 'string'));
    $utils->initialize('post_slides_save_as', '');
    eval {
        my $result = $utils->{api}->post_slides_save_as(%params);
    };
    if ($@) {
        fail("post_slides_save_as raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_save_as', 'name', 'string'), 'format' => $utils->get_param_value('post_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('post_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_save_as', 'name', $params{ name });
    $utils->initialize('post_slides_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_save_as', 'name');
    }
};

subtest 'post_slides_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_save_as', 'name', 'string'), 'format' => $utils->get_param_value('post_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('post_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('post_slides_save_as', 'format', $params{ format });
    $utils->initialize('post_slides_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->post_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('post_slides_save_as', 'format');
    }
};

subtest 'post_slides_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_save_as', 'name', 'string'), 'format' => $utils->get_param_value('post_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('post_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('post_slides_save_as', 'options', $params{ options });
    $utils->initialize('post_slides_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->post_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('post_slides_save_as', 'options');
    }
};

subtest 'post_slides_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_save_as', 'name', 'string'), 'format' => $utils->get_param_value('post_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('post_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_save_as', 'password', $params{ password });
    $utils->initialize('post_slides_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_save_as', 'password');
    }
};

subtest 'post_slides_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_save_as', 'name', 'string'), 'format' => $utils->get_param_value('post_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('post_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_save_as', 'storage', $params{ storage });
    $utils->initialize('post_slides_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_save_as', 'storage');
    }
};

subtest 'post_slides_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_save_as', 'name', 'string'), 'format' => $utils->get_param_value('post_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('post_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_save_as', 'folder', $params{ folder });
    $utils->initialize('post_slides_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_save_as', 'folder');
    }
};

subtest 'post_slides_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_save_as', 'name', 'string'), 'format' => $utils->get_param_value('post_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('post_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('post_slides_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('post_slides_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->post_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_save_as', 'fonts_folder');
    }
};

#
# post_slides_set_document_properties test
#
subtest 'post_slides_set_document_properties' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('post_slides_set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('post_slides_set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_set_document_properties', 'storage', 'string'));
    $utils->initialize('post_slides_set_document_properties', '');
    eval {
        my $result = $utils->{api}->post_slides_set_document_properties(%params);
    };
    if ($@) {
        fail("post_slides_set_document_properties raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_set_document_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('post_slides_set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('post_slides_set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_set_document_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_set_document_properties', 'name', $params{ name });
    $utils->initialize('post_slides_set_document_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_set_document_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_set_document_properties', 'name');
    }
};

subtest 'post_slides_set_document_properties invalid properties' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('post_slides_set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('post_slides_set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_set_document_properties', 'storage', 'string'));
    $params{ properties } = $utils->invalidize_param_value('post_slides_set_document_properties', 'properties', $params{ properties });
    $utils->initialize('post_slides_set_document_properties', 'properties', $params{ properties });

    eval {
        my $result = $utils->{api}->post_slides_set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_set_document_properties', 'properties', $params{ properties }, $@);
    } else {
        $utils->assert_no_error('post_slides_set_document_properties', 'properties');
    }
};

subtest 'post_slides_set_document_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('post_slides_set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('post_slides_set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_set_document_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_set_document_properties', 'password', $params{ password });
    $utils->initialize('post_slides_set_document_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_set_document_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_set_document_properties', 'password');
    }
};

subtest 'post_slides_set_document_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('post_slides_set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('post_slides_set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_set_document_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_set_document_properties', 'folder', $params{ folder });
    $utils->initialize('post_slides_set_document_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_set_document_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_set_document_properties', 'folder');
    }
};

subtest 'post_slides_set_document_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('post_slides_set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('post_slides_set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_set_document_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_set_document_properties', 'storage', $params{ storage });
    $utils->initialize('post_slides_set_document_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_set_document_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_set_document_properties', 'storage');
    }
};

#
# post_slides_slide_replace_text test
#
subtest 'post_slides_slide_replace_text' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_slide_replace_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_slide_replace_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('post_slides_slide_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_slide_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_slide_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_slide_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_slide_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_slide_replace_text', 'storage', 'string'));
    $utils->initialize('post_slides_slide_replace_text', '');
    eval {
        my $result = $utils->{api}->post_slides_slide_replace_text(%params);
    };
    if ($@) {
        fail("post_slides_slide_replace_text raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_slide_replace_text invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_slide_replace_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_slide_replace_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('post_slides_slide_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_slide_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_slide_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_slide_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_slide_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_slide_replace_text', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_slide_replace_text', 'name', $params{ name });
    $utils->initialize('post_slides_slide_replace_text', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_slide_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_slide_replace_text', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_slide_replace_text', 'name');
    }
};

subtest 'post_slides_slide_replace_text invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_slide_replace_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_slide_replace_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('post_slides_slide_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_slide_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_slide_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_slide_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_slide_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_slide_replace_text', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_slides_slide_replace_text', 'slide_index', $params{ slide_index });
    $utils->initialize('post_slides_slide_replace_text', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_slides_slide_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_slide_replace_text', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_slides_slide_replace_text', 'slide_index');
    }
};

subtest 'post_slides_slide_replace_text invalid old_value' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_slide_replace_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_slide_replace_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('post_slides_slide_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_slide_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_slide_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_slide_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_slide_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_slide_replace_text', 'storage', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('post_slides_slide_replace_text', 'old_value', $params{ old_value });
    $utils->initialize('post_slides_slide_replace_text', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->post_slides_slide_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_slide_replace_text', 'old_value', $params{ old_value }, $@);
    } else {
        $utils->assert_no_error('post_slides_slide_replace_text', 'old_value');
    }
};

subtest 'post_slides_slide_replace_text invalid new_value' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_slide_replace_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_slide_replace_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('post_slides_slide_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_slide_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_slide_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_slide_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_slide_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_slide_replace_text', 'storage', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('post_slides_slide_replace_text', 'new_value', $params{ new_value });
    $utils->initialize('post_slides_slide_replace_text', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->post_slides_slide_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_slide_replace_text', 'new_value', $params{ new_value }, $@);
    } else {
        $utils->assert_no_error('post_slides_slide_replace_text', 'new_value');
    }
};

subtest 'post_slides_slide_replace_text invalid ignore_case' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_slide_replace_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_slide_replace_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('post_slides_slide_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_slide_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_slide_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_slide_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_slide_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_slide_replace_text', 'storage', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('post_slides_slide_replace_text', 'ignore_case', $params{ ignore_case });
    $utils->initialize('post_slides_slide_replace_text', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->post_slides_slide_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_slide_replace_text', 'ignore_case', $params{ ignore_case }, $@);
    } else {
        $utils->assert_no_error('post_slides_slide_replace_text', 'ignore_case');
    }
};

subtest 'post_slides_slide_replace_text invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_slide_replace_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_slide_replace_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('post_slides_slide_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_slide_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_slide_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_slide_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_slide_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_slide_replace_text', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_slide_replace_text', 'password', $params{ password });
    $utils->initialize('post_slides_slide_replace_text', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_slide_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_slide_replace_text', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_slide_replace_text', 'password');
    }
};

subtest 'post_slides_slide_replace_text invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_slide_replace_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_slide_replace_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('post_slides_slide_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_slide_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_slide_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_slide_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_slide_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_slide_replace_text', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_slide_replace_text', 'folder', $params{ folder });
    $utils->initialize('post_slides_slide_replace_text', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_slide_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_slide_replace_text', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_slide_replace_text', 'folder');
    }
};

subtest 'post_slides_slide_replace_text invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_slide_replace_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_slides_slide_replace_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('post_slides_slide_replace_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('post_slides_slide_replace_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('post_slides_slide_replace_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('post_slides_slide_replace_text', 'password', 'string'), 'folder' => $utils->get_param_value('post_slides_slide_replace_text', 'folder', 'string'), 'storage' => $utils->get_param_value('post_slides_slide_replace_text', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_slide_replace_text', 'storage', $params{ storage });
    $utils->initialize('post_slides_slide_replace_text', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_slide_replace_text(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_slide_replace_text', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_slide_replace_text', 'storage');
    }
};

#
# post_slides_split test
#
subtest 'post_slides_split' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $utils->initialize('post_slides_split', '');
    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        fail("post_slides_split raised an exception: $@");
    }
    pass();
};

subtest 'post_slides_split invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_slides_split', 'name', $params{ name });
    $utils->initialize('post_slides_split', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'name');
    }
};

subtest 'post_slides_split invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('post_slides_split', 'options', $params{ options });
    $utils->initialize('post_slides_split', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'options');
    }
};

subtest 'post_slides_split invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('post_slides_split', 'format', $params{ format });
    $utils->initialize('post_slides_split', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'format');
    }
};

subtest 'post_slides_split invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('post_slides_split', 'width', $params{ width });
    $utils->initialize('post_slides_split', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'width');
    }
};

subtest 'post_slides_split invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('post_slides_split', 'height', $params{ height });
    $utils->initialize('post_slides_split', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'height');
    }
};

subtest 'post_slides_split invalid to' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ to } = $utils->invalidize_param_value('post_slides_split', 'to', $params{ to });
    $utils->initialize('post_slides_split', 'to', $params{ to });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'to', $params{ to }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'to');
    }
};

subtest 'post_slides_split invalid from' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ from } = $utils->invalidize_param_value('post_slides_split', 'from', $params{ from });
    $utils->initialize('post_slides_split', 'from', $params{ from });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'from', $params{ from }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'from');
    }
};

subtest 'post_slides_split invalid dest_folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ dest_folder } = $utils->invalidize_param_value('post_slides_split', 'dest_folder', $params{ dest_folder });
    $utils->initialize('post_slides_split', 'dest_folder', $params{ dest_folder });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'dest_folder', $params{ dest_folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'dest_folder');
    }
};

subtest 'post_slides_split invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_slides_split', 'password', $params{ password });
    $utils->initialize('post_slides_split', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'password');
    }
};

subtest 'post_slides_split invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_slides_split', 'storage', $params{ storage });
    $utils->initialize('post_slides_split', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'storage');
    }
};

subtest 'post_slides_split invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_slides_split', 'folder', $params{ folder });
    $utils->initialize('post_slides_split', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'folder');
    }
};

subtest 'post_slides_split invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_slides_split', 'name', 'string'), 'options' => $utils->get_param_value('post_slides_split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('post_slides_split', 'format', 'string'), 'width' => $utils->get_param_value('post_slides_split', 'width', 'int'), 'height' => $utils->get_param_value('post_slides_split', 'height', 'int'), 'to' => $utils->get_param_value('post_slides_split', 'to', 'int'), 'from' => $utils->get_param_value('post_slides_split', 'from', 'int'), 'dest_folder' => $utils->get_param_value('post_slides_split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('post_slides_split', 'password', 'string'), 'storage' => $utils->get_param_value('post_slides_split', 'storage', 'string'), 'folder' => $utils->get_param_value('post_slides_split', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('post_slides_split', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('post_slides_split', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('post_slides_split', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->post_slides_split(%params);
    };
    if ($@) {
        $utils->assert_error('post_slides_split', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('post_slides_split', 'fonts_folder');
    }
};

#
# post_subshape_save_as test
#
subtest 'post_subshape_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $utils->initialize('post_subshape_save_as', '');
    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        fail("post_subshape_save_as raised an exception: $@");
    }
    pass();
};

subtest 'post_subshape_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('post_subshape_save_as', 'name', $params{ name });
    $utils->initialize('post_subshape_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'name');
    }
};

subtest 'post_subshape_save_as invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('post_subshape_save_as', 'slide_index', $params{ slide_index });
    $utils->initialize('post_subshape_save_as', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'slide_index');
    }
};

subtest 'post_subshape_save_as invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ path } = $utils->invalidize_param_value('post_subshape_save_as', 'path', $params{ path });
    $utils->initialize('post_subshape_save_as', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'path');
    }
};

subtest 'post_subshape_save_as invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('post_subshape_save_as', 'shape_index', $params{ shape_index });
    $utils->initialize('post_subshape_save_as', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'shape_index');
    }
};

subtest 'post_subshape_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('post_subshape_save_as', 'format', $params{ format });
    $utils->initialize('post_subshape_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'format');
    }
};

subtest 'post_subshape_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('post_subshape_save_as', 'options', $params{ options });
    $utils->initialize('post_subshape_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'options');
    }
};

subtest 'post_subshape_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('post_subshape_save_as', 'password', $params{ password });
    $utils->initialize('post_subshape_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'password');
    }
};

subtest 'post_subshape_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('post_subshape_save_as', 'folder', $params{ folder });
    $utils->initialize('post_subshape_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'folder');
    }
};

subtest 'post_subshape_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('post_subshape_save_as', 'storage', $params{ storage });
    $utils->initialize('post_subshape_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'storage');
    }
};

subtest 'post_subshape_save_as invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('post_subshape_save_as', 'scale_x', $params{ scale_x });
    $utils->initialize('post_subshape_save_as', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'scale_x');
    }
};

subtest 'post_subshape_save_as invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('post_subshape_save_as', 'scale_y', $params{ scale_y });
    $utils->initialize('post_subshape_save_as', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'scale_y');
    }
};

subtest 'post_subshape_save_as invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('post_subshape_save_as', 'bounds', $params{ bounds });
    $utils->initialize('post_subshape_save_as', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'bounds');
    }
};

subtest 'post_subshape_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('post_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('post_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('post_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('post_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('post_subshape_save_as', 'format', 'string'), 'options' => $utils->get_param_value('post_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('post_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('post_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('post_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('post_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('post_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('post_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('post_subshape_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('post_subshape_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('post_subshape_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->post_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('post_subshape_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('post_subshape_save_as', 'fonts_folder');
    }
};

#
# put_chart_category test
#
subtest 'put_chart_category' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('put_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('put_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('put_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_category', 'storage', 'string'));
    $utils->initialize('put_chart_category', '');
    eval {
        my $result = $utils->{api}->put_chart_category(%params);
    };
    if ($@) {
        fail("put_chart_category raised an exception: $@");
    }
    pass();
};

subtest 'put_chart_category invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('put_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('put_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('put_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_category', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_chart_category', 'name', $params{ name });
    $utils->initialize('put_chart_category', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_category', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_chart_category', 'name');
    }
};

subtest 'put_chart_category invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('put_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('put_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('put_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_category', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_chart_category', 'slide_index', $params{ slide_index });
    $utils->initialize('put_chart_category', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_category', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_category', 'slide_index');
    }
};

subtest 'put_chart_category invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('put_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('put_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('put_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_category', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_chart_category', 'shape_index', $params{ shape_index });
    $utils->initialize('put_chart_category', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_category', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_category', 'shape_index');
    }
};

subtest 'put_chart_category invalid category_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('put_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('put_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('put_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_category', 'storage', 'string'));
    $params{ category_index } = $utils->invalidize_param_value('put_chart_category', 'category_index', $params{ category_index });
    $utils->initialize('put_chart_category', 'category_index', $params{ category_index });

    eval {
        my $result = $utils->{api}->put_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_category', 'category_index', $params{ category_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_category', 'category_index');
    }
};

subtest 'put_chart_category invalid category' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('put_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('put_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('put_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_category', 'storage', 'string'));
    $params{ category } = $utils->invalidize_param_value('put_chart_category', 'category', $params{ category });
    $utils->initialize('put_chart_category', 'category', $params{ category });

    eval {
        my $result = $utils->{api}->put_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_category', 'category', $params{ category }, $@);
    } else {
        $utils->assert_no_error('put_chart_category', 'category');
    }
};

subtest 'put_chart_category invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('put_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('put_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('put_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_category', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_chart_category', 'password', $params{ password });
    $utils->initialize('put_chart_category', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_category', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_chart_category', 'password');
    }
};

subtest 'put_chart_category invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('put_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('put_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('put_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_category', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_chart_category', 'folder', $params{ folder });
    $utils->initialize('put_chart_category', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_category', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_chart_category', 'folder');
    }
};

subtest 'put_chart_category invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('put_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('put_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('put_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_category', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_chart_category', 'storage', $params{ storage });
    $utils->initialize('put_chart_category', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_category', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_chart_category', 'storage');
    }
};

#
# put_chart_data_point test
#
subtest 'put_chart_data_point' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $utils->initialize('put_chart_data_point', '');
    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        fail("put_chart_data_point raised an exception: $@");
    }
    pass();
};

subtest 'put_chart_data_point invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_chart_data_point', 'name', $params{ name });
    $utils->initialize('put_chart_data_point', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_data_point', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_chart_data_point', 'name');
    }
};

subtest 'put_chart_data_point invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_chart_data_point', 'slide_index', $params{ slide_index });
    $utils->initialize('put_chart_data_point', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_data_point', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_data_point', 'slide_index');
    }
};

subtest 'put_chart_data_point invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_chart_data_point', 'shape_index', $params{ shape_index });
    $utils->initialize('put_chart_data_point', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_data_point', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_data_point', 'shape_index');
    }
};

subtest 'put_chart_data_point invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('put_chart_data_point', 'series_index', $params{ series_index });
    $utils->initialize('put_chart_data_point', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_data_point', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_data_point', 'series_index');
    }
};

subtest 'put_chart_data_point invalid point_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $params{ point_index } = $utils->invalidize_param_value('put_chart_data_point', 'point_index', $params{ point_index });
    $utils->initialize('put_chart_data_point', 'point_index', $params{ point_index });

    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_data_point', 'point_index', $params{ point_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_data_point', 'point_index');
    }
};

subtest 'put_chart_data_point invalid data_point' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $params{ data_point } = $utils->invalidize_param_value('put_chart_data_point', 'data_point', $params{ data_point });
    $utils->initialize('put_chart_data_point', 'data_point', $params{ data_point });

    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_data_point', 'data_point', $params{ data_point }, $@);
    } else {
        $utils->assert_no_error('put_chart_data_point', 'data_point');
    }
};

subtest 'put_chart_data_point invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_chart_data_point', 'password', $params{ password });
    $utils->initialize('put_chart_data_point', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_data_point', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_chart_data_point', 'password');
    }
};

subtest 'put_chart_data_point invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_chart_data_point', 'folder', $params{ folder });
    $utils->initialize('put_chart_data_point', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_data_point', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_chart_data_point', 'folder');
    }
};

subtest 'put_chart_data_point invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('put_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('put_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('put_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_data_point', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_chart_data_point', 'storage', $params{ storage });
    $utils->initialize('put_chart_data_point', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_data_point', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_chart_data_point', 'storage');
    }
};

#
# put_chart_series test
#
subtest 'put_chart_series' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('put_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('put_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_series', 'storage', 'string'));
    $utils->initialize('put_chart_series', '');
    eval {
        my $result = $utils->{api}->put_chart_series(%params);
    };
    if ($@) {
        fail("put_chart_series raised an exception: $@");
    }
    pass();
};

subtest 'put_chart_series invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('put_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('put_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_series', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_chart_series', 'name', $params{ name });
    $utils->initialize('put_chart_series', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_series', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_chart_series', 'name');
    }
};

subtest 'put_chart_series invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('put_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('put_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_series', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_chart_series', 'slide_index', $params{ slide_index });
    $utils->initialize('put_chart_series', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_series', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_series', 'slide_index');
    }
};

subtest 'put_chart_series invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('put_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('put_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_series', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_chart_series', 'shape_index', $params{ shape_index });
    $utils->initialize('put_chart_series', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_series', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_series', 'shape_index');
    }
};

subtest 'put_chart_series invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('put_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('put_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_series', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('put_chart_series', 'series_index', $params{ series_index });
    $utils->initialize('put_chart_series', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->put_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_series', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('put_chart_series', 'series_index');
    }
};

subtest 'put_chart_series invalid series' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('put_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('put_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_series', 'storage', 'string'));
    $params{ series } = $utils->invalidize_param_value('put_chart_series', 'series', $params{ series });
    $utils->initialize('put_chart_series', 'series', $params{ series });

    eval {
        my $result = $utils->{api}->put_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_series', 'series', $params{ series }, $@);
    } else {
        $utils->assert_no_error('put_chart_series', 'series');
    }
};

subtest 'put_chart_series invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('put_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('put_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_series', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_chart_series', 'password', $params{ password });
    $utils->initialize('put_chart_series', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_series', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_chart_series', 'password');
    }
};

subtest 'put_chart_series invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('put_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('put_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_series', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_chart_series', 'folder', $params{ folder });
    $utils->initialize('put_chart_series', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_series', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_chart_series', 'folder');
    }
};

subtest 'put_chart_series invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('put_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('put_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('put_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('put_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('put_chart_series', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_chart_series', 'storage', $params{ storage });
    $utils->initialize('put_chart_series', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('put_chart_series', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_chart_series', 'storage');
    }
};

#
# put_layout_slide test
#
subtest 'put_layout_slide' => sub {
    my %params = ('name' => $utils->get_param_value('put_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('put_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_layout_slide', 'storage', 'string'));
    $utils->initialize('put_layout_slide', '');
    eval {
        my $result = $utils->{api}->put_layout_slide(%params);
    };
    if ($@) {
        fail("put_layout_slide raised an exception: $@");
    }
    pass();
};

subtest 'put_layout_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('put_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_layout_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_layout_slide', 'name', $params{ name });
    $utils->initialize('put_layout_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_layout_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_layout_slide', 'name');
    }
};

subtest 'put_layout_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('put_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_layout_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_layout_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('put_layout_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_layout_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_layout_slide', 'slide_index');
    }
};

subtest 'put_layout_slide invalid slide_dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('put_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_layout_slide', 'storage', 'string'));
    $params{ slide_dto } = $utils->invalidize_param_value('put_layout_slide', 'slide_dto', $params{ slide_dto });
    $utils->initialize('put_layout_slide', 'slide_dto', $params{ slide_dto });

    eval {
        my $result = $utils->{api}->put_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_layout_slide', 'slide_dto', $params{ slide_dto }, $@);
    } else {
        $utils->assert_no_error('put_layout_slide', 'slide_dto');
    }
};

subtest 'put_layout_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('put_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_layout_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_layout_slide', 'password', $params{ password });
    $utils->initialize('put_layout_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_layout_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_layout_slide', 'password');
    }
};

subtest 'put_layout_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('put_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_layout_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_layout_slide', 'folder', $params{ folder });
    $utils->initialize('put_layout_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_layout_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_layout_slide', 'folder');
    }
};

subtest 'put_layout_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('put_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_layout_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_layout_slide', 'storage', $params{ storage });
    $utils->initialize('put_layout_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_layout_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_layout_slide', 'storage');
    }
};

#
# put_notes_slide_header_footer test
#
subtest 'put_notes_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('put_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_header_footer', 'folder', 'string'));
    $utils->initialize('put_notes_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->put_notes_slide_header_footer(%params);
    };
    if ($@) {
        fail("put_notes_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'put_notes_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('put_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_header_footer', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_notes_slide_header_footer', 'name', $params{ name });
    $utils->initialize('put_notes_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_header_footer', 'name');
    }
};

subtest 'put_notes_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('put_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_header_footer', 'folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_notes_slide_header_footer', 'slide_index', $params{ slide_index });
    $utils->initialize('put_notes_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_header_footer', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_header_footer', 'slide_index');
    }
};

subtest 'put_notes_slide_header_footer invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('put_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_header_footer', 'folder', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_notes_slide_header_footer', 'dto', $params{ dto });
    $utils->initialize('put_notes_slide_header_footer', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_header_footer', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_header_footer', 'dto');
    }
};

subtest 'put_notes_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('put_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_header_footer', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_notes_slide_header_footer', 'password', $params{ password });
    $utils->initialize('put_notes_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_header_footer', 'password');
    }
};

subtest 'put_notes_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('put_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_header_footer', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_notes_slide_header_footer', 'storage', $params{ storage });
    $utils->initialize('put_notes_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_header_footer', 'storage');
    }
};

subtest 'put_notes_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('put_notes_slide_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_header_footer', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_notes_slide_header_footer', 'folder', $params{ folder });
    $utils->initialize('put_notes_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_header_footer', 'folder');
    }
};

#
# put_notes_slide_shape_save_as test
#
subtest 'put_notes_slide_shape_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $utils->initialize('put_notes_slide_shape_save_as', '');
    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        fail("put_notes_slide_shape_save_as raised an exception: $@");
    }
    pass();
};

subtest 'put_notes_slide_shape_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'name', $params{ name });
    $utils->initialize('put_notes_slide_shape_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'name');
    }
};

subtest 'put_notes_slide_shape_save_as invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'slide_index', $params{ slide_index });
    $utils->initialize('put_notes_slide_shape_save_as', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'slide_index');
    }
};

subtest 'put_notes_slide_shape_save_as invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'shape_index', $params{ shape_index });
    $utils->initialize('put_notes_slide_shape_save_as', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'shape_index');
    }
};

subtest 'put_notes_slide_shape_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'format', $params{ format });
    $utils->initialize('put_notes_slide_shape_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'format');
    }
};

subtest 'put_notes_slide_shape_save_as invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'out_path', $params{ out_path });
    $utils->initialize('put_notes_slide_shape_save_as', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'out_path');
    }
};

subtest 'put_notes_slide_shape_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'options', $params{ options });
    $utils->initialize('put_notes_slide_shape_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'options');
    }
};

subtest 'put_notes_slide_shape_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'password', $params{ password });
    $utils->initialize('put_notes_slide_shape_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'password');
    }
};

subtest 'put_notes_slide_shape_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'folder', $params{ folder });
    $utils->initialize('put_notes_slide_shape_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'folder');
    }
};

subtest 'put_notes_slide_shape_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'storage', $params{ storage });
    $utils->initialize('put_notes_slide_shape_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'storage');
    }
};

subtest 'put_notes_slide_shape_save_as invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'scale_x', $params{ scale_x });
    $utils->initialize('put_notes_slide_shape_save_as', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'scale_x');
    }
};

subtest 'put_notes_slide_shape_save_as invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'scale_y', $params{ scale_y });
    $utils->initialize('put_notes_slide_shape_save_as', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'scale_y');
    }
};

subtest 'put_notes_slide_shape_save_as invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'bounds', $params{ bounds });
    $utils->initialize('put_notes_slide_shape_save_as', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'bounds');
    }
};

subtest 'put_notes_slide_shape_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_notes_slide_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_notes_slide_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_notes_slide_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_notes_slide_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_notes_slide_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_notes_slide_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_notes_slide_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_notes_slide_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_notes_slide_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_notes_slide_shape_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('put_notes_slide_shape_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('put_notes_slide_shape_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->put_notes_slide_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_notes_slide_shape_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('put_notes_slide_shape_save_as', 'fonts_folder');
    }
};

#
# put_presentation_merge test
#
subtest 'put_presentation_merge' => sub {
    my %params = ('name' => $utils->get_param_value('put_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('put_presentation_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('put_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('put_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('put_presentation_merge', 'folder', 'string'));
    $utils->initialize('put_presentation_merge', '');
    eval {
        my $result = $utils->{api}->put_presentation_merge(%params);
    };
    if ($@) {
        fail("put_presentation_merge raised an exception: $@");
    }
    pass();
};

subtest 'put_presentation_merge invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('put_presentation_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('put_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('put_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('put_presentation_merge', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_presentation_merge', 'name', $params{ name });
    $utils->initialize('put_presentation_merge', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('put_presentation_merge', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_presentation_merge', 'name');
    }
};

subtest 'put_presentation_merge invalid request' => sub {
    my %params = ('name' => $utils->get_param_value('put_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('put_presentation_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('put_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('put_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('put_presentation_merge', 'folder', 'string'));
    $params{ request } = $utils->invalidize_param_value('put_presentation_merge', 'request', $params{ request });
    $utils->initialize('put_presentation_merge', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->put_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('put_presentation_merge', 'request', $params{ request }, $@);
    } else {
        $utils->assert_no_error('put_presentation_merge', 'request');
    }
};

subtest 'put_presentation_merge invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('put_presentation_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('put_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('put_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('put_presentation_merge', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_presentation_merge', 'password', $params{ password });
    $utils->initialize('put_presentation_merge', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('put_presentation_merge', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_presentation_merge', 'password');
    }
};

subtest 'put_presentation_merge invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('put_presentation_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('put_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('put_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('put_presentation_merge', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_presentation_merge', 'storage', $params{ storage });
    $utils->initialize('put_presentation_merge', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('put_presentation_merge', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_presentation_merge', 'storage');
    }
};

subtest 'put_presentation_merge invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_presentation_merge', 'name', 'string'), 'request' => $utils->get_param_value('put_presentation_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('put_presentation_merge', 'password', 'string'), 'storage' => $utils->get_param_value('put_presentation_merge', 'storage', 'string'), 'folder' => $utils->get_param_value('put_presentation_merge', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_presentation_merge', 'folder', $params{ folder });
    $utils->initialize('put_presentation_merge', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_presentation_merge(%params);
    };
    if ($@) {
        $utils->assert_error('put_presentation_merge', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_presentation_merge', 'folder');
    }
};

#
# put_section test
#
subtest 'put_section' => sub {
    my %params = ('name' => $utils->get_param_value('put_section', 'name', 'string'), 'section_index' => $utils->get_param_value('put_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('put_section', 'section_name', 'string'), 'password' => $utils->get_param_value('put_section', 'password', 'string'), 'folder' => $utils->get_param_value('put_section', 'folder', 'string'), 'storage' => $utils->get_param_value('put_section', 'storage', 'string'));
    $utils->initialize('put_section', '');
    eval {
        my $result = $utils->{api}->put_section(%params);
    };
    if ($@) {
        fail("put_section raised an exception: $@");
    }
    pass();
};

subtest 'put_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_section', 'name', 'string'), 'section_index' => $utils->get_param_value('put_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('put_section', 'section_name', 'string'), 'password' => $utils->get_param_value('put_section', 'password', 'string'), 'folder' => $utils->get_param_value('put_section', 'folder', 'string'), 'storage' => $utils->get_param_value('put_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_section', 'name', $params{ name });
    $utils->initialize('put_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_section(%params);
    };
    if ($@) {
        $utils->assert_error('put_section', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_section', 'name');
    }
};

subtest 'put_section invalid section_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_section', 'name', 'string'), 'section_index' => $utils->get_param_value('put_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('put_section', 'section_name', 'string'), 'password' => $utils->get_param_value('put_section', 'password', 'string'), 'folder' => $utils->get_param_value('put_section', 'folder', 'string'), 'storage' => $utils->get_param_value('put_section', 'storage', 'string'));
    $params{ section_index } = $utils->invalidize_param_value('put_section', 'section_index', $params{ section_index });
    $utils->initialize('put_section', 'section_index', $params{ section_index });

    eval {
        my $result = $utils->{api}->put_section(%params);
    };
    if ($@) {
        $utils->assert_error('put_section', 'section_index', $params{ section_index }, $@);
    } else {
        $utils->assert_no_error('put_section', 'section_index');
    }
};

subtest 'put_section invalid section_name' => sub {
    my %params = ('name' => $utils->get_param_value('put_section', 'name', 'string'), 'section_index' => $utils->get_param_value('put_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('put_section', 'section_name', 'string'), 'password' => $utils->get_param_value('put_section', 'password', 'string'), 'folder' => $utils->get_param_value('put_section', 'folder', 'string'), 'storage' => $utils->get_param_value('put_section', 'storage', 'string'));
    $params{ section_name } = $utils->invalidize_param_value('put_section', 'section_name', $params{ section_name });
    $utils->initialize('put_section', 'section_name', $params{ section_name });

    eval {
        my $result = $utils->{api}->put_section(%params);
    };
    if ($@) {
        $utils->assert_error('put_section', 'section_name', $params{ section_name }, $@);
    } else {
        $utils->assert_no_error('put_section', 'section_name');
    }
};

subtest 'put_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_section', 'name', 'string'), 'section_index' => $utils->get_param_value('put_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('put_section', 'section_name', 'string'), 'password' => $utils->get_param_value('put_section', 'password', 'string'), 'folder' => $utils->get_param_value('put_section', 'folder', 'string'), 'storage' => $utils->get_param_value('put_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_section', 'password', $params{ password });
    $utils->initialize('put_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_section(%params);
    };
    if ($@) {
        $utils->assert_error('put_section', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_section', 'password');
    }
};

subtest 'put_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_section', 'name', 'string'), 'section_index' => $utils->get_param_value('put_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('put_section', 'section_name', 'string'), 'password' => $utils->get_param_value('put_section', 'password', 'string'), 'folder' => $utils->get_param_value('put_section', 'folder', 'string'), 'storage' => $utils->get_param_value('put_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_section', 'folder', $params{ folder });
    $utils->initialize('put_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_section(%params);
    };
    if ($@) {
        $utils->assert_error('put_section', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_section', 'folder');
    }
};

subtest 'put_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_section', 'name', 'string'), 'section_index' => $utils->get_param_value('put_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('put_section', 'section_name', 'string'), 'password' => $utils->get_param_value('put_section', 'password', 'string'), 'folder' => $utils->get_param_value('put_section', 'folder', 'string'), 'storage' => $utils->get_param_value('put_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_section', 'storage', $params{ storage });
    $utils->initialize('put_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_section(%params);
    };
    if ($@) {
        $utils->assert_error('put_section', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_section', 'storage');
    }
};

#
# put_sections test
#
subtest 'put_sections' => sub {
    my %params = ('name' => $utils->get_param_value('put_sections', 'name', 'string'), 'sections' => $utils->get_param_value('put_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('put_sections', 'password', 'string'), 'folder' => $utils->get_param_value('put_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('put_sections', 'storage', 'string'));
    $utils->initialize('put_sections', '');
    eval {
        my $result = $utils->{api}->put_sections(%params);
    };
    if ($@) {
        fail("put_sections raised an exception: $@");
    }
    pass();
};

subtest 'put_sections invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_sections', 'name', 'string'), 'sections' => $utils->get_param_value('put_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('put_sections', 'password', 'string'), 'folder' => $utils->get_param_value('put_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('put_sections', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_sections', 'name', $params{ name });
    $utils->initialize('put_sections', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_sections(%params);
    };
    if ($@) {
        $utils->assert_error('put_sections', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_sections', 'name');
    }
};

subtest 'put_sections invalid sections' => sub {
    my %params = ('name' => $utils->get_param_value('put_sections', 'name', 'string'), 'sections' => $utils->get_param_value('put_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('put_sections', 'password', 'string'), 'folder' => $utils->get_param_value('put_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('put_sections', 'storage', 'string'));
    $params{ sections } = $utils->invalidize_param_value('put_sections', 'sections', $params{ sections });
    $utils->initialize('put_sections', 'sections', $params{ sections });

    eval {
        my $result = $utils->{api}->put_sections(%params);
    };
    if ($@) {
        $utils->assert_error('put_sections', 'sections', $params{ sections }, $@);
    } else {
        $utils->assert_no_error('put_sections', 'sections');
    }
};

subtest 'put_sections invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_sections', 'name', 'string'), 'sections' => $utils->get_param_value('put_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('put_sections', 'password', 'string'), 'folder' => $utils->get_param_value('put_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('put_sections', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_sections', 'password', $params{ password });
    $utils->initialize('put_sections', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_sections(%params);
    };
    if ($@) {
        $utils->assert_error('put_sections', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_sections', 'password');
    }
};

subtest 'put_sections invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_sections', 'name', 'string'), 'sections' => $utils->get_param_value('put_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('put_sections', 'password', 'string'), 'folder' => $utils->get_param_value('put_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('put_sections', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_sections', 'folder', $params{ folder });
    $utils->initialize('put_sections', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_sections(%params);
    };
    if ($@) {
        $utils->assert_error('put_sections', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_sections', 'folder');
    }
};

subtest 'put_sections invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_sections', 'name', 'string'), 'sections' => $utils->get_param_value('put_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('put_sections', 'password', 'string'), 'folder' => $utils->get_param_value('put_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('put_sections', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_sections', 'storage', $params{ storage });
    $utils->initialize('put_sections', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_sections(%params);
    };
    if ($@) {
        $utils->assert_error('put_sections', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_sections', 'storage');
    }
};

#
# put_set_paragraph_portion_properties test
#
subtest 'put_set_paragraph_portion_properties' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $utils->initialize('put_set_paragraph_portion_properties', '');
    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        fail("put_set_paragraph_portion_properties raised an exception: $@");
    }
    pass();
};

subtest 'put_set_paragraph_portion_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_set_paragraph_portion_properties', 'name', $params{ name });
    $utils->initialize('put_set_paragraph_portion_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_portion_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_portion_properties', 'name');
    }
};

subtest 'put_set_paragraph_portion_properties invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_set_paragraph_portion_properties', 'slide_index', $params{ slide_index });
    $utils->initialize('put_set_paragraph_portion_properties', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_portion_properties', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_portion_properties', 'slide_index');
    }
};

subtest 'put_set_paragraph_portion_properties invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_set_paragraph_portion_properties', 'shape_index', $params{ shape_index });
    $utils->initialize('put_set_paragraph_portion_properties', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_portion_properties', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_portion_properties', 'shape_index');
    }
};

subtest 'put_set_paragraph_portion_properties invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('put_set_paragraph_portion_properties', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('put_set_paragraph_portion_properties', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_portion_properties', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_portion_properties', 'paragraph_index');
    }
};

subtest 'put_set_paragraph_portion_properties invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('put_set_paragraph_portion_properties', 'portion_index', $params{ portion_index });
    $utils->initialize('put_set_paragraph_portion_properties', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_portion_properties', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_portion_properties', 'portion_index');
    }
};

subtest 'put_set_paragraph_portion_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_set_paragraph_portion_properties', 'dto', $params{ dto });
    $utils->initialize('put_set_paragraph_portion_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_portion_properties', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_portion_properties', 'dto');
    }
};

subtest 'put_set_paragraph_portion_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_set_paragraph_portion_properties', 'password', $params{ password });
    $utils->initialize('put_set_paragraph_portion_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_portion_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_portion_properties', 'password');
    }
};

subtest 'put_set_paragraph_portion_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_set_paragraph_portion_properties', 'folder', $params{ folder });
    $utils->initialize('put_set_paragraph_portion_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_portion_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_portion_properties', 'folder');
    }
};

subtest 'put_set_paragraph_portion_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_portion_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_set_paragraph_portion_properties', 'storage', $params{ storage });
    $utils->initialize('put_set_paragraph_portion_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_set_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_portion_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_portion_properties', 'storage');
    }
};

#
# put_set_paragraph_properties test
#
subtest 'put_set_paragraph_properties' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_properties', 'storage', 'string'));
    $utils->initialize('put_set_paragraph_properties', '');
    eval {
        my $result = $utils->{api}->put_set_paragraph_properties(%params);
    };
    if ($@) {
        fail("put_set_paragraph_properties raised an exception: $@");
    }
    pass();
};

subtest 'put_set_paragraph_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_set_paragraph_properties', 'name', $params{ name });
    $utils->initialize('put_set_paragraph_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_set_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_properties', 'name');
    }
};

subtest 'put_set_paragraph_properties invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_properties', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_set_paragraph_properties', 'slide_index', $params{ slide_index });
    $utils->initialize('put_set_paragraph_properties', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_set_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_properties', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_properties', 'slide_index');
    }
};

subtest 'put_set_paragraph_properties invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_properties', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_set_paragraph_properties', 'shape_index', $params{ shape_index });
    $utils->initialize('put_set_paragraph_properties', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_set_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_properties', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_properties', 'shape_index');
    }
};

subtest 'put_set_paragraph_properties invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_properties', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('put_set_paragraph_properties', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('put_set_paragraph_properties', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->put_set_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_properties', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_properties', 'paragraph_index');
    }
};

subtest 'put_set_paragraph_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_set_paragraph_properties', 'dto', $params{ dto });
    $utils->initialize('put_set_paragraph_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_set_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_properties', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_properties', 'dto');
    }
};

subtest 'put_set_paragraph_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_set_paragraph_properties', 'password', $params{ password });
    $utils->initialize('put_set_paragraph_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_set_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_properties', 'password');
    }
};

subtest 'put_set_paragraph_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_set_paragraph_properties', 'folder', $params{ folder });
    $utils->initialize('put_set_paragraph_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_set_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_properties', 'folder');
    }
};

subtest 'put_set_paragraph_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_paragraph_properties', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_set_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_paragraph_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_set_paragraph_properties', 'storage', $params{ storage });
    $utils->initialize('put_set_paragraph_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_set_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_paragraph_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_set_paragraph_properties', 'storage');
    }
};

#
# put_set_subshape_paragraph_portion_properties test
#
subtest 'put_set_subshape_paragraph_portion_properties' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $utils->initialize('put_set_subshape_paragraph_portion_properties', '');
    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        fail("put_set_subshape_paragraph_portion_properties raised an exception: $@");
    }
    pass();
};

subtest 'put_set_subshape_paragraph_portion_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'name', $params{ name });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'name');
    }
};

subtest 'put_set_subshape_paragraph_portion_properties invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', $params{ slide_index });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'slide_index');
    }
};

subtest 'put_set_subshape_paragraph_portion_properties invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'path', $params{ path });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'path');
    }
};

subtest 'put_set_subshape_paragraph_portion_properties invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', $params{ shape_index });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'shape_index');
    }
};

subtest 'put_set_subshape_paragraph_portion_properties invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'paragraph_index');
    }
};

subtest 'put_set_subshape_paragraph_portion_properties invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', $params{ portion_index });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'portion_index');
    }
};

subtest 'put_set_subshape_paragraph_portion_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'dto', $params{ dto });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'dto');
    }
};

subtest 'put_set_subshape_paragraph_portion_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'password', $params{ password });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'password');
    }
};

subtest 'put_set_subshape_paragraph_portion_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'folder', $params{ folder });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'folder');
    }
};

subtest 'put_set_subshape_paragraph_portion_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_portion_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_set_subshape_paragraph_portion_properties', 'storage', $params{ storage });
    $utils->initialize('put_set_subshape_paragraph_portion_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_portion_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_portion_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_portion_properties', 'storage');
    }
};

#
# put_set_subshape_paragraph_properties test
#
subtest 'put_set_subshape_paragraph_properties' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $utils->initialize('put_set_subshape_paragraph_properties', '');
    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        fail("put_set_subshape_paragraph_properties raised an exception: $@");
    }
    pass();
};

subtest 'put_set_subshape_paragraph_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_set_subshape_paragraph_properties', 'name', $params{ name });
    $utils->initialize('put_set_subshape_paragraph_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_properties', 'name');
    }
};

subtest 'put_set_subshape_paragraph_properties invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_set_subshape_paragraph_properties', 'slide_index', $params{ slide_index });
    $utils->initialize('put_set_subshape_paragraph_properties', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_properties', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_properties', 'slide_index');
    }
};

subtest 'put_set_subshape_paragraph_properties invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('put_set_subshape_paragraph_properties', 'path', $params{ path });
    $utils->initialize('put_set_subshape_paragraph_properties', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_properties', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_properties', 'path');
    }
};

subtest 'put_set_subshape_paragraph_properties invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_set_subshape_paragraph_properties', 'shape_index', $params{ shape_index });
    $utils->initialize('put_set_subshape_paragraph_properties', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_properties', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_properties', 'shape_index');
    }
};

subtest 'put_set_subshape_paragraph_properties invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('put_set_subshape_paragraph_properties', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_properties', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_properties', 'paragraph_index');
    }
};

subtest 'put_set_subshape_paragraph_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_set_subshape_paragraph_properties', 'dto', $params{ dto });
    $utils->initialize('put_set_subshape_paragraph_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_properties', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_properties', 'dto');
    }
};

subtest 'put_set_subshape_paragraph_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_set_subshape_paragraph_properties', 'password', $params{ password });
    $utils->initialize('put_set_subshape_paragraph_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_properties', 'password');
    }
};

subtest 'put_set_subshape_paragraph_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_set_subshape_paragraph_properties', 'folder', $params{ folder });
    $utils->initialize('put_set_subshape_paragraph_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_properties', 'folder');
    }
};

subtest 'put_set_subshape_paragraph_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_set_subshape_paragraph_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_set_subshape_paragraph_properties', 'storage', $params{ storage });
    $utils->initialize('put_set_subshape_paragraph_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_set_subshape_paragraph_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_set_subshape_paragraph_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_set_subshape_paragraph_properties', 'storage');
    }
};

#
# put_shape_save_as test
#
subtest 'put_shape_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $utils->initialize('put_shape_save_as', '');
    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        fail("put_shape_save_as raised an exception: $@");
    }
    pass();
};

subtest 'put_shape_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_shape_save_as', 'name', $params{ name });
    $utils->initialize('put_shape_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'name');
    }
};

subtest 'put_shape_save_as invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_shape_save_as', 'slide_index', $params{ slide_index });
    $utils->initialize('put_shape_save_as', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'slide_index');
    }
};

subtest 'put_shape_save_as invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_shape_save_as', 'shape_index', $params{ shape_index });
    $utils->initialize('put_shape_save_as', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'shape_index');
    }
};

subtest 'put_shape_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('put_shape_save_as', 'format', $params{ format });
    $utils->initialize('put_shape_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'format');
    }
};

subtest 'put_shape_save_as invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('put_shape_save_as', 'out_path', $params{ out_path });
    $utils->initialize('put_shape_save_as', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'out_path');
    }
};

subtest 'put_shape_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('put_shape_save_as', 'options', $params{ options });
    $utils->initialize('put_shape_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'options');
    }
};

subtest 'put_shape_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_shape_save_as', 'password', $params{ password });
    $utils->initialize('put_shape_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'password');
    }
};

subtest 'put_shape_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_shape_save_as', 'folder', $params{ folder });
    $utils->initialize('put_shape_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'folder');
    }
};

subtest 'put_shape_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_shape_save_as', 'storage', $params{ storage });
    $utils->initialize('put_shape_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'storage');
    }
};

subtest 'put_shape_save_as invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('put_shape_save_as', 'scale_x', $params{ scale_x });
    $utils->initialize('put_shape_save_as', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'scale_x');
    }
};

subtest 'put_shape_save_as invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('put_shape_save_as', 'scale_y', $params{ scale_y });
    $utils->initialize('put_shape_save_as', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'scale_y');
    }
};

subtest 'put_shape_save_as invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('put_shape_save_as', 'bounds', $params{ bounds });
    $utils->initialize('put_shape_save_as', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'bounds');
    }
};

subtest 'put_shape_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_shape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_shape_save_as', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_shape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_shape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_shape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_shape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_shape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_shape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_shape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_shape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_shape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_shape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_shape_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('put_shape_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('put_shape_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->put_shape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_shape_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('put_shape_save_as', 'fonts_folder');
    }
};

#
# put_slide_animation test
#
subtest 'put_slide_animation' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('put_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('put_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation', 'storage', 'string'));
    $utils->initialize('put_slide_animation', '');
    eval {
        my $result = $utils->{api}->put_slide_animation(%params);
    };
    if ($@) {
        fail("put_slide_animation raised an exception: $@");
    }
    pass();
};

subtest 'put_slide_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('put_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('put_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slide_animation', 'name', $params{ name });
    $utils->initialize('put_slide_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation', 'name');
    }
};

subtest 'put_slide_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('put_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('put_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slide_animation', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slide_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation', 'slide_index');
    }
};

subtest 'put_slide_animation invalid animation' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('put_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('put_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation', 'storage', 'string'));
    $params{ animation } = $utils->invalidize_param_value('put_slide_animation', 'animation', $params{ animation });
    $utils->initialize('put_slide_animation', 'animation', $params{ animation });

    eval {
        my $result = $utils->{api}->put_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation', 'animation', $params{ animation }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation', 'animation');
    }
};

subtest 'put_slide_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('put_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('put_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slide_animation', 'password', $params{ password });
    $utils->initialize('put_slide_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation', 'password');
    }
};

subtest 'put_slide_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('put_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('put_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slide_animation', 'folder', $params{ folder });
    $utils->initialize('put_slide_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation', 'folder');
    }
};

subtest 'put_slide_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('put_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('put_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slide_animation', 'storage', $params{ storage });
    $utils->initialize('put_slide_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation', 'storage');
    }
};

#
# put_slide_animation_effect test
#
subtest 'put_slide_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_effect', 'storage', 'string'));
    $utils->initialize('put_slide_animation_effect', '');
    eval {
        my $result = $utils->{api}->put_slide_animation_effect(%params);
    };
    if ($@) {
        fail("put_slide_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'put_slide_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slide_animation_effect', 'name', $params{ name });
    $utils->initialize('put_slide_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_effect', 'name');
    }
};

subtest 'put_slide_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slide_animation_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slide_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_effect', 'slide_index');
    }
};

subtest 'put_slide_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('put_slide_animation_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('put_slide_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->put_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_effect', 'effect_index');
    }
};

subtest 'put_slide_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('put_slide_animation_effect', 'effect', $params{ effect });
    $utils->initialize('put_slide_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->put_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_effect', 'effect');
    }
};

subtest 'put_slide_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slide_animation_effect', 'password', $params{ password });
    $utils->initialize('put_slide_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_effect', 'password');
    }
};

subtest 'put_slide_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slide_animation_effect', 'folder', $params{ folder });
    $utils->initialize('put_slide_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_effect', 'folder');
    }
};

subtest 'put_slide_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slide_animation_effect', 'storage', $params{ storage });
    $utils->initialize('put_slide_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_effect', 'storage');
    }
};

#
# put_slide_animation_interactive_sequence_effect test
#
subtest 'put_slide_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('put_slide_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->put_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("put_slide_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'put_slide_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slide_animation_interactive_sequence_effect', 'name', $params{ name });
    $utils->initialize('put_slide_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_interactive_sequence_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_interactive_sequence_effect', 'name');
    }
};

subtest 'put_slide_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_interactive_sequence_effect', 'slide_index');
    }
};

subtest 'put_slide_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });
    $utils->initialize('put_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->put_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_interactive_sequence_effect', 'sequence_index');
    }
};

subtest 'put_slide_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('put_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->put_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_interactive_sequence_effect', 'effect_index');
    }
};

subtest 'put_slide_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('put_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });
    $utils->initialize('put_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->put_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_interactive_sequence_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_interactive_sequence_effect', 'effect');
    }
};

subtest 'put_slide_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slide_animation_interactive_sequence_effect', 'password', $params{ password });
    $utils->initialize('put_slide_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_interactive_sequence_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_interactive_sequence_effect', 'password');
    }
};

subtest 'put_slide_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });
    $utils->initialize('put_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_interactive_sequence_effect', 'folder');
    }
};

subtest 'put_slide_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });
    $utils->initialize('put_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slide_animation_interactive_sequence_effect', 'storage');
    }
};

#
# put_slide_header_footer test
#
subtest 'put_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_header_footer', 'storage', 'string'));
    $utils->initialize('put_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->put_slide_header_footer(%params);
    };
    if ($@) {
        fail("put_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'put_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slide_header_footer', 'name', $params{ name });
    $utils->initialize('put_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slide_header_footer', 'name');
    }
};

subtest 'put_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slide_header_footer', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_header_footer', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_header_footer', 'slide_index');
    }
};

subtest 'put_slide_header_footer invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_header_footer', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_slide_header_footer', 'dto', $params{ dto });
    $utils->initialize('put_slide_header_footer', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_header_footer', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_slide_header_footer', 'dto');
    }
};

subtest 'put_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slide_header_footer', 'password', $params{ password });
    $utils->initialize('put_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slide_header_footer', 'password');
    }
};

subtest 'put_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slide_header_footer', 'folder', $params{ folder });
    $utils->initialize('put_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slide_header_footer', 'folder');
    }
};

subtest 'put_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slide_header_footer', 'storage', $params{ storage });
    $utils->initialize('put_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slide_header_footer', 'storage');
    }
};

#
# put_slide_save_as test
#
subtest 'put_slide_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $utils->initialize('put_slide_save_as', '');
    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        fail("put_slide_save_as raised an exception: $@");
    }
    pass();
};

subtest 'put_slide_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slide_save_as', 'name', $params{ name });
    $utils->initialize('put_slide_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'name');
    }
};

subtest 'put_slide_save_as invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slide_save_as', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slide_save_as', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'slide_index');
    }
};

subtest 'put_slide_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('put_slide_save_as', 'format', $params{ format });
    $utils->initialize('put_slide_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'format');
    }
};

subtest 'put_slide_save_as invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('put_slide_save_as', 'out_path', $params{ out_path });
    $utils->initialize('put_slide_save_as', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'out_path');
    }
};

subtest 'put_slide_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('put_slide_save_as', 'options', $params{ options });
    $utils->initialize('put_slide_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'options');
    }
};

subtest 'put_slide_save_as invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('put_slide_save_as', 'width', $params{ width });
    $utils->initialize('put_slide_save_as', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'width');
    }
};

subtest 'put_slide_save_as invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('put_slide_save_as', 'height', $params{ height });
    $utils->initialize('put_slide_save_as', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'height');
    }
};

subtest 'put_slide_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slide_save_as', 'password', $params{ password });
    $utils->initialize('put_slide_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'password');
    }
};

subtest 'put_slide_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slide_save_as', 'folder', $params{ folder });
    $utils->initialize('put_slide_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'folder');
    }
};

subtest 'put_slide_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slide_save_as', 'storage', $params{ storage });
    $utils->initialize('put_slide_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'storage');
    }
};

subtest 'put_slide_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_save_as', 'slide_index', 'int'), 'format' => $utils->get_param_value('put_slide_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slide_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_slide_save_as', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('put_slide_save_as', 'width', 'int'), 'height' => $utils->get_param_value('put_slide_save_as', 'height', 'int'), 'password' => $utils->get_param_value('put_slide_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_save_as', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('put_slide_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('put_slide_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('put_slide_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->put_slide_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('put_slide_save_as', 'fonts_folder');
    }
};

#
# put_slide_shape_info test
#
subtest 'put_slide_shape_info' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_shape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_shape_info', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_slide_shape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_shape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_shape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_shape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_shape_info', 'storage', 'string'));
    $utils->initialize('put_slide_shape_info', '');
    eval {
        my $result = $utils->{api}->put_slide_shape_info(%params);
    };
    if ($@) {
        fail("put_slide_shape_info raised an exception: $@");
    }
    pass();
};

subtest 'put_slide_shape_info invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_shape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_shape_info', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_slide_shape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_shape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_shape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_shape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_shape_info', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slide_shape_info', 'name', $params{ name });
    $utils->initialize('put_slide_shape_info', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slide_shape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_shape_info', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slide_shape_info', 'name');
    }
};

subtest 'put_slide_shape_info invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_shape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_shape_info', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_slide_shape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_shape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_shape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_shape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_shape_info', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slide_shape_info', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slide_shape_info', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slide_shape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_shape_info', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_shape_info', 'slide_index');
    }
};

subtest 'put_slide_shape_info invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_shape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_shape_info', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_slide_shape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_shape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_shape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_shape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_shape_info', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_slide_shape_info', 'shape_index', $params{ shape_index });
    $utils->initialize('put_slide_shape_info', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_slide_shape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_shape_info', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_shape_info', 'shape_index');
    }
};

subtest 'put_slide_shape_info invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_shape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_shape_info', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_slide_shape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_shape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_shape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_shape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_shape_info', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_slide_shape_info', 'dto', $params{ dto });
    $utils->initialize('put_slide_shape_info', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_slide_shape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_shape_info', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_slide_shape_info', 'dto');
    }
};

subtest 'put_slide_shape_info invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_shape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_shape_info', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_slide_shape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_shape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_shape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_shape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_shape_info', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slide_shape_info', 'password', $params{ password });
    $utils->initialize('put_slide_shape_info', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slide_shape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_shape_info', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slide_shape_info', 'password');
    }
};

subtest 'put_slide_shape_info invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_shape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_shape_info', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_slide_shape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_shape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_shape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_shape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_shape_info', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slide_shape_info', 'folder', $params{ folder });
    $utils->initialize('put_slide_shape_info', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slide_shape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_shape_info', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slide_shape_info', 'folder');
    }
};

subtest 'put_slide_shape_info invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_shape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_shape_info', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_slide_shape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_shape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_shape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_shape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_shape_info', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slide_shape_info', 'storage', $params{ storage });
    $utils->initialize('put_slide_shape_info', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slide_shape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_shape_info', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slide_shape_info', 'storage');
    }
};

#
# put_slide_subshape_info test
#
subtest 'put_slide_subshape_info' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_subshape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_subshape_info', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_slide_subshape_info', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_slide_subshape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_subshape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_subshape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_subshape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_subshape_info', 'storage', 'string'));
    $utils->initialize('put_slide_subshape_info', '');
    eval {
        my $result = $utils->{api}->put_slide_subshape_info(%params);
    };
    if ($@) {
        fail("put_slide_subshape_info raised an exception: $@");
    }
    pass();
};

subtest 'put_slide_subshape_info invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_subshape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_subshape_info', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_slide_subshape_info', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_slide_subshape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_subshape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_subshape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_subshape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_subshape_info', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slide_subshape_info', 'name', $params{ name });
    $utils->initialize('put_slide_subshape_info', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slide_subshape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_subshape_info', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slide_subshape_info', 'name');
    }
};

subtest 'put_slide_subshape_info invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_subshape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_subshape_info', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_slide_subshape_info', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_slide_subshape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_subshape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_subshape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_subshape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_subshape_info', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slide_subshape_info', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slide_subshape_info', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slide_subshape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_subshape_info', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_subshape_info', 'slide_index');
    }
};

subtest 'put_slide_subshape_info invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_subshape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_subshape_info', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_slide_subshape_info', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_slide_subshape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_subshape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_subshape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_subshape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_subshape_info', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('put_slide_subshape_info', 'path', $params{ path });
    $utils->initialize('put_slide_subshape_info', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->put_slide_subshape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_subshape_info', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('put_slide_subshape_info', 'path');
    }
};

subtest 'put_slide_subshape_info invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_subshape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_subshape_info', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_slide_subshape_info', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_slide_subshape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_subshape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_subshape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_subshape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_subshape_info', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_slide_subshape_info', 'shape_index', $params{ shape_index });
    $utils->initialize('put_slide_subshape_info', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_slide_subshape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_subshape_info', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_slide_subshape_info', 'shape_index');
    }
};

subtest 'put_slide_subshape_info invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_subshape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_subshape_info', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_slide_subshape_info', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_slide_subshape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_subshape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_subshape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_subshape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_subshape_info', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_slide_subshape_info', 'dto', $params{ dto });
    $utils->initialize('put_slide_subshape_info', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_slide_subshape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_subshape_info', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_slide_subshape_info', 'dto');
    }
};

subtest 'put_slide_subshape_info invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_subshape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_subshape_info', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_slide_subshape_info', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_slide_subshape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_subshape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_subshape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_subshape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_subshape_info', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slide_subshape_info', 'password', $params{ password });
    $utils->initialize('put_slide_subshape_info', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slide_subshape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_subshape_info', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slide_subshape_info', 'password');
    }
};

subtest 'put_slide_subshape_info invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_subshape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_subshape_info', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_slide_subshape_info', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_slide_subshape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_subshape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_subshape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_subshape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_subshape_info', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slide_subshape_info', 'folder', $params{ folder });
    $utils->initialize('put_slide_subshape_info', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slide_subshape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_subshape_info', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slide_subshape_info', 'folder');
    }
};

subtest 'put_slide_subshape_info invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slide_subshape_info', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slide_subshape_info', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_slide_subshape_info', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_slide_subshape_info', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_slide_subshape_info', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_slide_subshape_info', 'password', 'string'), 'folder' => $utils->get_param_value('put_slide_subshape_info', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slide_subshape_info', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slide_subshape_info', 'storage', $params{ storage });
    $utils->initialize('put_slide_subshape_info', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slide_subshape_info(%params);
    };
    if ($@) {
        $utils->assert_error('put_slide_subshape_info', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slide_subshape_info', 'storage');
    }
};

#
# put_slides_convert test
#
subtest 'put_slides_convert' => sub {
    my %params = ('document' => $utils->get_param_value('put_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('put_slides_convert', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slides_convert', 'out_path', 'string'), 'password' => $utils->get_param_value('put_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_convert', 'fonts_folder', 'string'));
    $utils->initialize('put_slides_convert', '');
    eval {
        my $result = $utils->{api}->put_slides_convert(%params);
    };
    if ($@) {
        fail("put_slides_convert raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_convert invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('put_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('put_slides_convert', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slides_convert', 'out_path', 'string'), 'password' => $utils->get_param_value('put_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_convert', 'fonts_folder', 'string'));
    $params{ document } = $utils->invalidize_param_value('put_slides_convert', 'document', $params{ document });
    $utils->initialize('put_slides_convert', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->put_slides_convert(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_convert', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('put_slides_convert', 'document');
    }
};

subtest 'put_slides_convert invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('put_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('put_slides_convert', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slides_convert', 'out_path', 'string'), 'password' => $utils->get_param_value('put_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_convert', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('put_slides_convert', 'format', $params{ format });
    $utils->initialize('put_slides_convert', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->put_slides_convert(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_convert', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('put_slides_convert', 'format');
    }
};

subtest 'put_slides_convert invalid out_path' => sub {
    my %params = ('document' => $utils->get_param_value('put_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('put_slides_convert', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slides_convert', 'out_path', 'string'), 'password' => $utils->get_param_value('put_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_convert', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('put_slides_convert', 'out_path', $params{ out_path });
    $utils->initialize('put_slides_convert', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->put_slides_convert(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_convert', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('put_slides_convert', 'out_path');
    }
};

subtest 'put_slides_convert invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('put_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('put_slides_convert', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slides_convert', 'out_path', 'string'), 'password' => $utils->get_param_value('put_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_convert', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_convert', 'password', $params{ password });
    $utils->initialize('put_slides_convert', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_convert(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_convert', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_convert', 'password');
    }
};

subtest 'put_slides_convert invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('put_slides_convert', 'document', 'File'), 'format' => $utils->get_param_value('put_slides_convert', 'format', 'string'), 'out_path' => $utils->get_param_value('put_slides_convert', 'out_path', 'string'), 'password' => $utils->get_param_value('put_slides_convert', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_convert', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('put_slides_convert', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('put_slides_convert', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->put_slides_convert(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_convert', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_convert', 'fonts_folder');
    }
};

#
# put_slides_document_from_html test
#
subtest 'put_slides_document_from_html' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('put_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('put_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_document_from_html', 'folder', 'string'));
    $utils->initialize('put_slides_document_from_html', '');
    eval {
        my $result = $utils->{api}->put_slides_document_from_html(%params);
    };
    if ($@) {
        fail("put_slides_document_from_html raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_document_from_html invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('put_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('put_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_document_from_html', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_document_from_html', 'name', $params{ name });
    $utils->initialize('put_slides_document_from_html', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_document_from_html', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_document_from_html', 'name');
    }
};

subtest 'put_slides_document_from_html invalid html' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('put_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('put_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_document_from_html', 'folder', 'string'));
    $params{ html } = $utils->invalidize_param_value('put_slides_document_from_html', 'html', $params{ html });
    $utils->initialize('put_slides_document_from_html', 'html', $params{ html });

    eval {
        my $result = $utils->{api}->put_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_document_from_html', 'html', $params{ html }, $@);
    } else {
        $utils->assert_no_error('put_slides_document_from_html', 'html');
    }
};

subtest 'put_slides_document_from_html invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('put_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('put_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_document_from_html', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_document_from_html', 'password', $params{ password });
    $utils->initialize('put_slides_document_from_html', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_document_from_html', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_document_from_html', 'password');
    }
};

subtest 'put_slides_document_from_html invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('put_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('put_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_document_from_html', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_document_from_html', 'storage', $params{ storage });
    $utils->initialize('put_slides_document_from_html', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_document_from_html', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_document_from_html', 'storage');
    }
};

subtest 'put_slides_document_from_html invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_document_from_html', 'name', 'string'), 'html' => $utils->get_param_value('put_slides_document_from_html', 'html', 'string'), 'password' => $utils->get_param_value('put_slides_document_from_html', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_document_from_html', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_document_from_html', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_document_from_html', 'folder', $params{ folder });
    $utils->initialize('put_slides_document_from_html', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_document_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_document_from_html', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_document_from_html', 'folder');
    }
};

#
# put_slides_header_footer test
#
subtest 'put_slides_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slides_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_header_footer', 'folder', 'string'));
    $utils->initialize('put_slides_header_footer', '');
    eval {
        my $result = $utils->{api}->put_slides_header_footer(%params);
    };
    if ($@) {
        fail("put_slides_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slides_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_header_footer', 'folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_header_footer', 'name', $params{ name });
    $utils->initialize('put_slides_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_header_footer', 'name');
    }
};

subtest 'put_slides_header_footer invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slides_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_header_footer', 'folder', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_slides_header_footer', 'dto', $params{ dto });
    $utils->initialize('put_slides_header_footer', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_slides_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_header_footer', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_slides_header_footer', 'dto');
    }
};

subtest 'put_slides_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slides_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_header_footer', 'folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_header_footer', 'password', $params{ password });
    $utils->initialize('put_slides_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_header_footer', 'password');
    }
};

subtest 'put_slides_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slides_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_header_footer', 'folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_header_footer', 'storage', $params{ storage });
    $utils->initialize('put_slides_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_header_footer', 'storage');
    }
};

subtest 'put_slides_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('put_slides_header_footer', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_header_footer', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_header_footer', 'folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_header_footer', 'folder', $params{ folder });
    $utils->initialize('put_slides_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_header_footer', 'folder');
    }
};

#
# put_slides_protection_properties test
#
subtest 'put_slides_protection_properties' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_protection_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_protection_properties', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('put_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_protection_properties', 'storage', 'string'));
    $utils->initialize('put_slides_protection_properties', '');
    eval {
        my $result = $utils->{api}->put_slides_protection_properties(%params);
    };
    if ($@) {
        fail("put_slides_protection_properties raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_protection_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_protection_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_protection_properties', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('put_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_protection_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_protection_properties', 'name', $params{ name });
    $utils->initialize('put_slides_protection_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_protection_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_protection_properties', 'name');
    }
};

subtest 'put_slides_protection_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_protection_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_protection_properties', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('put_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_protection_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_slides_protection_properties', 'dto', $params{ dto });
    $utils->initialize('put_slides_protection_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_slides_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_protection_properties', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_slides_protection_properties', 'dto');
    }
};

subtest 'put_slides_protection_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_protection_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_protection_properties', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('put_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_protection_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_protection_properties', 'password', $params{ password });
    $utils->initialize('put_slides_protection_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_protection_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_protection_properties', 'password');
    }
};

subtest 'put_slides_protection_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_protection_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_protection_properties', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('put_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_protection_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_protection_properties', 'folder', $params{ folder });
    $utils->initialize('put_slides_protection_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_protection_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_protection_properties', 'folder');
    }
};

subtest 'put_slides_protection_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_protection_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_protection_properties', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('put_slides_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_protection_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_protection_properties', 'storage', $params{ storage });
    $utils->initialize('put_slides_protection_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_protection_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_protection_properties', 'storage');
    }
};

#
# put_slides_save_as test
#
subtest 'put_slides_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_save_as', 'name', 'string'), 'out_path' => $utils->get_param_value('put_slides_save_as', 'out_path', 'string'), 'format' => $utils->get_param_value('put_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('put_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('put_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_save_as', 'fonts_folder', 'string'));
    $utils->initialize('put_slides_save_as', '');
    eval {
        my $result = $utils->{api}->put_slides_save_as(%params);
    };
    if ($@) {
        fail("put_slides_save_as raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_save_as', 'name', 'string'), 'out_path' => $utils->get_param_value('put_slides_save_as', 'out_path', 'string'), 'format' => $utils->get_param_value('put_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('put_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('put_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_save_as', 'name', $params{ name });
    $utils->initialize('put_slides_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_save_as', 'name');
    }
};

subtest 'put_slides_save_as invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_save_as', 'name', 'string'), 'out_path' => $utils->get_param_value('put_slides_save_as', 'out_path', 'string'), 'format' => $utils->get_param_value('put_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('put_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('put_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_save_as', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('put_slides_save_as', 'out_path', $params{ out_path });
    $utils->initialize('put_slides_save_as', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->put_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_save_as', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('put_slides_save_as', 'out_path');
    }
};

subtest 'put_slides_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_save_as', 'name', 'string'), 'out_path' => $utils->get_param_value('put_slides_save_as', 'out_path', 'string'), 'format' => $utils->get_param_value('put_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('put_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('put_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('put_slides_save_as', 'format', $params{ format });
    $utils->initialize('put_slides_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->put_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('put_slides_save_as', 'format');
    }
};

subtest 'put_slides_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_save_as', 'name', 'string'), 'out_path' => $utils->get_param_value('put_slides_save_as', 'out_path', 'string'), 'format' => $utils->get_param_value('put_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('put_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('put_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('put_slides_save_as', 'options', $params{ options });
    $utils->initialize('put_slides_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->put_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('put_slides_save_as', 'options');
    }
};

subtest 'put_slides_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_save_as', 'name', 'string'), 'out_path' => $utils->get_param_value('put_slides_save_as', 'out_path', 'string'), 'format' => $utils->get_param_value('put_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('put_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('put_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_save_as', 'password', $params{ password });
    $utils->initialize('put_slides_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_save_as', 'password');
    }
};

subtest 'put_slides_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_save_as', 'name', 'string'), 'out_path' => $utils->get_param_value('put_slides_save_as', 'out_path', 'string'), 'format' => $utils->get_param_value('put_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('put_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('put_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_save_as', 'storage', $params{ storage });
    $utils->initialize('put_slides_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_save_as', 'storage');
    }
};

subtest 'put_slides_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_save_as', 'name', 'string'), 'out_path' => $utils->get_param_value('put_slides_save_as', 'out_path', 'string'), 'format' => $utils->get_param_value('put_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('put_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('put_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_save_as', 'folder', $params{ folder });
    $utils->initialize('put_slides_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_save_as', 'folder');
    }
};

subtest 'put_slides_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_save_as', 'name', 'string'), 'out_path' => $utils->get_param_value('put_slides_save_as', 'out_path', 'string'), 'format' => $utils->get_param_value('put_slides_save_as', 'format', 'string'), 'options' => $utils->get_param_value('put_slides_save_as', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('put_slides_save_as', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_save_as', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_save_as', 'folder', 'string'), 'fonts_folder' => $utils->get_param_value('put_slides_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('put_slides_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('put_slides_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->put_slides_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_save_as', 'fonts_folder');
    }
};

#
# put_slides_set_document_property test
#
subtest 'put_slides_set_document_property' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('put_slides_set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('put_slides_set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('put_slides_set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_set_document_property', 'storage', 'string'));
    $utils->initialize('put_slides_set_document_property', '');
    eval {
        my $result = $utils->{api}->put_slides_set_document_property(%params);
    };
    if ($@) {
        fail("put_slides_set_document_property raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_set_document_property invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('put_slides_set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('put_slides_set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('put_slides_set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_set_document_property', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_set_document_property', 'name', $params{ name });
    $utils->initialize('put_slides_set_document_property', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_set_document_property', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_set_document_property', 'name');
    }
};

subtest 'put_slides_set_document_property invalid property_name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('put_slides_set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('put_slides_set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('put_slides_set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_set_document_property', 'storage', 'string'));
    $params{ property_name } = $utils->invalidize_param_value('put_slides_set_document_property', 'property_name', $params{ property_name });
    $utils->initialize('put_slides_set_document_property', 'property_name', $params{ property_name });

    eval {
        my $result = $utils->{api}->put_slides_set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_set_document_property', 'property_name', $params{ property_name }, $@);
    } else {
        $utils->assert_no_error('put_slides_set_document_property', 'property_name');
    }
};

subtest 'put_slides_set_document_property invalid property' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('put_slides_set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('put_slides_set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('put_slides_set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_set_document_property', 'storage', 'string'));
    $params{ property } = $utils->invalidize_param_value('put_slides_set_document_property', 'property', $params{ property });
    $utils->initialize('put_slides_set_document_property', 'property', $params{ property });

    eval {
        my $result = $utils->{api}->put_slides_set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_set_document_property', 'property', $params{ property }, $@);
    } else {
        $utils->assert_no_error('put_slides_set_document_property', 'property');
    }
};

subtest 'put_slides_set_document_property invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('put_slides_set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('put_slides_set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('put_slides_set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_set_document_property', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_set_document_property', 'password', $params{ password });
    $utils->initialize('put_slides_set_document_property', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_set_document_property', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_set_document_property', 'password');
    }
};

subtest 'put_slides_set_document_property invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('put_slides_set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('put_slides_set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('put_slides_set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_set_document_property', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_set_document_property', 'folder', $params{ folder });
    $utils->initialize('put_slides_set_document_property', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_set_document_property', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_set_document_property', 'folder');
    }
};

subtest 'put_slides_set_document_property invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('put_slides_set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('put_slides_set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('put_slides_set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_set_document_property', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_set_document_property', 'storage', $params{ storage });
    $utils->initialize('put_slides_set_document_property', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_set_document_property', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_set_document_property', 'storage');
    }
};

#
# put_slides_slide test
#
subtest 'put_slides_slide' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_slides_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('put_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide', 'storage', 'string'));
    $utils->initialize('put_slides_slide', '');
    eval {
        my $result = $utils->{api}->put_slides_slide(%params);
    };
    if ($@) {
        fail("put_slides_slide raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_slides_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('put_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_slide', 'name', $params{ name });
    $utils->initialize('put_slides_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide', 'name');
    }
};

subtest 'put_slides_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_slides_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('put_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slides_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slides_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide', 'slide_index');
    }
};

subtest 'put_slides_slide invalid slide_dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_slides_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('put_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide', 'storage', 'string'));
    $params{ slide_dto } = $utils->invalidize_param_value('put_slides_slide', 'slide_dto', $params{ slide_dto });
    $utils->initialize('put_slides_slide', 'slide_dto', $params{ slide_dto });

    eval {
        my $result = $utils->{api}->put_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide', 'slide_dto', $params{ slide_dto }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide', 'slide_dto');
    }
};

subtest 'put_slides_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_slides_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('put_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_slide', 'password', $params{ password });
    $utils->initialize('put_slides_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide', 'password');
    }
};

subtest 'put_slides_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_slides_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('put_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_slide', 'folder', $params{ folder });
    $utils->initialize('put_slides_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide', 'folder');
    }
};

subtest 'put_slides_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('put_slides_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('put_slides_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_slide', 'storage', $params{ storage });
    $utils->initialize('put_slides_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide', 'storage');
    }
};

#
# put_slides_slide_background test
#
subtest 'put_slides_slide_background' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('put_slides_slide_background', 'background', 'SlideBackground'), 'folder' => $utils->get_param_value('put_slides_slide_background', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background', 'storage', 'string'));
    $utils->initialize('put_slides_slide_background', '');
    eval {
        my $result = $utils->{api}->put_slides_slide_background(%params);
    };
    if ($@) {
        fail("put_slides_slide_background raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_slide_background invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('put_slides_slide_background', 'background', 'SlideBackground'), 'folder' => $utils->get_param_value('put_slides_slide_background', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_slide_background', 'name', $params{ name });
    $utils->initialize('put_slides_slide_background', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background', 'name');
    }
};

subtest 'put_slides_slide_background invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('put_slides_slide_background', 'background', 'SlideBackground'), 'folder' => $utils->get_param_value('put_slides_slide_background', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slides_slide_background', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slides_slide_background', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background', 'slide_index');
    }
};

subtest 'put_slides_slide_background invalid background' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('put_slides_slide_background', 'background', 'SlideBackground'), 'folder' => $utils->get_param_value('put_slides_slide_background', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background', 'storage', 'string'));
    $params{ background } = $utils->invalidize_param_value('put_slides_slide_background', 'background', $params{ background });
    $utils->initialize('put_slides_slide_background', 'background', $params{ background });

    eval {
        my $result = $utils->{api}->put_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background', 'background', $params{ background }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background', 'background');
    }
};

subtest 'put_slides_slide_background invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('put_slides_slide_background', 'background', 'SlideBackground'), 'folder' => $utils->get_param_value('put_slides_slide_background', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_slide_background', 'folder', $params{ folder });
    $utils->initialize('put_slides_slide_background', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background', 'folder');
    }
};

subtest 'put_slides_slide_background invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('put_slides_slide_background', 'background', 'SlideBackground'), 'folder' => $utils->get_param_value('put_slides_slide_background', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_slide_background', 'password', $params{ password });
    $utils->initialize('put_slides_slide_background', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background', 'password');
    }
};

subtest 'put_slides_slide_background invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('put_slides_slide_background', 'background', 'SlideBackground'), 'folder' => $utils->get_param_value('put_slides_slide_background', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_slide_background', 'storage', $params{ storage });
    $utils->initialize('put_slides_slide_background', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_slide_background(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background', 'storage');
    }
};

#
# put_slides_slide_background_color test
#
subtest 'put_slides_slide_background_color' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('put_slides_slide_background_color', 'color', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_background_color', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background_color', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background_color', 'storage', 'string'));
    $utils->initialize('put_slides_slide_background_color', '');
    eval {
        my $result = $utils->{api}->put_slides_slide_background_color(%params);
    };
    if ($@) {
        fail("put_slides_slide_background_color raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_slide_background_color invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('put_slides_slide_background_color', 'color', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_background_color', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background_color', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background_color', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_slide_background_color', 'name', $params{ name });
    $utils->initialize('put_slides_slide_background_color', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_slide_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background_color', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background_color', 'name');
    }
};

subtest 'put_slides_slide_background_color invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('put_slides_slide_background_color', 'color', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_background_color', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background_color', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background_color', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_slides_slide_background_color', 'slide_index', $params{ slide_index });
    $utils->initialize('put_slides_slide_background_color', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_slides_slide_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background_color', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background_color', 'slide_index');
    }
};

subtest 'put_slides_slide_background_color invalid color' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('put_slides_slide_background_color', 'color', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_background_color', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background_color', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background_color', 'storage', 'string'));
    $params{ color } = $utils->invalidize_param_value('put_slides_slide_background_color', 'color', $params{ color });
    $utils->initialize('put_slides_slide_background_color', 'color', $params{ color });

    eval {
        my $result = $utils->{api}->put_slides_slide_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background_color', 'color', $params{ color }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background_color', 'color');
    }
};

subtest 'put_slides_slide_background_color invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('put_slides_slide_background_color', 'color', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_background_color', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background_color', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background_color', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_slide_background_color', 'folder', $params{ folder });
    $utils->initialize('put_slides_slide_background_color', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_slide_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background_color', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background_color', 'folder');
    }
};

subtest 'put_slides_slide_background_color invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('put_slides_slide_background_color', 'color', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_background_color', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background_color', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background_color', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_slide_background_color', 'password', $params{ password });
    $utils->initialize('put_slides_slide_background_color', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_slide_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background_color', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background_color', 'password');
    }
};

subtest 'put_slides_slide_background_color invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_slides_slide_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('put_slides_slide_background_color', 'color', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_background_color', 'folder', 'string'), 'password' => $utils->get_param_value('put_slides_slide_background_color', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_background_color', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_slide_background_color', 'storage', $params{ storage });
    $utils->initialize('put_slides_slide_background_color', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_slide_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_background_color', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_background_color', 'storage');
    }
};

#
# put_slides_slide_properties test
#
subtest 'put_slides_slide_properties' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('put_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_properties', 'storage', 'string'));
    $utils->initialize('put_slides_slide_properties', '');
    eval {
        my $result = $utils->{api}->put_slides_slide_properties(%params);
    };
    if ($@) {
        fail("put_slides_slide_properties raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_slide_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('put_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_slide_properties', 'name', $params{ name });
    $utils->initialize('put_slides_slide_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_properties', 'name');
    }
};

subtest 'put_slides_slide_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('put_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_slides_slide_properties', 'dto', $params{ dto });
    $utils->initialize('put_slides_slide_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_slides_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_properties', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_properties', 'dto');
    }
};

subtest 'put_slides_slide_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('put_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_slide_properties', 'password', $params{ password });
    $utils->initialize('put_slides_slide_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_properties', 'password');
    }
};

subtest 'put_slides_slide_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('put_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_slide_properties', 'folder', $params{ folder });
    $utils->initialize('put_slides_slide_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_properties', 'folder');
    }
};

subtest 'put_slides_slide_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('put_slides_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_slide_properties', 'storage', $params{ storage });
    $utils->initialize('put_slides_slide_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_properties', 'storage');
    }
};

#
# put_slides_slide_size test
#
subtest 'put_slides_slide_size' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_size', 'name', 'string'), 'password' => $utils->get_param_value('put_slides_slide_size', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_size', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_size', 'folder', 'string'), 'width' => $utils->get_param_value('put_slides_slide_size', 'width', 'int'), 'height' => $utils->get_param_value('put_slides_slide_size', 'height', 'int'), 'size_type' => $utils->get_param_value('put_slides_slide_size', 'size_type', 'string'), 'scale_type' => $utils->get_param_value('put_slides_slide_size', 'scale_type', 'string'));
    $utils->initialize('put_slides_slide_size', '');
    eval {
        my $result = $utils->{api}->put_slides_slide_size(%params);
    };
    if ($@) {
        fail("put_slides_slide_size raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_slide_size invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_size', 'name', 'string'), 'password' => $utils->get_param_value('put_slides_slide_size', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_size', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_size', 'folder', 'string'), 'width' => $utils->get_param_value('put_slides_slide_size', 'width', 'int'), 'height' => $utils->get_param_value('put_slides_slide_size', 'height', 'int'), 'size_type' => $utils->get_param_value('put_slides_slide_size', 'size_type', 'string'), 'scale_type' => $utils->get_param_value('put_slides_slide_size', 'scale_type', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_slide_size', 'name', $params{ name });
    $utils->initialize('put_slides_slide_size', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_slide_size(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_size', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_size', 'name');
    }
};

subtest 'put_slides_slide_size invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_size', 'name', 'string'), 'password' => $utils->get_param_value('put_slides_slide_size', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_size', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_size', 'folder', 'string'), 'width' => $utils->get_param_value('put_slides_slide_size', 'width', 'int'), 'height' => $utils->get_param_value('put_slides_slide_size', 'height', 'int'), 'size_type' => $utils->get_param_value('put_slides_slide_size', 'size_type', 'string'), 'scale_type' => $utils->get_param_value('put_slides_slide_size', 'scale_type', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_slide_size', 'password', $params{ password });
    $utils->initialize('put_slides_slide_size', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_slide_size(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_size', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_size', 'password');
    }
};

subtest 'put_slides_slide_size invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_size', 'name', 'string'), 'password' => $utils->get_param_value('put_slides_slide_size', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_size', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_size', 'folder', 'string'), 'width' => $utils->get_param_value('put_slides_slide_size', 'width', 'int'), 'height' => $utils->get_param_value('put_slides_slide_size', 'height', 'int'), 'size_type' => $utils->get_param_value('put_slides_slide_size', 'size_type', 'string'), 'scale_type' => $utils->get_param_value('put_slides_slide_size', 'scale_type', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_slide_size', 'storage', $params{ storage });
    $utils->initialize('put_slides_slide_size', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_slide_size(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_size', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_size', 'storage');
    }
};

subtest 'put_slides_slide_size invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_size', 'name', 'string'), 'password' => $utils->get_param_value('put_slides_slide_size', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_size', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_size', 'folder', 'string'), 'width' => $utils->get_param_value('put_slides_slide_size', 'width', 'int'), 'height' => $utils->get_param_value('put_slides_slide_size', 'height', 'int'), 'size_type' => $utils->get_param_value('put_slides_slide_size', 'size_type', 'string'), 'scale_type' => $utils->get_param_value('put_slides_slide_size', 'scale_type', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_slide_size', 'folder', $params{ folder });
    $utils->initialize('put_slides_slide_size', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_slide_size(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_size', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_size', 'folder');
    }
};

subtest 'put_slides_slide_size invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_size', 'name', 'string'), 'password' => $utils->get_param_value('put_slides_slide_size', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_size', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_size', 'folder', 'string'), 'width' => $utils->get_param_value('put_slides_slide_size', 'width', 'int'), 'height' => $utils->get_param_value('put_slides_slide_size', 'height', 'int'), 'size_type' => $utils->get_param_value('put_slides_slide_size', 'size_type', 'string'), 'scale_type' => $utils->get_param_value('put_slides_slide_size', 'scale_type', 'string'));
    $params{ width } = $utils->invalidize_param_value('put_slides_slide_size', 'width', $params{ width });
    $utils->initialize('put_slides_slide_size', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->put_slides_slide_size(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_size', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_size', 'width');
    }
};

subtest 'put_slides_slide_size invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_size', 'name', 'string'), 'password' => $utils->get_param_value('put_slides_slide_size', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_size', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_size', 'folder', 'string'), 'width' => $utils->get_param_value('put_slides_slide_size', 'width', 'int'), 'height' => $utils->get_param_value('put_slides_slide_size', 'height', 'int'), 'size_type' => $utils->get_param_value('put_slides_slide_size', 'size_type', 'string'), 'scale_type' => $utils->get_param_value('put_slides_slide_size', 'scale_type', 'string'));
    $params{ height } = $utils->invalidize_param_value('put_slides_slide_size', 'height', $params{ height });
    $utils->initialize('put_slides_slide_size', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->put_slides_slide_size(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_size', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_size', 'height');
    }
};

subtest 'put_slides_slide_size invalid size_type' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_size', 'name', 'string'), 'password' => $utils->get_param_value('put_slides_slide_size', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_size', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_size', 'folder', 'string'), 'width' => $utils->get_param_value('put_slides_slide_size', 'width', 'int'), 'height' => $utils->get_param_value('put_slides_slide_size', 'height', 'int'), 'size_type' => $utils->get_param_value('put_slides_slide_size', 'size_type', 'string'), 'scale_type' => $utils->get_param_value('put_slides_slide_size', 'scale_type', 'string'));
    $params{ size_type } = $utils->invalidize_param_value('put_slides_slide_size', 'size_type', $params{ size_type });
    $utils->initialize('put_slides_slide_size', 'size_type', $params{ size_type });

    eval {
        my $result = $utils->{api}->put_slides_slide_size(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_size', 'size_type', $params{ size_type }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_size', 'size_type');
    }
};

subtest 'put_slides_slide_size invalid scale_type' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_slide_size', 'name', 'string'), 'password' => $utils->get_param_value('put_slides_slide_size', 'password', 'string'), 'storage' => $utils->get_param_value('put_slides_slide_size', 'storage', 'string'), 'folder' => $utils->get_param_value('put_slides_slide_size', 'folder', 'string'), 'width' => $utils->get_param_value('put_slides_slide_size', 'width', 'int'), 'height' => $utils->get_param_value('put_slides_slide_size', 'height', 'int'), 'size_type' => $utils->get_param_value('put_slides_slide_size', 'size_type', 'string'), 'scale_type' => $utils->get_param_value('put_slides_slide_size', 'scale_type', 'string'));
    $params{ scale_type } = $utils->invalidize_param_value('put_slides_slide_size', 'scale_type', $params{ scale_type });
    $utils->initialize('put_slides_slide_size', 'scale_type', $params{ scale_type });

    eval {
        my $result = $utils->{api}->put_slides_slide_size(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_slide_size', 'scale_type', $params{ scale_type }, $@);
    } else {
        $utils->assert_no_error('put_slides_slide_size', 'scale_type');
    }
};

#
# put_slides_view_properties test
#
subtest 'put_slides_view_properties' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('put_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_view_properties', 'storage', 'string'));
    $utils->initialize('put_slides_view_properties', '');
    eval {
        my $result = $utils->{api}->put_slides_view_properties(%params);
    };
    if ($@) {
        fail("put_slides_view_properties raised an exception: $@");
    }
    pass();
};

subtest 'put_slides_view_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('put_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_view_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_slides_view_properties', 'name', $params{ name });
    $utils->initialize('put_slides_view_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_slides_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_view_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_slides_view_properties', 'name');
    }
};

subtest 'put_slides_view_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('put_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_view_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_slides_view_properties', 'dto', $params{ dto });
    $utils->initialize('put_slides_view_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_slides_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_view_properties', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_slides_view_properties', 'dto');
    }
};

subtest 'put_slides_view_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('put_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_view_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_slides_view_properties', 'password', $params{ password });
    $utils->initialize('put_slides_view_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_slides_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_view_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_slides_view_properties', 'password');
    }
};

subtest 'put_slides_view_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('put_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_view_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_slides_view_properties', 'folder', $params{ folder });
    $utils->initialize('put_slides_view_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_slides_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_view_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_slides_view_properties', 'folder');
    }
};

subtest 'put_slides_view_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_slides_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('put_slides_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('put_slides_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('put_slides_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('put_slides_view_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_slides_view_properties', 'storage', $params{ storage });
    $utils->initialize('put_slides_view_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_slides_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('put_slides_view_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_slides_view_properties', 'storage');
    }
};

#
# put_subshape_save_as test
#
subtest 'put_subshape_save_as' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $utils->initialize('put_subshape_save_as', '');
    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        fail("put_subshape_save_as raised an exception: $@");
    }
    pass();
};

subtest 'put_subshape_save_as invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_subshape_save_as', 'name', $params{ name });
    $utils->initialize('put_subshape_save_as', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'name');
    }
};

subtest 'put_subshape_save_as invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_subshape_save_as', 'slide_index', $params{ slide_index });
    $utils->initialize('put_subshape_save_as', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'slide_index');
    }
};

subtest 'put_subshape_save_as invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ path } = $utils->invalidize_param_value('put_subshape_save_as', 'path', $params{ path });
    $utils->initialize('put_subshape_save_as', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'path');
    }
};

subtest 'put_subshape_save_as invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_subshape_save_as', 'shape_index', $params{ shape_index });
    $utils->initialize('put_subshape_save_as', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'shape_index');
    }
};

subtest 'put_subshape_save_as invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('put_subshape_save_as', 'format', $params{ format });
    $utils->initialize('put_subshape_save_as', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'format');
    }
};

subtest 'put_subshape_save_as invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('put_subshape_save_as', 'out_path', $params{ out_path });
    $utils->initialize('put_subshape_save_as', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'out_path');
    }
};

subtest 'put_subshape_save_as invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('put_subshape_save_as', 'options', $params{ options });
    $utils->initialize('put_subshape_save_as', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'options');
    }
};

subtest 'put_subshape_save_as invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_subshape_save_as', 'password', $params{ password });
    $utils->initialize('put_subshape_save_as', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'password');
    }
};

subtest 'put_subshape_save_as invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_subshape_save_as', 'folder', $params{ folder });
    $utils->initialize('put_subshape_save_as', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'folder');
    }
};

subtest 'put_subshape_save_as invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_subshape_save_as', 'storage', $params{ storage });
    $utils->initialize('put_subshape_save_as', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'storage');
    }
};

subtest 'put_subshape_save_as invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('put_subshape_save_as', 'scale_x', $params{ scale_x });
    $utils->initialize('put_subshape_save_as', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'scale_x');
    }
};

subtest 'put_subshape_save_as invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('put_subshape_save_as', 'scale_y', $params{ scale_y });
    $utils->initialize('put_subshape_save_as', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'scale_y');
    }
};

subtest 'put_subshape_save_as invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('put_subshape_save_as', 'bounds', $params{ bounds });
    $utils->initialize('put_subshape_save_as', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'bounds');
    }
};

subtest 'put_subshape_save_as invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_subshape_save_as', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_subshape_save_as', 'slide_index', 'int'), 'path' => $utils->get_param_value('put_subshape_save_as', 'path', 'string'), 'shape_index' => $utils->get_param_value('put_subshape_save_as', 'shape_index', 'int'), 'format' => $utils->get_param_value('put_subshape_save_as', 'format', 'string'), 'out_path' => $utils->get_param_value('put_subshape_save_as', 'out_path', 'string'), 'options' => $utils->get_param_value('put_subshape_save_as', 'options', 'IShapeExportOptions'), 'password' => $utils->get_param_value('put_subshape_save_as', 'password', 'string'), 'folder' => $utils->get_param_value('put_subshape_save_as', 'folder', 'string'), 'storage' => $utils->get_param_value('put_subshape_save_as', 'storage', 'string'), 'scale_x' => $utils->get_param_value('put_subshape_save_as', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('put_subshape_save_as', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('put_subshape_save_as', 'bounds', 'string'), 'fonts_folder' => $utils->get_param_value('put_subshape_save_as', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('put_subshape_save_as', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('put_subshape_save_as', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->put_subshape_save_as(%params);
    };
    if ($@) {
        $utils->assert_error('put_subshape_save_as', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('put_subshape_save_as', 'fonts_folder');
    }
};

#
# put_update_notes_slide test
#
subtest 'put_update_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('put_update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide', 'storage', 'string'));
    $utils->initialize('put_update_notes_slide', '');
    eval {
        my $result = $utils->{api}->put_update_notes_slide(%params);
    };
    if ($@) {
        fail("put_update_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'put_update_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('put_update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_update_notes_slide', 'name', $params{ name });
    $utils->initialize('put_update_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide', 'name');
    }
};

subtest 'put_update_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('put_update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_update_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('put_update_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide', 'slide_index');
    }
};

subtest 'put_update_notes_slide invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('put_update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_update_notes_slide', 'dto', $params{ dto });
    $utils->initialize('put_update_notes_slide', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide', 'dto');
    }
};

subtest 'put_update_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('put_update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_update_notes_slide', 'password', $params{ password });
    $utils->initialize('put_update_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide', 'password');
    }
};

subtest 'put_update_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('put_update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_update_notes_slide', 'folder', $params{ folder });
    $utils->initialize('put_update_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide', 'folder');
    }
};

subtest 'put_update_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('put_update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_update_notes_slide', 'storage', $params{ storage });
    $utils->initialize('put_update_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide', 'storage');
    }
};

#
# put_update_notes_slide_shape test
#
subtest 'put_update_notes_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_update_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape', 'storage', 'string'));
    $utils->initialize('put_update_notes_slide_shape', '');
    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape(%params);
    };
    if ($@) {
        fail("put_update_notes_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'put_update_notes_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_update_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_update_notes_slide_shape', 'name', $params{ name });
    $utils->initialize('put_update_notes_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape', 'name');
    }
};

subtest 'put_update_notes_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_update_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_update_notes_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('put_update_notes_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape', 'slide_index');
    }
};

subtest 'put_update_notes_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_update_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_update_notes_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('put_update_notes_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape', 'shape_index');
    }
};

subtest 'put_update_notes_slide_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_update_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_update_notes_slide_shape', 'dto', $params{ dto });
    $utils->initialize('put_update_notes_slide_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape', 'dto');
    }
};

subtest 'put_update_notes_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_update_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_update_notes_slide_shape', 'password', $params{ password });
    $utils->initialize('put_update_notes_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape', 'password');
    }
};

subtest 'put_update_notes_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_update_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_update_notes_slide_shape', 'folder', $params{ folder });
    $utils->initialize('put_update_notes_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape', 'folder');
    }
};

subtest 'put_update_notes_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('put_update_notes_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_update_notes_slide_shape', 'storage', $params{ storage });
    $utils->initialize('put_update_notes_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape', 'storage');
    }
};

#
# put_update_notes_slide_shape_paragraph test
#
subtest 'put_update_notes_slide_shape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'storage', 'string'));
    $utils->initialize('put_update_notes_slide_shape_paragraph', '');
    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        fail("put_update_notes_slide_shape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'put_update_notes_slide_shape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_update_notes_slide_shape_paragraph', 'name', $params{ name });
    $utils->initialize('put_update_notes_slide_shape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_paragraph', 'name');
    }
};

subtest 'put_update_notes_slide_shape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('put_update_notes_slide_shape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_paragraph', 'slide_index');
    }
};

subtest 'put_update_notes_slide_shape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('put_update_notes_slide_shape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_paragraph', 'shape_index');
    }
};

subtest 'put_update_notes_slide_shape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('put_update_notes_slide_shape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_paragraph', 'paragraph_index');
    }
};

subtest 'put_update_notes_slide_shape_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_update_notes_slide_shape_paragraph', 'dto', $params{ dto });
    $utils->initialize('put_update_notes_slide_shape_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_paragraph', 'dto');
    }
};

subtest 'put_update_notes_slide_shape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_update_notes_slide_shape_paragraph', 'password', $params{ password });
    $utils->initialize('put_update_notes_slide_shape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_paragraph', 'password');
    }
};

subtest 'put_update_notes_slide_shape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_update_notes_slide_shape_paragraph', 'folder', $params{ folder });
    $utils->initialize('put_update_notes_slide_shape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_paragraph', 'folder');
    }
};

subtest 'put_update_notes_slide_shape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_update_notes_slide_shape_paragraph', 'storage', $params{ storage });
    $utils->initialize('put_update_notes_slide_shape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_paragraph', 'storage');
    }
};

#
# put_update_notes_slide_shape_portion test
#
subtest 'put_update_notes_slide_shape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $utils->initialize('put_update_notes_slide_shape_portion', '');
    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        fail("put_update_notes_slide_shape_portion raised an exception: $@");
    }
    pass();
};

subtest 'put_update_notes_slide_shape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('put_update_notes_slide_shape_portion', 'name', $params{ name });
    $utils->initialize('put_update_notes_slide_shape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_portion', 'name');
    }
};

subtest 'put_update_notes_slide_shape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('put_update_notes_slide_shape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('put_update_notes_slide_shape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_portion', 'slide_index');
    }
};

subtest 'put_update_notes_slide_shape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('put_update_notes_slide_shape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('put_update_notes_slide_shape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_portion', 'shape_index');
    }
};

subtest 'put_update_notes_slide_shape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('put_update_notes_slide_shape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_portion', 'paragraph_index');
    }
};

subtest 'put_update_notes_slide_shape_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('put_update_notes_slide_shape_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('put_update_notes_slide_shape_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_portion', 'portion_index');
    }
};

subtest 'put_update_notes_slide_shape_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('put_update_notes_slide_shape_portion', 'dto', $params{ dto });
    $utils->initialize('put_update_notes_slide_shape_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_portion', 'dto');
    }
};

subtest 'put_update_notes_slide_shape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('put_update_notes_slide_shape_portion', 'password', $params{ password });
    $utils->initialize('put_update_notes_slide_shape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_portion', 'password');
    }
};

subtest 'put_update_notes_slide_shape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('put_update_notes_slide_shape_portion', 'folder', $params{ folder });
    $utils->initialize('put_update_notes_slide_shape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_portion', 'folder');
    }
};

subtest 'put_update_notes_slide_shape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('put_update_notes_slide_shape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('put_update_notes_slide_shape_portion', 'storage', $params{ storage });
    $utils->initialize('put_update_notes_slide_shape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->put_update_notes_slide_shape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('put_update_notes_slide_shape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('put_update_notes_slide_shape_portion', 'storage');
    }
};

#
# storage_exists test
#
subtest 'storage_exists' => sub {
    my %params = ('storage_name' => $utils->get_param_value('storage_exists', 'storage_name', 'string'));
    $utils->initialize('storage_exists', '');
    eval {
        my $result = $utils->{api}->storage_exists(%params);
    };
    if ($@) {
        fail("storage_exists raised an exception: $@");
    }
    pass();
};

subtest 'storage_exists invalid storage_name' => sub {
    my %params = ('storage_name' => $utils->get_param_value('storage_exists', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('storage_exists', 'storage_name', $params{ storage_name });
    $utils->initialize('storage_exists', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->storage_exists(%params);
    };
    if ($@) {
        $utils->assert_error('storage_exists', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('storage_exists', 'storage_name');
    }
};

#
# upload_file test
#
subtest 'upload_file' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $utils->initialize('upload_file', '');
    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        fail("upload_file raised an exception: $@");
    }
    pass();
};

subtest 'upload_file invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('upload_file', 'path', $params{ path });
    $utils->initialize('upload_file', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        $utils->assert_error('upload_file', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('upload_file', 'path');
    }
};

subtest 'upload_file invalid file' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $params{ file } = $utils->invalidize_param_value('upload_file', 'file', $params{ file });
    $utils->initialize('upload_file', 'file', $params{ file });

    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        $utils->assert_error('upload_file', 'file', $params{ file }, $@);
    } else {
        $utils->assert_no_error('upload_file', 'file');
    }
};

subtest 'upload_file invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('upload_file', 'storage_name', $params{ storage_name });
    $utils->initialize('upload_file', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        $utils->assert_error('upload_file', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('upload_file', 'storage_name');
    }
};


done_testing;