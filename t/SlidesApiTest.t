=begin comment

Copyright (c) 2019 Aspose Pty Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end comment

=cut

use Test::More;
use Test::Exception;

use AsposeSlidesCloud::SlidesApi;
use AsposeSlidesCloud::TestUtils;

use strict;
use warnings;

my $utils = AsposeSlidesCloud::TestUtils->new();

#
# align_shapes test
#
subtest 'align_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'));
    $utils->initialize('align_shapes', '');
    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        fail("align_shapes raised an exception: $@");
    }
    pass();
};

subtest 'align_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('align_shapes', 'name', $params{ name });
    $utils->initialize('align_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('align_shapes', 'name');
    }
};

subtest 'align_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('align_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('align_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('align_shapes', 'slide_index');
    }
};

subtest 'align_shapes invalid alignment_type' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'));
    $params{ alignment_type } = $utils->invalidize_param_value('align_shapes', 'alignment_type', $params{ alignment_type });
    $utils->initialize('align_shapes', 'alignment_type', $params{ alignment_type });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'alignment_type', $params{ alignment_type }, $@);
    } else {
        $utils->assert_no_error('align_shapes', 'alignment_type');
    }
};

subtest 'align_shapes invalid align_to_slide' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'));
    $params{ align_to_slide } = $utils->invalidize_param_value('align_shapes', 'align_to_slide', $params{ align_to_slide });
    $utils->initialize('align_shapes', 'align_to_slide', $params{ align_to_slide });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'align_to_slide', $params{ align_to_slide }, $@);
    } else {
        $utils->assert_no_error('align_shapes', 'align_to_slide');
    }
};

subtest 'align_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('align_shapes', 'shapes', $params{ shapes });
    $utils->initialize('align_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'shapes', $params{ shapes }, $@);
    } else {
        $utils->assert_no_error('align_shapes', 'shapes');
    }
};

subtest 'align_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('align_shapes', 'password', $params{ password });
    $utils->initialize('align_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('align_shapes', 'password');
    }
};

subtest 'align_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('align_shapes', 'folder', $params{ folder });
    $utils->initialize('align_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('align_shapes', 'folder');
    }
};

subtest 'align_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('align_shapes', 'storage', $params{ storage });
    $utils->initialize('align_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('align_shapes', 'storage');
    }
};

#
# align_special_slide_shapes test
#
subtest 'align_special_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $utils->initialize('align_special_slide_shapes', '');
    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        fail("align_special_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'align_special_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('align_special_slide_shapes', 'name', $params{ name });
    $utils->initialize('align_special_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'name');
    }
};

subtest 'align_special_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('align_special_slide_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('align_special_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'slide_index');
    }
};

subtest 'align_special_slide_shapes invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('align_special_slide_shapes', 'slide_type', $params{ slide_type });
    $utils->initialize('align_special_slide_shapes', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'slide_type');
    }
};

subtest 'align_special_slide_shapes invalid alignment_type' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $params{ alignment_type } = $utils->invalidize_param_value('align_special_slide_shapes', 'alignment_type', $params{ alignment_type });
    $utils->initialize('align_special_slide_shapes', 'alignment_type', $params{ alignment_type });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'alignment_type', $params{ alignment_type }, $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'alignment_type');
    }
};

subtest 'align_special_slide_shapes invalid align_to_slide' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $params{ align_to_slide } = $utils->invalidize_param_value('align_special_slide_shapes', 'align_to_slide', $params{ align_to_slide });
    $utils->initialize('align_special_slide_shapes', 'align_to_slide', $params{ align_to_slide });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'align_to_slide', $params{ align_to_slide }, $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'align_to_slide');
    }
};

subtest 'align_special_slide_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('align_special_slide_shapes', 'shapes', $params{ shapes });
    $utils->initialize('align_special_slide_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'shapes', $params{ shapes }, $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'shapes');
    }
};

subtest 'align_special_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('align_special_slide_shapes', 'password', $params{ password });
    $utils->initialize('align_special_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'password');
    }
};

subtest 'align_special_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('align_special_slide_shapes', 'folder', $params{ folder });
    $utils->initialize('align_special_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'folder');
    }
};

subtest 'align_special_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('align_special_slide_shapes', 'storage', $params{ storage });
    $utils->initialize('align_special_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'storage');
    }
};

#
# convert test
#
subtest 'convert' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'string'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $utils->initialize('convert', '');
    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        fail("convert raised an exception: $@");
    }
    pass();
};

subtest 'convert invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'string'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('convert', 'document', $params{ document });
    $utils->initialize('convert', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('convert', 'document');
    }
};

subtest 'convert invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'string'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('convert', 'format', $params{ format });
    $utils->initialize('convert', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('convert', 'format');
    }
};

subtest 'convert invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'string'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('convert', 'password', $params{ password });
    $utils->initialize('convert', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('convert', 'password');
    }
};

subtest 'convert invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'string'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('convert', 'storage', $params{ storage });
    $utils->initialize('convert', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('convert', 'storage');
    }
};

subtest 'convert invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'string'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('convert', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('convert', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('convert', 'fonts_folder');
    }
};

subtest 'convert invalid slides' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'string'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ slides } = $utils->invalidize_param_value('convert', 'slides', $params{ slides });
    $utils->initialize('convert', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'slides', $params{ slides }, $@);
    } else {
        $utils->assert_no_error('convert', 'slides');
    }
};

subtest 'convert invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'string'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('convert', 'options', $params{ options });
    $utils->initialize('convert', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('convert', 'options');
    }
};

#
# convert_and_save test
#
subtest 'convert_and_save' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'string'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $utils->initialize('convert_and_save', '');
    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        fail("convert_and_save raised an exception: $@");
    }
    pass();
};

subtest 'convert_and_save invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'string'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('convert_and_save', 'document', $params{ document });
    $utils->initialize('convert_and_save', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'document');
    }
};

subtest 'convert_and_save invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'string'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('convert_and_save', 'format', $params{ format });
    $utils->initialize('convert_and_save', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'format');
    }
};

subtest 'convert_and_save invalid out_path' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'string'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ out_path } = $utils->invalidize_param_value('convert_and_save', 'out_path', $params{ out_path });
    $utils->initialize('convert_and_save', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'out_path');
    }
};

subtest 'convert_and_save invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'string'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('convert_and_save', 'password', $params{ password });
    $utils->initialize('convert_and_save', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'password');
    }
};

subtest 'convert_and_save invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'string'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('convert_and_save', 'storage', $params{ storage });
    $utils->initialize('convert_and_save', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'storage');
    }
};

subtest 'convert_and_save invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'string'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('convert_and_save', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('convert_and_save', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'fonts_folder');
    }
};

subtest 'convert_and_save invalid slides' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'string'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ slides } = $utils->invalidize_param_value('convert_and_save', 'slides', $params{ slides });
    $utils->initialize('convert_and_save', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'slides', $params{ slides }, $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'slides');
    }
};

subtest 'convert_and_save invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'string'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('convert_and_save', 'options', $params{ options });
    $utils->initialize('convert_and_save', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'options');
    }
};

#
# copy_file test
#
subtest 'copy_file' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $utils->initialize('copy_file', '');
    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        fail("copy_file raised an exception: $@");
    }
    pass();
};

subtest 'copy_file invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('copy_file', 'src_path', $params{ src_path });
    $utils->initialize('copy_file', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'src_path', $params{ src_path }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'src_path');
    }
};

subtest 'copy_file invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('copy_file', 'dest_path', $params{ dest_path });
    $utils->initialize('copy_file', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'dest_path', $params{ dest_path }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'dest_path');
    }
};

subtest 'copy_file invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('copy_file', 'src_storage_name', $params{ src_storage_name });
    $utils->initialize('copy_file', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'src_storage_name', $params{ src_storage_name }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'src_storage_name');
    }
};

subtest 'copy_file invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('copy_file', 'dest_storage_name', $params{ dest_storage_name });
    $utils->initialize('copy_file', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'dest_storage_name', $params{ dest_storage_name }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'dest_storage_name');
    }
};

subtest 'copy_file invalid version_id' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('copy_file', 'version_id', $params{ version_id });
    $utils->initialize('copy_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('copy_file', 'version_id');
    }
};

#
# copy_folder test
#
subtest 'copy_folder' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $utils->initialize('copy_folder', '');
    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        fail("copy_folder raised an exception: $@");
    }
    pass();
};

subtest 'copy_folder invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('copy_folder', 'src_path', $params{ src_path });
    $utils->initialize('copy_folder', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'src_path', $params{ src_path }, $@);
    } else {
        $utils->assert_no_error('copy_folder', 'src_path');
    }
};

subtest 'copy_folder invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('copy_folder', 'dest_path', $params{ dest_path });
    $utils->initialize('copy_folder', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'dest_path', $params{ dest_path }, $@);
    } else {
        $utils->assert_no_error('copy_folder', 'dest_path');
    }
};

subtest 'copy_folder invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('copy_folder', 'src_storage_name', $params{ src_storage_name });
    $utils->initialize('copy_folder', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'src_storage_name', $params{ src_storage_name }, $@);
    } else {
        $utils->assert_no_error('copy_folder', 'src_storage_name');
    }
};

subtest 'copy_folder invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('copy_folder', 'dest_storage_name', $params{ dest_storage_name });
    $utils->initialize('copy_folder', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'dest_storage_name', $params{ dest_storage_name }, $@);
    } else {
        $utils->assert_no_error('copy_folder', 'dest_storage_name');
    }
};

#
# copy_layout_slide test
#
subtest 'copy_layout_slide' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $utils->initialize('copy_layout_slide', '');
    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        fail("copy_layout_slide raised an exception: $@");
    }
    pass();
};

subtest 'copy_layout_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('copy_layout_slide', 'name', $params{ name });
    $utils->initialize('copy_layout_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'name');
    }
};

subtest 'copy_layout_slide invalid clone_from' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ clone_from } = $utils->invalidize_param_value('copy_layout_slide', 'clone_from', $params{ clone_from });
    $utils->initialize('copy_layout_slide', 'clone_from', $params{ clone_from });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'clone_from', $params{ clone_from }, $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'clone_from');
    }
};

subtest 'copy_layout_slide invalid clone_from_position' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ clone_from_position } = $utils->invalidize_param_value('copy_layout_slide', 'clone_from_position', $params{ clone_from_position });
    $utils->initialize('copy_layout_slide', 'clone_from_position', $params{ clone_from_position });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'clone_from_position', $params{ clone_from_position }, $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'clone_from_position');
    }
};

subtest 'copy_layout_slide invalid clone_from_password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ clone_from_password } = $utils->invalidize_param_value('copy_layout_slide', 'clone_from_password', $params{ clone_from_password });
    $utils->initialize('copy_layout_slide', 'clone_from_password', $params{ clone_from_password });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'clone_from_password', $params{ clone_from_password }, $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'clone_from_password');
    }
};

subtest 'copy_layout_slide invalid clone_from_storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ clone_from_storage } = $utils->invalidize_param_value('copy_layout_slide', 'clone_from_storage', $params{ clone_from_storage });
    $utils->initialize('copy_layout_slide', 'clone_from_storage', $params{ clone_from_storage });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'clone_from_storage', $params{ clone_from_storage }, $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'clone_from_storage');
    }
};

subtest 'copy_layout_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('copy_layout_slide', 'password', $params{ password });
    $utils->initialize('copy_layout_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'password');
    }
};

subtest 'copy_layout_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('copy_layout_slide', 'folder', $params{ folder });
    $utils->initialize('copy_layout_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'folder');
    }
};

subtest 'copy_layout_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('copy_layout_slide', 'storage', $params{ storage });
    $utils->initialize('copy_layout_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'storage');
    }
};

#
# copy_master_slide test
#
subtest 'copy_master_slide' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $utils->initialize('copy_master_slide', '');
    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        fail("copy_master_slide raised an exception: $@");
    }
    pass();
};

subtest 'copy_master_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('copy_master_slide', 'name', $params{ name });
    $utils->initialize('copy_master_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'name');
    }
};

subtest 'copy_master_slide invalid clone_from' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ clone_from } = $utils->invalidize_param_value('copy_master_slide', 'clone_from', $params{ clone_from });
    $utils->initialize('copy_master_slide', 'clone_from', $params{ clone_from });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'clone_from', $params{ clone_from }, $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'clone_from');
    }
};

subtest 'copy_master_slide invalid clone_from_position' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ clone_from_position } = $utils->invalidize_param_value('copy_master_slide', 'clone_from_position', $params{ clone_from_position });
    $utils->initialize('copy_master_slide', 'clone_from_position', $params{ clone_from_position });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'clone_from_position', $params{ clone_from_position }, $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'clone_from_position');
    }
};

subtest 'copy_master_slide invalid clone_from_password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ clone_from_password } = $utils->invalidize_param_value('copy_master_slide', 'clone_from_password', $params{ clone_from_password });
    $utils->initialize('copy_master_slide', 'clone_from_password', $params{ clone_from_password });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'clone_from_password', $params{ clone_from_password }, $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'clone_from_password');
    }
};

subtest 'copy_master_slide invalid clone_from_storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ clone_from_storage } = $utils->invalidize_param_value('copy_master_slide', 'clone_from_storage', $params{ clone_from_storage });
    $utils->initialize('copy_master_slide', 'clone_from_storage', $params{ clone_from_storage });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'clone_from_storage', $params{ clone_from_storage }, $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'clone_from_storage');
    }
};

subtest 'copy_master_slide invalid apply_to_all' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ apply_to_all } = $utils->invalidize_param_value('copy_master_slide', 'apply_to_all', $params{ apply_to_all });
    $utils->initialize('copy_master_slide', 'apply_to_all', $params{ apply_to_all });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'apply_to_all', $params{ apply_to_all }, $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'apply_to_all');
    }
};

subtest 'copy_master_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('copy_master_slide', 'password', $params{ password });
    $utils->initialize('copy_master_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'password');
    }
};

subtest 'copy_master_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('copy_master_slide', 'folder', $params{ folder });
    $utils->initialize('copy_master_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'folder');
    }
};

subtest 'copy_master_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('copy_master_slide', 'storage', $params{ storage });
    $utils->initialize('copy_master_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'storage');
    }
};

#
# copy_slide test
#
subtest 'copy_slide' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $utils->initialize('copy_slide', '');
    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        fail("copy_slide raised an exception: $@");
    }
    pass();
};

subtest 'copy_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('copy_slide', 'name', $params{ name });
    $utils->initialize('copy_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('copy_slide', 'name');
    }
};

subtest 'copy_slide invalid slide_to_copy' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ slide_to_copy } = $utils->invalidize_param_value('copy_slide', 'slide_to_copy', $params{ slide_to_copy });
    $utils->initialize('copy_slide', 'slide_to_copy', $params{ slide_to_copy });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'slide_to_copy', $params{ slide_to_copy }, $@);
    } else {
        $utils->assert_no_error('copy_slide', 'slide_to_copy');
    }
};

subtest 'copy_slide invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('copy_slide', 'position', $params{ position });
    $utils->initialize('copy_slide', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('copy_slide', 'position');
    }
};

subtest 'copy_slide invalid source' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ source } = $utils->invalidize_param_value('copy_slide', 'source', $params{ source });
    $utils->initialize('copy_slide', 'source', $params{ source });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'source', $params{ source }, $@);
    } else {
        $utils->assert_no_error('copy_slide', 'source');
    }
};

subtest 'copy_slide invalid source_password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ source_password } = $utils->invalidize_param_value('copy_slide', 'source_password', $params{ source_password });
    $utils->initialize('copy_slide', 'source_password', $params{ source_password });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'source_password', $params{ source_password }, $@);
    } else {
        $utils->assert_no_error('copy_slide', 'source_password');
    }
};

subtest 'copy_slide invalid source_storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ source_storage } = $utils->invalidize_param_value('copy_slide', 'source_storage', $params{ source_storage });
    $utils->initialize('copy_slide', 'source_storage', $params{ source_storage });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'source_storage', $params{ source_storage }, $@);
    } else {
        $utils->assert_no_error('copy_slide', 'source_storage');
    }
};

subtest 'copy_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('copy_slide', 'password', $params{ password });
    $utils->initialize('copy_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('copy_slide', 'password');
    }
};

subtest 'copy_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('copy_slide', 'folder', $params{ folder });
    $utils->initialize('copy_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('copy_slide', 'folder');
    }
};

subtest 'copy_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('copy_slide', 'storage', $params{ storage });
    $utils->initialize('copy_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('copy_slide', 'storage');
    }
};

#
# create_animation_effect test
#
subtest 'create_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $utils->initialize('create_animation_effect', '');
    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        fail("create_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'create_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_animation_effect', 'name', $params{ name });
    $utils->initialize('create_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'name');
    }
};

subtest 'create_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_animation_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('create_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'slide_index');
    }
};

subtest 'create_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('create_animation_effect', 'effect', $params{ effect });
    $utils->initialize('create_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'effect');
    }
};

subtest 'create_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_animation_effect', 'password', $params{ password });
    $utils->initialize('create_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'password');
    }
};

subtest 'create_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_animation_effect', 'folder', $params{ folder });
    $utils->initialize('create_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'folder');
    }
};

subtest 'create_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_animation_effect', 'storage', $params{ storage });
    $utils->initialize('create_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'storage');
    }
};

#
# create_animation_interactive_sequence test
#
subtest 'create_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('create_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("create_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'create_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'name', $params{ name });
    $utils->initialize('create_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'name');
    }
};

subtest 'create_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'slide_index', $params{ slide_index });
    $utils->initialize('create_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'slide_index');
    }
};

subtest 'create_animation_interactive_sequence invalid sequence' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'sequence', $params{ sequence });
    $utils->initialize('create_animation_interactive_sequence', 'sequence', $params{ sequence });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'sequence', $params{ sequence }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'sequence');
    }
};

subtest 'create_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'password', $params{ password });
    $utils->initialize('create_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'password');
    }
};

subtest 'create_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'folder', $params{ folder });
    $utils->initialize('create_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'folder');
    }
};

subtest 'create_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'storage', $params{ storage });
    $utils->initialize('create_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'storage');
    }
};

#
# create_animation_interactive_sequence_effect test
#
subtest 'create_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('create_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("create_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'create_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'name', $params{ name });
    $utils->initialize('create_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'name');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('create_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'slide_index');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });
    $utils->initialize('create_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'sequence_index');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'effect', $params{ effect });
    $utils->initialize('create_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'effect');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'password', $params{ password });
    $utils->initialize('create_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'password');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'folder', $params{ folder });
    $utils->initialize('create_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'folder');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'storage', $params{ storage });
    $utils->initialize('create_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'storage');
    }
};

#
# create_chart_category test
#
subtest 'create_chart_category' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $utils->initialize('create_chart_category', '');
    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        fail("create_chart_category raised an exception: $@");
    }
    pass();
};

subtest 'create_chart_category invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_chart_category', 'name', $params{ name });
    $utils->initialize('create_chart_category', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'name');
    }
};

subtest 'create_chart_category invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_chart_category', 'slide_index', $params{ slide_index });
    $utils->initialize('create_chart_category', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'slide_index');
    }
};

subtest 'create_chart_category invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_chart_category', 'shape_index', $params{ shape_index });
    $utils->initialize('create_chart_category', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'shape_index');
    }
};

subtest 'create_chart_category invalid category' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ category } = $utils->invalidize_param_value('create_chart_category', 'category', $params{ category });
    $utils->initialize('create_chart_category', 'category', $params{ category });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'category', $params{ category }, $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'category');
    }
};

subtest 'create_chart_category invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_chart_category', 'password', $params{ password });
    $utils->initialize('create_chart_category', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'password');
    }
};

subtest 'create_chart_category invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_chart_category', 'folder', $params{ folder });
    $utils->initialize('create_chart_category', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'folder');
    }
};

subtest 'create_chart_category invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_chart_category', 'storage', $params{ storage });
    $utils->initialize('create_chart_category', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'storage');
    }
};

#
# create_chart_data_point test
#
subtest 'create_chart_data_point' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $utils->initialize('create_chart_data_point', '');
    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        fail("create_chart_data_point raised an exception: $@");
    }
    pass();
};

subtest 'create_chart_data_point invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_chart_data_point', 'name', $params{ name });
    $utils->initialize('create_chart_data_point', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'name');
    }
};

subtest 'create_chart_data_point invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_chart_data_point', 'slide_index', $params{ slide_index });
    $utils->initialize('create_chart_data_point', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'slide_index');
    }
};

subtest 'create_chart_data_point invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_chart_data_point', 'shape_index', $params{ shape_index });
    $utils->initialize('create_chart_data_point', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'shape_index');
    }
};

subtest 'create_chart_data_point invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('create_chart_data_point', 'series_index', $params{ series_index });
    $utils->initialize('create_chart_data_point', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'series_index');
    }
};

subtest 'create_chart_data_point invalid data_point' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ data_point } = $utils->invalidize_param_value('create_chart_data_point', 'data_point', $params{ data_point });
    $utils->initialize('create_chart_data_point', 'data_point', $params{ data_point });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'data_point', $params{ data_point }, $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'data_point');
    }
};

subtest 'create_chart_data_point invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_chart_data_point', 'password', $params{ password });
    $utils->initialize('create_chart_data_point', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'password');
    }
};

subtest 'create_chart_data_point invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_chart_data_point', 'folder', $params{ folder });
    $utils->initialize('create_chart_data_point', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'folder');
    }
};

subtest 'create_chart_data_point invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_chart_data_point', 'storage', $params{ storage });
    $utils->initialize('create_chart_data_point', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'storage');
    }
};

#
# create_chart_series test
#
subtest 'create_chart_series' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $utils->initialize('create_chart_series', '');
    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        fail("create_chart_series raised an exception: $@");
    }
    pass();
};

subtest 'create_chart_series invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_chart_series', 'name', $params{ name });
    $utils->initialize('create_chart_series', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'name');
    }
};

subtest 'create_chart_series invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_chart_series', 'slide_index', $params{ slide_index });
    $utils->initialize('create_chart_series', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'slide_index');
    }
};

subtest 'create_chart_series invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_chart_series', 'shape_index', $params{ shape_index });
    $utils->initialize('create_chart_series', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'shape_index');
    }
};

subtest 'create_chart_series invalid series' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ series } = $utils->invalidize_param_value('create_chart_series', 'series', $params{ series });
    $utils->initialize('create_chart_series', 'series', $params{ series });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'series', $params{ series }, $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'series');
    }
};

subtest 'create_chart_series invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_chart_series', 'password', $params{ password });
    $utils->initialize('create_chart_series', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'password');
    }
};

subtest 'create_chart_series invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_chart_series', 'folder', $params{ folder });
    $utils->initialize('create_chart_series', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'folder');
    }
};

subtest 'create_chart_series invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_chart_series', 'storage', $params{ storage });
    $utils->initialize('create_chart_series', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'storage');
    }
};

#
# create_comment test
#
subtest 'create_comment' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $utils->initialize('create_comment', '');
    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        fail("create_comment raised an exception: $@");
    }
    pass();
};

subtest 'create_comment invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_comment', 'name', $params{ name });
    $utils->initialize('create_comment', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_comment', 'name');
    }
};

subtest 'create_comment invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_comment', 'slide_index', $params{ slide_index });
    $utils->initialize('create_comment', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_comment', 'slide_index');
    }
};

subtest 'create_comment invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_comment', 'dto', $params{ dto });
    $utils->initialize('create_comment', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_comment', 'dto');
    }
};

subtest 'create_comment invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_comment', 'password', $params{ password });
    $utils->initialize('create_comment', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_comment', 'password');
    }
};

subtest 'create_comment invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_comment', 'folder', $params{ folder });
    $utils->initialize('create_comment', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_comment', 'folder');
    }
};

subtest 'create_comment invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_comment', 'storage', $params{ storage });
    $utils->initialize('create_comment', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_comment', 'storage');
    }
};

#
# create_comment_online test
#
subtest 'create_comment_online' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $utils->initialize('create_comment_online', '');
    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        fail("create_comment_online raised an exception: $@");
    }
    pass();
};

subtest 'create_comment_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('create_comment_online', 'document', $params{ document });
    $utils->initialize('create_comment_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('create_comment_online', 'document');
    }
};

subtest 'create_comment_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_comment_online', 'slide_index', $params{ slide_index });
    $utils->initialize('create_comment_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_comment_online', 'slide_index');
    }
};

subtest 'create_comment_online invalid dto' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_comment_online', 'dto', $params{ dto });
    $utils->initialize('create_comment_online', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment_online', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_comment_online', 'dto');
    }
};

subtest 'create_comment_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideComment'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_comment_online', 'password', $params{ password });
    $utils->initialize('create_comment_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_comment_online', 'password');
    }
};

#
# create_folder test
#
subtest 'create_folder' => sub {
    my %params = ('path' => $utils->get_param_value('create_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('create_folder', 'storage_name', 'string'));
    $utils->initialize('create_folder', '');
    eval {
        my $result = $utils->{api}->create_folder(%params);
    };
    if ($@) {
        fail("create_folder raised an exception: $@");
    }
    pass();
};

subtest 'create_folder invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('create_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('create_folder', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('create_folder', 'path', $params{ path });
    $utils->initialize('create_folder', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->create_folder(%params);
    };
    if ($@) {
        $utils->assert_error('create_folder', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('create_folder', 'path');
    }
};

subtest 'create_folder invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('create_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('create_folder', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('create_folder', 'storage_name', $params{ storage_name });
    $utils->initialize('create_folder', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->create_folder(%params);
    };
    if ($@) {
        $utils->assert_error('create_folder', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('create_folder', 'storage_name');
    }
};

#
# create_image_watermark test
#
subtest 'create_image_watermark' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $utils->initialize('create_image_watermark', '');
    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        fail("create_image_watermark raised an exception: $@");
    }
    pass();
};

subtest 'create_image_watermark invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_image_watermark', 'name', $params{ name });
    $utils->initialize('create_image_watermark', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'name');
    }
};

subtest 'create_image_watermark invalid image' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ image } = $utils->invalidize_param_value('create_image_watermark', 'image', $params{ image });
    $utils->initialize('create_image_watermark', 'image', $params{ image });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'image', $params{ image }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'image');
    }
};

subtest 'create_image_watermark invalid picture_frame' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ picture_frame } = $utils->invalidize_param_value('create_image_watermark', 'picture_frame', $params{ picture_frame });
    $utils->initialize('create_image_watermark', 'picture_frame', $params{ picture_frame });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'picture_frame', $params{ picture_frame }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'picture_frame');
    }
};

subtest 'create_image_watermark invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_image_watermark', 'password', $params{ password });
    $utils->initialize('create_image_watermark', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'password');
    }
};

subtest 'create_image_watermark invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_image_watermark', 'folder', $params{ folder });
    $utils->initialize('create_image_watermark', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'folder');
    }
};

subtest 'create_image_watermark invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_image_watermark', 'storage', $params{ storage });
    $utils->initialize('create_image_watermark', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'storage');
    }
};

#
# create_image_watermark_online test
#
subtest 'create_image_watermark_online' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $utils->initialize('create_image_watermark_online', '');
    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        fail("create_image_watermark_online raised an exception: $@");
    }
    pass();
};

subtest 'create_image_watermark_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('create_image_watermark_online', 'document', $params{ document });
    $utils->initialize('create_image_watermark_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark_online', 'document');
    }
};

subtest 'create_image_watermark_online invalid image' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $params{ image } = $utils->invalidize_param_value('create_image_watermark_online', 'image', $params{ image });
    $utils->initialize('create_image_watermark_online', 'image', $params{ image });

    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark_online', 'image', $params{ image }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark_online', 'image');
    }
};

subtest 'create_image_watermark_online invalid picture_frame' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $params{ picture_frame } = $utils->invalidize_param_value('create_image_watermark_online', 'picture_frame', $params{ picture_frame });
    $utils->initialize('create_image_watermark_online', 'picture_frame', $params{ picture_frame });

    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark_online', 'picture_frame', $params{ picture_frame }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark_online', 'picture_frame');
    }
};

subtest 'create_image_watermark_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_image_watermark_online', 'password', $params{ password });
    $utils->initialize('create_image_watermark_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_image_watermark_online', 'password');
    }
};

#
# create_notes_slide test
#
subtest 'create_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $utils->initialize('create_notes_slide', '');
    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        fail("create_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'create_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_notes_slide', 'name', $params{ name });
    $utils->initialize('create_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'name');
    }
};

subtest 'create_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('create_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'slide_index');
    }
};

subtest 'create_notes_slide invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_notes_slide', 'dto', $params{ dto });
    $utils->initialize('create_notes_slide', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'dto');
    }
};

subtest 'create_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_notes_slide', 'password', $params{ password });
    $utils->initialize('create_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'password');
    }
};

subtest 'create_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_notes_slide', 'folder', $params{ folder });
    $utils->initialize('create_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'folder');
    }
};

subtest 'create_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_notes_slide', 'storage', $params{ storage });
    $utils->initialize('create_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'storage');
    }
};

#
# create_paragraph test
#
subtest 'create_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'));
    $utils->initialize('create_paragraph', '');
    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        fail("create_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'create_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_paragraph', 'name', $params{ name });
    $utils->initialize('create_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'name');
    }
};

subtest 'create_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('create_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'slide_index');
    }
};

subtest 'create_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('create_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'shape_index');
    }
};

subtest 'create_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_paragraph', 'dto', $params{ dto });
    $utils->initialize('create_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'dto');
    }
};

subtest 'create_paragraph invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_paragraph', 'position', $params{ position });
    $utils->initialize('create_paragraph', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'position');
    }
};

subtest 'create_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_paragraph', 'password', $params{ password });
    $utils->initialize('create_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'password');
    }
};

subtest 'create_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_paragraph', 'folder', $params{ folder });
    $utils->initialize('create_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'folder');
    }
};

subtest 'create_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_paragraph', 'storage', $params{ storage });
    $utils->initialize('create_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'storage');
    }
};

#
# create_portion test
#
subtest 'create_portion' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $utils->initialize('create_portion', '');
    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        fail("create_portion raised an exception: $@");
    }
    pass();
};

subtest 'create_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_portion', 'name', $params{ name });
    $utils->initialize('create_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_portion', 'name');
    }
};

subtest 'create_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('create_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_portion', 'slide_index');
    }
};

subtest 'create_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('create_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_portion', 'shape_index');
    }
};

subtest 'create_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('create_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('create_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('create_portion', 'paragraph_index');
    }
};

subtest 'create_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_portion', 'dto', $params{ dto });
    $utils->initialize('create_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_portion', 'dto');
    }
};

subtest 'create_portion invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_portion', 'position', $params{ position });
    $utils->initialize('create_portion', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_portion', 'position');
    }
};

subtest 'create_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_portion', 'password', $params{ password });
    $utils->initialize('create_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_portion', 'password');
    }
};

subtest 'create_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_portion', 'folder', $params{ folder });
    $utils->initialize('create_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_portion', 'folder');
    }
};

subtest 'create_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_portion', 'storage', $params{ storage });
    $utils->initialize('create_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_portion', 'storage');
    }
};

#
# create_presentation test
#
subtest 'create_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $utils->initialize('create_presentation', '');
    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        fail("create_presentation raised an exception: $@");
    }
    pass();
};

subtest 'create_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_presentation', 'name', $params{ name });
    $utils->initialize('create_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_presentation', 'name');
    }
};

subtest 'create_presentation invalid data' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ data } = $utils->invalidize_param_value('create_presentation', 'data', $params{ data });
    $utils->initialize('create_presentation', 'data', $params{ data });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'data', $params{ data }, $@);
    } else {
        $utils->assert_no_error('create_presentation', 'data');
    }
};

subtest 'create_presentation invalid input_password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ input_password } = $utils->invalidize_param_value('create_presentation', 'input_password', $params{ input_password });
    $utils->initialize('create_presentation', 'input_password', $params{ input_password });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'input_password', $params{ input_password }, $@);
    } else {
        $utils->assert_no_error('create_presentation', 'input_password');
    }
};

subtest 'create_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_presentation', 'password', $params{ password });
    $utils->initialize('create_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_presentation', 'password');
    }
};

subtest 'create_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_presentation', 'folder', $params{ folder });
    $utils->initialize('create_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_presentation', 'folder');
    }
};

subtest 'create_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_presentation', 'storage', $params{ storage });
    $utils->initialize('create_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_presentation', 'storage');
    }
};

#
# create_presentation_from_source test
#
subtest 'create_presentation_from_source' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $utils->initialize('create_presentation_from_source', '');
    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        fail("create_presentation_from_source raised an exception: $@");
    }
    pass();
};

subtest 'create_presentation_from_source invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_presentation_from_source', 'name', $params{ name });
    $utils->initialize('create_presentation_from_source', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'name');
    }
};

subtest 'create_presentation_from_source invalid source_path' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ source_path } = $utils->invalidize_param_value('create_presentation_from_source', 'source_path', $params{ source_path });
    $utils->initialize('create_presentation_from_source', 'source_path', $params{ source_path });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'source_path', $params{ source_path }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'source_path');
    }
};

subtest 'create_presentation_from_source invalid source_password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ source_password } = $utils->invalidize_param_value('create_presentation_from_source', 'source_password', $params{ source_password });
    $utils->initialize('create_presentation_from_source', 'source_password', $params{ source_password });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'source_password', $params{ source_password }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'source_password');
    }
};

subtest 'create_presentation_from_source invalid source_storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ source_storage } = $utils->invalidize_param_value('create_presentation_from_source', 'source_storage', $params{ source_storage });
    $utils->initialize('create_presentation_from_source', 'source_storage', $params{ source_storage });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'source_storage', $params{ source_storage }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'source_storage');
    }
};

subtest 'create_presentation_from_source invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_presentation_from_source', 'password', $params{ password });
    $utils->initialize('create_presentation_from_source', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'password');
    }
};

subtest 'create_presentation_from_source invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_presentation_from_source', 'folder', $params{ folder });
    $utils->initialize('create_presentation_from_source', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'folder');
    }
};

subtest 'create_presentation_from_source invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_presentation_from_source', 'storage', $params{ storage });
    $utils->initialize('create_presentation_from_source', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'storage');
    }
};

#
# create_presentation_from_template test
#
subtest 'create_presentation_from_template' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $utils->initialize('create_presentation_from_template', '');
    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        fail("create_presentation_from_template raised an exception: $@");
    }
    pass();
};

subtest 'create_presentation_from_template invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_presentation_from_template', 'name', $params{ name });
    $utils->initialize('create_presentation_from_template', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'name');
    }
};

subtest 'create_presentation_from_template invalid template_path' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ template_path } = $utils->invalidize_param_value('create_presentation_from_template', 'template_path', $params{ template_path });
    $utils->initialize('create_presentation_from_template', 'template_path', $params{ template_path });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'template_path', $params{ template_path }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'template_path');
    }
};

subtest 'create_presentation_from_template invalid data' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ data } = $utils->invalidize_param_value('create_presentation_from_template', 'data', $params{ data });
    $utils->initialize('create_presentation_from_template', 'data', $params{ data });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'data', $params{ data }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'data');
    }
};

subtest 'create_presentation_from_template invalid template_password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ template_password } = $utils->invalidize_param_value('create_presentation_from_template', 'template_password', $params{ template_password });
    $utils->initialize('create_presentation_from_template', 'template_password', $params{ template_password });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'template_password', $params{ template_password }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'template_password');
    }
};

subtest 'create_presentation_from_template invalid template_storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ template_storage } = $utils->invalidize_param_value('create_presentation_from_template', 'template_storage', $params{ template_storage });
    $utils->initialize('create_presentation_from_template', 'template_storage', $params{ template_storage });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'template_storage', $params{ template_storage }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'template_storage');
    }
};

subtest 'create_presentation_from_template invalid is_image_data_embedded' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ is_image_data_embedded } = $utils->invalidize_param_value('create_presentation_from_template', 'is_image_data_embedded', $params{ is_image_data_embedded });
    $utils->initialize('create_presentation_from_template', 'is_image_data_embedded', $params{ is_image_data_embedded });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'is_image_data_embedded', $params{ is_image_data_embedded }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'is_image_data_embedded');
    }
};

subtest 'create_presentation_from_template invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_presentation_from_template', 'password', $params{ password });
    $utils->initialize('create_presentation_from_template', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'password');
    }
};

subtest 'create_presentation_from_template invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_presentation_from_template', 'folder', $params{ folder });
    $utils->initialize('create_presentation_from_template', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'folder');
    }
};

subtest 'create_presentation_from_template invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_presentation_from_template', 'storage', $params{ storage });
    $utils->initialize('create_presentation_from_template', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'storage');
    }
};

#
# create_section test
#
subtest 'create_section' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $utils->initialize('create_section', '');
    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        fail("create_section raised an exception: $@");
    }
    pass();
};

subtest 'create_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_section', 'name', $params{ name });
    $utils->initialize('create_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_section', 'name');
    }
};

subtest 'create_section invalid section_name' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ section_name } = $utils->invalidize_param_value('create_section', 'section_name', $params{ section_name });
    $utils->initialize('create_section', 'section_name', $params{ section_name });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'section_name', $params{ section_name }, $@);
    } else {
        $utils->assert_no_error('create_section', 'section_name');
    }
};

subtest 'create_section invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_section', 'slide_index', $params{ slide_index });
    $utils->initialize('create_section', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_section', 'slide_index');
    }
};

subtest 'create_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_section', 'password', $params{ password });
    $utils->initialize('create_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_section', 'password');
    }
};

subtest 'create_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_section', 'folder', $params{ folder });
    $utils->initialize('create_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_section', 'folder');
    }
};

subtest 'create_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_section', 'storage', $params{ storage });
    $utils->initialize('create_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_section', 'storage');
    }
};

#
# create_shape test
#
subtest 'create_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'));
    $utils->initialize('create_shape', '');
    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        fail("create_shape raised an exception: $@");
    }
    pass();
};

subtest 'create_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_shape', 'name', $params{ name });
    $utils->initialize('create_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_shape', 'name');
    }
};

subtest 'create_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('create_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_shape', 'slide_index');
    }
};

subtest 'create_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_shape', 'dto', $params{ dto });
    $utils->initialize('create_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_shape', 'dto');
    }
};

subtest 'create_shape invalid shape_to_clone' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'));
    $params{ shape_to_clone } = $utils->invalidize_param_value('create_shape', 'shape_to_clone', $params{ shape_to_clone });
    $utils->initialize('create_shape', 'shape_to_clone', $params{ shape_to_clone });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'shape_to_clone', $params{ shape_to_clone }, $@);
    } else {
        $utils->assert_no_error('create_shape', 'shape_to_clone');
    }
};

subtest 'create_shape invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_shape', 'position', $params{ position });
    $utils->initialize('create_shape', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_shape', 'position');
    }
};

subtest 'create_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_shape', 'password', $params{ password });
    $utils->initialize('create_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_shape', 'password');
    }
};

subtest 'create_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_shape', 'folder', $params{ folder });
    $utils->initialize('create_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_shape', 'folder');
    }
};

subtest 'create_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_shape', 'storage', $params{ storage });
    $utils->initialize('create_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_shape', 'storage');
    }
};

#
# create_slide test
#
subtest 'create_slide' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $utils->initialize('create_slide', '');
    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        fail("create_slide raised an exception: $@");
    }
    pass();
};

subtest 'create_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_slide', 'name', $params{ name });
    $utils->initialize('create_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_slide', 'name');
    }
};

subtest 'create_slide invalid layout_alias' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ layout_alias } = $utils->invalidize_param_value('create_slide', 'layout_alias', $params{ layout_alias });
    $utils->initialize('create_slide', 'layout_alias', $params{ layout_alias });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'layout_alias', $params{ layout_alias }, $@);
    } else {
        $utils->assert_no_error('create_slide', 'layout_alias');
    }
};

subtest 'create_slide invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_slide', 'position', $params{ position });
    $utils->initialize('create_slide', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_slide', 'position');
    }
};

subtest 'create_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_slide', 'password', $params{ password });
    $utils->initialize('create_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_slide', 'password');
    }
};

subtest 'create_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_slide', 'folder', $params{ folder });
    $utils->initialize('create_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_slide', 'folder');
    }
};

subtest 'create_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_slide', 'storage', $params{ storage });
    $utils->initialize('create_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_slide', 'storage');
    }
};

#
# create_special_slide_animation_effect test
#
subtest 'create_special_slide_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $utils->initialize('create_special_slide_animation_effect', '');
    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        fail("create_special_slide_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'name', $params{ name });
    $utils->initialize('create_special_slide_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'name');
    }
};

subtest 'create_special_slide_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('create_special_slide_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'slide_index');
    }
};

subtest 'create_special_slide_animation_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'slide_type', $params{ slide_type });
    $utils->initialize('create_special_slide_animation_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'slide_type');
    }
};

subtest 'create_special_slide_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'effect', $params{ effect });
    $utils->initialize('create_special_slide_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'effect');
    }
};

subtest 'create_special_slide_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'password', $params{ password });
    $utils->initialize('create_special_slide_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'password');
    }
};

subtest 'create_special_slide_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'folder', $params{ folder });
    $utils->initialize('create_special_slide_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'folder');
    }
};

subtest 'create_special_slide_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'storage', $params{ storage });
    $utils->initialize('create_special_slide_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'storage');
    }
};

#
# create_special_slide_animation_interactive_sequence test
#
subtest 'create_special_slide_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('create_special_slide_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("create_special_slide_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'name', $params{ name });
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'name');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'slide_index');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type });
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'slide_type');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid sequence' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'sequence', $params{ sequence });
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'sequence', $params{ sequence });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'sequence', $params{ sequence }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'sequence');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'password', $params{ password });
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'password');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'folder', $params{ folder });
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'folder');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'storage', $params{ storage });
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'storage');
    }
};

#
# create_special_slide_animation_interactive_sequence_effect test
#
subtest 'create_special_slide_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("create_special_slide_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', $params{ name });
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'name');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'slide_index');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type });
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'slide_type');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'sequence_index');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'effect');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', $params{ password });
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'password');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'folder');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'storage');
    }
};

#
# create_special_slide_paragraph test
#
subtest 'create_special_slide_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $utils->initialize('create_special_slide_paragraph', '');
    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        fail("create_special_slide_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_paragraph', 'name', $params{ name });
    $utils->initialize('create_special_slide_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'name');
    }
};

subtest 'create_special_slide_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('create_special_slide_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'slide_index');
    }
};

subtest 'create_special_slide_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_paragraph', 'slide_type', $params{ slide_type });
    $utils->initialize('create_special_slide_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'slide_type');
    }
};

subtest 'create_special_slide_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_special_slide_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('create_special_slide_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'shape_index');
    }
};

subtest 'create_special_slide_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_special_slide_paragraph', 'dto', $params{ dto });
    $utils->initialize('create_special_slide_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'dto');
    }
};

subtest 'create_special_slide_paragraph invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_special_slide_paragraph', 'position', $params{ position });
    $utils->initialize('create_special_slide_paragraph', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'position');
    }
};

subtest 'create_special_slide_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_paragraph', 'password', $params{ password });
    $utils->initialize('create_special_slide_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'password');
    }
};

subtest 'create_special_slide_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_paragraph', 'folder', $params{ folder });
    $utils->initialize('create_special_slide_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'folder');
    }
};

subtest 'create_special_slide_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_paragraph', 'storage', $params{ storage });
    $utils->initialize('create_special_slide_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'storage');
    }
};

#
# create_special_slide_portion test
#
subtest 'create_special_slide_portion' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $utils->initialize('create_special_slide_portion', '');
    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        fail("create_special_slide_portion raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_portion', 'name', $params{ name });
    $utils->initialize('create_special_slide_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'name');
    }
};

subtest 'create_special_slide_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('create_special_slide_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'slide_index');
    }
};

subtest 'create_special_slide_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_portion', 'slide_type', $params{ slide_type });
    $utils->initialize('create_special_slide_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'slide_type');
    }
};

subtest 'create_special_slide_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_special_slide_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('create_special_slide_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'shape_index');
    }
};

subtest 'create_special_slide_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('create_special_slide_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('create_special_slide_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'paragraph_index');
    }
};

subtest 'create_special_slide_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_special_slide_portion', 'dto', $params{ dto });
    $utils->initialize('create_special_slide_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'dto');
    }
};

subtest 'create_special_slide_portion invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_special_slide_portion', 'position', $params{ position });
    $utils->initialize('create_special_slide_portion', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'position');
    }
};

subtest 'create_special_slide_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_portion', 'password', $params{ password });
    $utils->initialize('create_special_slide_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'password');
    }
};

subtest 'create_special_slide_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_portion', 'folder', $params{ folder });
    $utils->initialize('create_special_slide_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'folder');
    }
};

subtest 'create_special_slide_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_portion', 'storage', $params{ storage });
    $utils->initialize('create_special_slide_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'storage');
    }
};

#
# create_special_slide_shape test
#
subtest 'create_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $utils->initialize('create_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        fail("create_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_shape', 'name', $params{ name });
    $utils->initialize('create_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'name');
    }
};

subtest 'create_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('create_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'slide_index');
    }
};

subtest 'create_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_shape', 'slide_type', $params{ slide_type });
    $utils->initialize('create_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'slide_type');
    }
};

subtest 'create_special_slide_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_special_slide_shape', 'dto', $params{ dto });
    $utils->initialize('create_special_slide_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'dto');
    }
};

subtest 'create_special_slide_shape invalid shape_to_clone' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $params{ shape_to_clone } = $utils->invalidize_param_value('create_special_slide_shape', 'shape_to_clone', $params{ shape_to_clone });
    $utils->initialize('create_special_slide_shape', 'shape_to_clone', $params{ shape_to_clone });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'shape_to_clone', $params{ shape_to_clone }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'shape_to_clone');
    }
};

subtest 'create_special_slide_shape invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_special_slide_shape', 'position', $params{ position });
    $utils->initialize('create_special_slide_shape', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'position');
    }
};

subtest 'create_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_shape', 'password', $params{ password });
    $utils->initialize('create_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'password');
    }
};

subtest 'create_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_shape', 'folder', $params{ folder });
    $utils->initialize('create_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'folder');
    }
};

subtest 'create_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_shape', 'storage', $params{ storage });
    $utils->initialize('create_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'storage');
    }
};

#
# create_special_slide_subshape test
#
subtest 'create_special_slide_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $utils->initialize('create_special_slide_subshape', '');
    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        fail("create_special_slide_subshape raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_subshape', 'name', $params{ name });
    $utils->initialize('create_special_slide_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'name');
    }
};

subtest 'create_special_slide_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('create_special_slide_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'slide_index');
    }
};

subtest 'create_special_slide_subshape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_subshape', 'slide_type', $params{ slide_type });
    $utils->initialize('create_special_slide_subshape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'slide_type');
    }
};

subtest 'create_special_slide_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('create_special_slide_subshape', 'path', $params{ path });
    $utils->initialize('create_special_slide_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'path');
    }
};

subtest 'create_special_slide_subshape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_special_slide_subshape', 'dto', $params{ dto });
    $utils->initialize('create_special_slide_subshape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'dto');
    }
};

subtest 'create_special_slide_subshape invalid shape_to_clone' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ shape_to_clone } = $utils->invalidize_param_value('create_special_slide_subshape', 'shape_to_clone', $params{ shape_to_clone });
    $utils->initialize('create_special_slide_subshape', 'shape_to_clone', $params{ shape_to_clone });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'shape_to_clone', $params{ shape_to_clone }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'shape_to_clone');
    }
};

subtest 'create_special_slide_subshape invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_special_slide_subshape', 'position', $params{ position });
    $utils->initialize('create_special_slide_subshape', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'position');
    }
};

subtest 'create_special_slide_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_subshape', 'password', $params{ password });
    $utils->initialize('create_special_slide_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'password');
    }
};

subtest 'create_special_slide_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_subshape', 'folder', $params{ folder });
    $utils->initialize('create_special_slide_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'folder');
    }
};

subtest 'create_special_slide_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_special_slide_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_subshape', 'storage', $params{ storage });
    $utils->initialize('create_special_slide_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape', 'storage');
    }
};

#
# create_special_slide_subshape_paragraph test
#
subtest 'create_special_slide_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('create_special_slide_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        fail("create_special_slide_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('create_special_slide_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'name');
    }
};

subtest 'create_special_slide_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('create_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'slide_index');
    }
};

subtest 'create_special_slide_subshape_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type });
    $utils->initialize('create_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'slide_type');
    }
};

subtest 'create_special_slide_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('create_special_slide_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'path');
    }
};

subtest 'create_special_slide_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('create_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'shape_index');
    }
};

subtest 'create_special_slide_subshape_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'dto', $params{ dto });
    $utils->initialize('create_special_slide_subshape_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'dto');
    }
};

subtest 'create_special_slide_subshape_paragraph invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'position', $params{ position });
    $utils->initialize('create_special_slide_subshape_paragraph', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'position');
    }
};

subtest 'create_special_slide_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('create_special_slide_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'password');
    }
};

subtest 'create_special_slide_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('create_special_slide_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'folder');
    }
};

subtest 'create_special_slide_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('create_special_slide_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_paragraph', 'storage');
    }
};

#
# create_special_slide_subshape_portion test
#
subtest 'create_special_slide_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $utils->initialize('create_special_slide_subshape_portion', '');
    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        fail("create_special_slide_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'name', $params{ name });
    $utils->initialize('create_special_slide_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'name');
    }
};

subtest 'create_special_slide_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('create_special_slide_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'slide_index');
    }
};

subtest 'create_special_slide_subshape_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'slide_type', $params{ slide_type });
    $utils->initialize('create_special_slide_subshape_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'slide_type');
    }
};

subtest 'create_special_slide_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'path', $params{ path });
    $utils->initialize('create_special_slide_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'path');
    }
};

subtest 'create_special_slide_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('create_special_slide_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'shape_index');
    }
};

subtest 'create_special_slide_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('create_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'paragraph_index');
    }
};

subtest 'create_special_slide_subshape_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'dto', $params{ dto });
    $utils->initialize('create_special_slide_subshape_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'dto');
    }
};

subtest 'create_special_slide_subshape_portion invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'position', $params{ position });
    $utils->initialize('create_special_slide_subshape_portion', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'position');
    }
};

subtest 'create_special_slide_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'password', $params{ password });
    $utils->initialize('create_special_slide_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'password');
    }
};

subtest 'create_special_slide_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('create_special_slide_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'folder');
    }
};

subtest 'create_special_slide_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('create_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_subshape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('create_special_slide_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_special_slide_subshape_portion', 'storage');
    }
};

#
# create_subshape test
#
subtest 'create_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $utils->initialize('create_subshape', '');
    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        fail("create_subshape raised an exception: $@");
    }
    pass();
};

subtest 'create_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_subshape', 'name', $params{ name });
    $utils->initialize('create_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_subshape', 'name');
    }
};

subtest 'create_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('create_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_subshape', 'slide_index');
    }
};

subtest 'create_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('create_subshape', 'path', $params{ path });
    $utils->initialize('create_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('create_subshape', 'path');
    }
};

subtest 'create_subshape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_subshape', 'dto', $params{ dto });
    $utils->initialize('create_subshape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_subshape', 'dto');
    }
};

subtest 'create_subshape invalid shape_to_clone' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $params{ shape_to_clone } = $utils->invalidize_param_value('create_subshape', 'shape_to_clone', $params{ shape_to_clone });
    $utils->initialize('create_subshape', 'shape_to_clone', $params{ shape_to_clone });

    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape', 'shape_to_clone', $params{ shape_to_clone }, $@);
    } else {
        $utils->assert_no_error('create_subshape', 'shape_to_clone');
    }
};

subtest 'create_subshape invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_subshape', 'position', $params{ position });
    $utils->initialize('create_subshape', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_subshape', 'position');
    }
};

subtest 'create_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_subshape', 'password', $params{ password });
    $utils->initialize('create_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_subshape', 'password');
    }
};

subtest 'create_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_subshape', 'folder', $params{ folder });
    $utils->initialize('create_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_subshape', 'folder');
    }
};

subtest 'create_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape', 'path', 'string'), 'dto' => $utils->get_param_value('create_subshape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_subshape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_subshape', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_subshape', 'storage', $params{ storage });
    $utils->initialize('create_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_subshape', 'storage');
    }
};

#
# create_subshape_paragraph test
#
subtest 'create_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('create_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        fail("create_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'create_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('create_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_subshape_paragraph', 'name');
    }
};

subtest 'create_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('create_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_subshape_paragraph', 'slide_index');
    }
};

subtest 'create_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('create_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('create_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('create_subshape_paragraph', 'path');
    }
};

subtest 'create_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('create_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_subshape_paragraph', 'shape_index');
    }
};

subtest 'create_subshape_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_subshape_paragraph', 'dto', $params{ dto });
    $utils->initialize('create_subshape_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_subshape_paragraph', 'dto');
    }
};

subtest 'create_subshape_paragraph invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_subshape_paragraph', 'position', $params{ position });
    $utils->initialize('create_subshape_paragraph', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_paragraph', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_subshape_paragraph', 'position');
    }
};

subtest 'create_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('create_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_subshape_paragraph', 'password');
    }
};

subtest 'create_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('create_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_subshape_paragraph', 'folder');
    }
};

subtest 'create_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_subshape_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('create_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_subshape_paragraph', 'storage');
    }
};

#
# create_subshape_portion test
#
subtest 'create_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $utils->initialize('create_subshape_portion', '');
    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        fail("create_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'create_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_subshape_portion', 'name', $params{ name });
    $utils->initialize('create_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'name');
    }
};

subtest 'create_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('create_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'slide_index');
    }
};

subtest 'create_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('create_subshape_portion', 'path', $params{ path });
    $utils->initialize('create_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'path');
    }
};

subtest 'create_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('create_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'shape_index');
    }
};

subtest 'create_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('create_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('create_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'paragraph_index');
    }
};

subtest 'create_subshape_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_subshape_portion', 'dto', $params{ dto });
    $utils->initialize('create_subshape_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'dto');
    }
};

subtest 'create_subshape_portion invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_subshape_portion', 'position', $params{ position });
    $utils->initialize('create_subshape_portion', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'position', $params{ position }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'position');
    }
};

subtest 'create_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_subshape_portion', 'password', $params{ password });
    $utils->initialize('create_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'password');
    }
};

subtest 'create_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('create_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'folder');
    }
};

subtest 'create_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('create_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('create_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_subshape_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_subshape_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_subshape_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_subshape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('create_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_subshape_portion', 'storage');
    }
};

#
# create_watermark test
#
subtest 'create_watermark' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $utils->initialize('create_watermark', '');
    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        fail("create_watermark raised an exception: $@");
    }
    pass();
};

subtest 'create_watermark invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_watermark', 'name', $params{ name });
    $utils->initialize('create_watermark', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('create_watermark', 'name');
    }
};

subtest 'create_watermark invalid shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ shape } = $utils->invalidize_param_value('create_watermark', 'shape', $params{ shape });
    $utils->initialize('create_watermark', 'shape', $params{ shape });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'shape', $params{ shape }, $@);
    } else {
        $utils->assert_no_error('create_watermark', 'shape');
    }
};

subtest 'create_watermark invalid font_height' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ font_height } = $utils->invalidize_param_value('create_watermark', 'font_height', $params{ font_height });
    $utils->initialize('create_watermark', 'font_height', $params{ font_height });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'font_height', $params{ font_height }, $@);
    } else {
        $utils->assert_no_error('create_watermark', 'font_height');
    }
};

subtest 'create_watermark invalid text' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ text } = $utils->invalidize_param_value('create_watermark', 'text', $params{ text });
    $utils->initialize('create_watermark', 'text', $params{ text });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'text', $params{ text }, $@);
    } else {
        $utils->assert_no_error('create_watermark', 'text');
    }
};

subtest 'create_watermark invalid font_name' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ font_name } = $utils->invalidize_param_value('create_watermark', 'font_name', $params{ font_name });
    $utils->initialize('create_watermark', 'font_name', $params{ font_name });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'font_name', $params{ font_name }, $@);
    } else {
        $utils->assert_no_error('create_watermark', 'font_name');
    }
};

subtest 'create_watermark invalid font_color' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ font_color } = $utils->invalidize_param_value('create_watermark', 'font_color', $params{ font_color });
    $utils->initialize('create_watermark', 'font_color', $params{ font_color });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'font_color', $params{ font_color }, $@);
    } else {
        $utils->assert_no_error('create_watermark', 'font_color');
    }
};

subtest 'create_watermark invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_watermark', 'password', $params{ password });
    $utils->initialize('create_watermark', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_watermark', 'password');
    }
};

subtest 'create_watermark invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_watermark', 'folder', $params{ folder });
    $utils->initialize('create_watermark', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('create_watermark', 'folder');
    }
};

subtest 'create_watermark invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_watermark', 'storage', $params{ storage });
    $utils->initialize('create_watermark', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('create_watermark', 'storage');
    }
};

#
# create_watermark_online test
#
subtest 'create_watermark_online' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $utils->initialize('create_watermark_online', '');
    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        fail("create_watermark_online raised an exception: $@");
    }
    pass();
};

subtest 'create_watermark_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('create_watermark_online', 'document', $params{ document });
    $utils->initialize('create_watermark_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'document');
    }
};

subtest 'create_watermark_online invalid shape' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ shape } = $utils->invalidize_param_value('create_watermark_online', 'shape', $params{ shape });
    $utils->initialize('create_watermark_online', 'shape', $params{ shape });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'shape', $params{ shape }, $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'shape');
    }
};

subtest 'create_watermark_online invalid font_height' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ font_height } = $utils->invalidize_param_value('create_watermark_online', 'font_height', $params{ font_height });
    $utils->initialize('create_watermark_online', 'font_height', $params{ font_height });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'font_height', $params{ font_height }, $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'font_height');
    }
};

subtest 'create_watermark_online invalid text' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ text } = $utils->invalidize_param_value('create_watermark_online', 'text', $params{ text });
    $utils->initialize('create_watermark_online', 'text', $params{ text });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'text', $params{ text }, $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'text');
    }
};

subtest 'create_watermark_online invalid font_name' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ font_name } = $utils->invalidize_param_value('create_watermark_online', 'font_name', $params{ font_name });
    $utils->initialize('create_watermark_online', 'font_name', $params{ font_name });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'font_name', $params{ font_name }, $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'font_name');
    }
};

subtest 'create_watermark_online invalid font_color' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ font_color } = $utils->invalidize_param_value('create_watermark_online', 'font_color', $params{ font_color });
    $utils->initialize('create_watermark_online', 'font_color', $params{ font_color });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'font_color', $params{ font_color }, $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'font_color');
    }
};

subtest 'create_watermark_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_watermark_online', 'password', $params{ password });
    $utils->initialize('create_watermark_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'password');
    }
};

#
# delete_animation test
#
subtest 'delete_animation' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $utils->initialize('delete_animation', '');
    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        fail("delete_animation raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation', 'name', $params{ name });
    $utils->initialize('delete_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_animation', 'name');
    }
};

subtest 'delete_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation', 'slide_index');
    }
};

subtest 'delete_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation', 'password', $params{ password });
    $utils->initialize('delete_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_animation', 'password');
    }
};

subtest 'delete_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation', 'folder', $params{ folder });
    $utils->initialize('delete_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_animation', 'folder');
    }
};

subtest 'delete_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation', 'storage', $params{ storage });
    $utils->initialize('delete_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_animation', 'storage');
    }
};

#
# delete_animation_effect test
#
subtest 'delete_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $utils->initialize('delete_animation_effect', '');
    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        fail("delete_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_effect', 'name', $params{ name });
    $utils->initialize('delete_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'name');
    }
};

subtest 'delete_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'slide_index');
    }
};

subtest 'delete_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_animation_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('delete_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'effect_index');
    }
};

subtest 'delete_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_effect', 'password', $params{ password });
    $utils->initialize('delete_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'password');
    }
};

subtest 'delete_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_effect', 'folder', $params{ folder });
    $utils->initialize('delete_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'folder');
    }
};

subtest 'delete_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_effect', 'storage', $params{ storage });
    $utils->initialize('delete_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'storage');
    }
};

#
# delete_animation_interactive_sequence test
#
subtest 'delete_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('delete_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("delete_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'name', $params{ name });
    $utils->initialize('delete_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'name');
    }
};

subtest 'delete_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'slide_index');
    }
};

subtest 'delete_animation_interactive_sequence invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'sequence_index', $params{ sequence_index });
    $utils->initialize('delete_animation_interactive_sequence', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'sequence_index');
    }
};

subtest 'delete_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'password', $params{ password });
    $utils->initialize('delete_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'password');
    }
};

subtest 'delete_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'folder', $params{ folder });
    $utils->initialize('delete_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'folder');
    }
};

subtest 'delete_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'storage', $params{ storage });
    $utils->initialize('delete_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'storage');
    }
};

#
# delete_animation_interactive_sequence_effect test
#
subtest 'delete_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('delete_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("delete_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'name', $params{ name });
    $utils->initialize('delete_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'name');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'slide_index');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });
    $utils->initialize('delete_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'sequence_index');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('delete_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'effect_index');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'password', $params{ password });
    $utils->initialize('delete_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'password');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'folder', $params{ folder });
    $utils->initialize('delete_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'folder');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'storage', $params{ storage });
    $utils->initialize('delete_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'storage');
    }
};

#
# delete_animation_interactive_sequences test
#
subtest 'delete_animation_interactive_sequences' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $utils->initialize('delete_animation_interactive_sequences', '');
    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        fail("delete_animation_interactive_sequences raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_interactive_sequences invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'name', $params{ name });
    $utils->initialize('delete_animation_interactive_sequences', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'name');
    }
};

subtest 'delete_animation_interactive_sequences invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_animation_interactive_sequences', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'slide_index');
    }
};

subtest 'delete_animation_interactive_sequences invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'password', $params{ password });
    $utils->initialize('delete_animation_interactive_sequences', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'password');
    }
};

subtest 'delete_animation_interactive_sequences invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'folder', $params{ folder });
    $utils->initialize('delete_animation_interactive_sequences', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'folder');
    }
};

subtest 'delete_animation_interactive_sequences invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'storage', $params{ storage });
    $utils->initialize('delete_animation_interactive_sequences', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'storage');
    }
};

#
# delete_animation_main_sequence test
#
subtest 'delete_animation_main_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $utils->initialize('delete_animation_main_sequence', '');
    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        fail("delete_animation_main_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_main_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_main_sequence', 'name', $params{ name });
    $utils->initialize('delete_animation_main_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'name');
    }
};

subtest 'delete_animation_main_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_main_sequence', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_animation_main_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'slide_index');
    }
};

subtest 'delete_animation_main_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_main_sequence', 'password', $params{ password });
    $utils->initialize('delete_animation_main_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'password');
    }
};

subtest 'delete_animation_main_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_main_sequence', 'folder', $params{ folder });
    $utils->initialize('delete_animation_main_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'folder');
    }
};

subtest 'delete_animation_main_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_main_sequence', 'storage', $params{ storage });
    $utils->initialize('delete_animation_main_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'storage');
    }
};

#
# delete_background test
#
subtest 'delete_background' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $utils->initialize('delete_background', '');
    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        fail("delete_background raised an exception: $@");
    }
    pass();
};

subtest 'delete_background invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_background', 'name', $params{ name });
    $utils->initialize('delete_background', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_background', 'name');
    }
};

subtest 'delete_background invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_background', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_background', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_background', 'slide_index');
    }
};

subtest 'delete_background invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_background', 'password', $params{ password });
    $utils->initialize('delete_background', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_background', 'password');
    }
};

subtest 'delete_background invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_background', 'folder', $params{ folder });
    $utils->initialize('delete_background', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_background', 'folder');
    }
};

subtest 'delete_background invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_background', 'storage', $params{ storage });
    $utils->initialize('delete_background', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_background', 'storage');
    }
};

#
# delete_chart_category test
#
subtest 'delete_chart_category' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $utils->initialize('delete_chart_category', '');
    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        fail("delete_chart_category raised an exception: $@");
    }
    pass();
};

subtest 'delete_chart_category invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_chart_category', 'name', $params{ name });
    $utils->initialize('delete_chart_category', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'name');
    }
};

subtest 'delete_chart_category invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_chart_category', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_chart_category', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'slide_index');
    }
};

subtest 'delete_chart_category invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_chart_category', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_chart_category', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'shape_index');
    }
};

subtest 'delete_chart_category invalid category_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ category_index } = $utils->invalidize_param_value('delete_chart_category', 'category_index', $params{ category_index });
    $utils->initialize('delete_chart_category', 'category_index', $params{ category_index });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'category_index', $params{ category_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'category_index');
    }
};

subtest 'delete_chart_category invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_chart_category', 'password', $params{ password });
    $utils->initialize('delete_chart_category', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'password');
    }
};

subtest 'delete_chart_category invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_chart_category', 'folder', $params{ folder });
    $utils->initialize('delete_chart_category', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'folder');
    }
};

subtest 'delete_chart_category invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_chart_category', 'storage', $params{ storage });
    $utils->initialize('delete_chart_category', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'storage');
    }
};

#
# delete_chart_data_point test
#
subtest 'delete_chart_data_point' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $utils->initialize('delete_chart_data_point', '');
    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        fail("delete_chart_data_point raised an exception: $@");
    }
    pass();
};

subtest 'delete_chart_data_point invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_chart_data_point', 'name', $params{ name });
    $utils->initialize('delete_chart_data_point', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'name');
    }
};

subtest 'delete_chart_data_point invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_chart_data_point', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_chart_data_point', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'slide_index');
    }
};

subtest 'delete_chart_data_point invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_chart_data_point', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_chart_data_point', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'shape_index');
    }
};

subtest 'delete_chart_data_point invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('delete_chart_data_point', 'series_index', $params{ series_index });
    $utils->initialize('delete_chart_data_point', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'series_index');
    }
};

subtest 'delete_chart_data_point invalid point_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ point_index } = $utils->invalidize_param_value('delete_chart_data_point', 'point_index', $params{ point_index });
    $utils->initialize('delete_chart_data_point', 'point_index', $params{ point_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'point_index', $params{ point_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'point_index');
    }
};

subtest 'delete_chart_data_point invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_chart_data_point', 'password', $params{ password });
    $utils->initialize('delete_chart_data_point', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'password');
    }
};

subtest 'delete_chart_data_point invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_chart_data_point', 'folder', $params{ folder });
    $utils->initialize('delete_chart_data_point', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'folder');
    }
};

subtest 'delete_chart_data_point invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_chart_data_point', 'storage', $params{ storage });
    $utils->initialize('delete_chart_data_point', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'storage');
    }
};

#
# delete_chart_series test
#
subtest 'delete_chart_series' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $utils->initialize('delete_chart_series', '');
    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        fail("delete_chart_series raised an exception: $@");
    }
    pass();
};

subtest 'delete_chart_series invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_chart_series', 'name', $params{ name });
    $utils->initialize('delete_chart_series', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'name');
    }
};

subtest 'delete_chart_series invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_chart_series', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_chart_series', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'slide_index');
    }
};

subtest 'delete_chart_series invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_chart_series', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_chart_series', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'shape_index');
    }
};

subtest 'delete_chart_series invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('delete_chart_series', 'series_index', $params{ series_index });
    $utils->initialize('delete_chart_series', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'series_index');
    }
};

subtest 'delete_chart_series invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_chart_series', 'password', $params{ password });
    $utils->initialize('delete_chart_series', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'password');
    }
};

subtest 'delete_chart_series invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_chart_series', 'folder', $params{ folder });
    $utils->initialize('delete_chart_series', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'folder');
    }
};

subtest 'delete_chart_series invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_chart_series', 'storage', $params{ storage });
    $utils->initialize('delete_chart_series', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'storage');
    }
};

#
# delete_comments test
#
subtest 'delete_comments' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $utils->initialize('delete_comments', '');
    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        fail("delete_comments raised an exception: $@");
    }
    pass();
};

subtest 'delete_comments invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_comments', 'name', $params{ name });
    $utils->initialize('delete_comments', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_comments', 'name');
    }
};

subtest 'delete_comments invalid author' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ author } = $utils->invalidize_param_value('delete_comments', 'author', $params{ author });
    $utils->initialize('delete_comments', 'author', $params{ author });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'author', $params{ author }, $@);
    } else {
        $utils->assert_no_error('delete_comments', 'author');
    }
};

subtest 'delete_comments invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_comments', 'password', $params{ password });
    $utils->initialize('delete_comments', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_comments', 'password');
    }
};

subtest 'delete_comments invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_comments', 'folder', $params{ folder });
    $utils->initialize('delete_comments', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_comments', 'folder');
    }
};

subtest 'delete_comments invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_comments', 'storage', $params{ storage });
    $utils->initialize('delete_comments', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_comments', 'storage');
    }
};

#
# delete_comments_online test
#
subtest 'delete_comments_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_comments_online', 'document', 'File'), 'author' => $utils->get_param_value('delete_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments_online', 'password', 'string'));
    $utils->initialize('delete_comments_online', '');
    eval {
        my $result = $utils->{api}->delete_comments_online(%params);
    };
    if ($@) {
        fail("delete_comments_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_comments_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_comments_online', 'document', 'File'), 'author' => $utils->get_param_value('delete_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_comments_online', 'document', $params{ document });
    $utils->initialize('delete_comments_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('delete_comments_online', 'document');
    }
};

subtest 'delete_comments_online invalid author' => sub {
    my %params = ('document' => $utils->get_param_value('delete_comments_online', 'document', 'File'), 'author' => $utils->get_param_value('delete_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments_online', 'password', 'string'));
    $params{ author } = $utils->invalidize_param_value('delete_comments_online', 'author', $params{ author });
    $utils->initialize('delete_comments_online', 'author', $params{ author });

    eval {
        my $result = $utils->{api}->delete_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments_online', 'author', $params{ author }, $@);
    } else {
        $utils->assert_no_error('delete_comments_online', 'author');
    }
};

subtest 'delete_comments_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_comments_online', 'document', 'File'), 'author' => $utils->get_param_value('delete_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_comments_online', 'password', $params{ password });
    $utils->initialize('delete_comments_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_comments_online', 'password');
    }
};

#
# delete_document_properties test
#
subtest 'delete_document_properties' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $utils->initialize('delete_document_properties', '');
    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        fail("delete_document_properties raised an exception: $@");
    }
    pass();
};

subtest 'delete_document_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_document_properties', 'name', $params{ name });
    $utils->initialize('delete_document_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_document_properties', 'name');
    }
};

subtest 'delete_document_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_document_properties', 'password', $params{ password });
    $utils->initialize('delete_document_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_document_properties', 'password');
    }
};

subtest 'delete_document_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_document_properties', 'folder', $params{ folder });
    $utils->initialize('delete_document_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_document_properties', 'folder');
    }
};

subtest 'delete_document_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_document_properties', 'storage', $params{ storage });
    $utils->initialize('delete_document_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_document_properties', 'storage');
    }
};

#
# delete_document_property test
#
subtest 'delete_document_property' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $utils->initialize('delete_document_property', '');
    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        fail("delete_document_property raised an exception: $@");
    }
    pass();
};

subtest 'delete_document_property invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_document_property', 'name', $params{ name });
    $utils->initialize('delete_document_property', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'name');
    }
};

subtest 'delete_document_property invalid property_name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ property_name } = $utils->invalidize_param_value('delete_document_property', 'property_name', $params{ property_name });
    $utils->initialize('delete_document_property', 'property_name', $params{ property_name });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'property_name', $params{ property_name }, $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'property_name');
    }
};

subtest 'delete_document_property invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_document_property', 'password', $params{ password });
    $utils->initialize('delete_document_property', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'password');
    }
};

subtest 'delete_document_property invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_document_property', 'folder', $params{ folder });
    $utils->initialize('delete_document_property', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'folder');
    }
};

subtest 'delete_document_property invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_document_property', 'storage', $params{ storage });
    $utils->initialize('delete_document_property', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'storage');
    }
};

#
# delete_file test
#
subtest 'delete_file' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $utils->initialize('delete_file', '');
    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        fail("delete_file raised an exception: $@");
    }
    pass();
};

subtest 'delete_file invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_file', 'path', $params{ path });
    $utils->initialize('delete_file', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        $utils->assert_error('delete_file', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_file', 'path');
    }
};

subtest 'delete_file invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('delete_file', 'storage_name', $params{ storage_name });
    $utils->initialize('delete_file', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        $utils->assert_error('delete_file', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('delete_file', 'storage_name');
    }
};

subtest 'delete_file invalid version_id' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('delete_file', 'version_id', $params{ version_id });
    $utils->initialize('delete_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        $utils->assert_error('delete_file', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('delete_file', 'version_id');
    }
};

#
# delete_folder test
#
subtest 'delete_folder' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $utils->initialize('delete_folder', '');
    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        fail("delete_folder raised an exception: $@");
    }
    pass();
};

subtest 'delete_folder invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $params{ path } = $utils->invalidize_param_value('delete_folder', 'path', $params{ path });
    $utils->initialize('delete_folder', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        $utils->assert_error('delete_folder', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_folder', 'path');
    }
};

subtest 'delete_folder invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $params{ storage_name } = $utils->invalidize_param_value('delete_folder', 'storage_name', $params{ storage_name });
    $utils->initialize('delete_folder', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        $utils->assert_error('delete_folder', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('delete_folder', 'storage_name');
    }
};

subtest 'delete_folder invalid recursive' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $params{ recursive } = $utils->invalidize_param_value('delete_folder', 'recursive', $params{ recursive });
    $utils->initialize('delete_folder', 'recursive', $params{ recursive });

    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        $utils->assert_error('delete_folder', 'recursive', $params{ recursive }, $@);
    } else {
        $utils->assert_no_error('delete_folder', 'recursive');
    }
};

#
# delete_notes_slide test
#
subtest 'delete_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $utils->initialize('delete_notes_slide', '');
    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        fail("delete_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'delete_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_notes_slide', 'name', $params{ name });
    $utils->initialize('delete_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'name');
    }
};

subtest 'delete_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'slide_index');
    }
};

subtest 'delete_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_notes_slide', 'password', $params{ password });
    $utils->initialize('delete_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'password');
    }
};

subtest 'delete_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_notes_slide', 'folder', $params{ folder });
    $utils->initialize('delete_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'folder');
    }
};

subtest 'delete_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_notes_slide', 'storage', $params{ storage });
    $utils->initialize('delete_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'storage');
    }
};

#
# delete_paragraph test
#
subtest 'delete_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $utils->initialize('delete_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        fail("delete_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_paragraph', 'name', $params{ name });
    $utils->initialize('delete_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'name');
    }
};

subtest 'delete_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'slide_index');
    }
};

subtest 'delete_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'shape_index');
    }
};

subtest 'delete_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'paragraph_index');
    }
};

subtest 'delete_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_paragraph', 'password', $params{ password });
    $utils->initialize('delete_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'password');
    }
};

subtest 'delete_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_paragraph', 'folder', $params{ folder });
    $utils->initialize('delete_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'folder');
    }
};

subtest 'delete_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_paragraph', 'storage', $params{ storage });
    $utils->initialize('delete_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'storage');
    }
};

#
# delete_paragraphs test
#
subtest 'delete_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $utils->initialize('delete_paragraphs', '');
    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        fail("delete_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'delete_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_paragraphs', 'name', $params{ name });
    $utils->initialize('delete_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'name');
    }
};

subtest 'delete_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'slide_index');
    }
};

subtest 'delete_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'shape_index');
    }
};

subtest 'delete_paragraphs invalid paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ paragraphs } = $utils->invalidize_param_value('delete_paragraphs', 'paragraphs', $params{ paragraphs });
    $utils->initialize('delete_paragraphs', 'paragraphs', $params{ paragraphs });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'paragraphs', $params{ paragraphs }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'paragraphs');
    }
};

subtest 'delete_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_paragraphs', 'password', $params{ password });
    $utils->initialize('delete_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'password');
    }
};

subtest 'delete_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_paragraphs', 'folder', $params{ folder });
    $utils->initialize('delete_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'folder');
    }
};

subtest 'delete_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_paragraphs', 'storage', $params{ storage });
    $utils->initialize('delete_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'storage');
    }
};

#
# delete_portion test
#
subtest 'delete_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $utils->initialize('delete_portion', '');
    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        fail("delete_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_portion', 'name', $params{ name });
    $utils->initialize('delete_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'name');
    }
};

subtest 'delete_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'slide_index');
    }
};

subtest 'delete_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'shape_index');
    }
};

subtest 'delete_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'paragraph_index');
    }
};

subtest 'delete_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('delete_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'portion_index');
    }
};

subtest 'delete_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_portion', 'password', $params{ password });
    $utils->initialize('delete_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'password');
    }
};

subtest 'delete_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_portion', 'folder', $params{ folder });
    $utils->initialize('delete_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'folder');
    }
};

subtest 'delete_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_portion', 'storage', $params{ storage });
    $utils->initialize('delete_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_portion', 'storage');
    }
};

#
# delete_portions test
#
subtest 'delete_portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $utils->initialize('delete_portions', '');
    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        fail("delete_portions raised an exception: $@");
    }
    pass();
};

subtest 'delete_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_portions', 'name', $params{ name });
    $utils->initialize('delete_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'name');
    }
};

subtest 'delete_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'slide_index');
    }
};

subtest 'delete_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'shape_index');
    }
};

subtest 'delete_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'paragraph_index');
    }
};

subtest 'delete_portions invalid portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ portions } = $utils->invalidize_param_value('delete_portions', 'portions', $params{ portions });
    $utils->initialize('delete_portions', 'portions', $params{ portions });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'portions', $params{ portions }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'portions');
    }
};

subtest 'delete_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_portions', 'password', $params{ password });
    $utils->initialize('delete_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'password');
    }
};

subtest 'delete_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_portions', 'folder', $params{ folder });
    $utils->initialize('delete_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'folder');
    }
};

subtest 'delete_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_portions', 'storage', $params{ storage });
    $utils->initialize('delete_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_portions', 'storage');
    }
};

#
# delete_protection test
#
subtest 'delete_protection' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $utils->initialize('delete_protection', '');
    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        fail("delete_protection raised an exception: $@");
    }
    pass();
};

subtest 'delete_protection invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_protection', 'name', $params{ name });
    $utils->initialize('delete_protection', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_protection', 'name');
    }
};

subtest 'delete_protection invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_protection', 'password', $params{ password });
    $utils->initialize('delete_protection', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_protection', 'password');
    }
};

subtest 'delete_protection invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_protection', 'folder', $params{ folder });
    $utils->initialize('delete_protection', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_protection', 'folder');
    }
};

subtest 'delete_protection invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_protection', 'storage', $params{ storage });
    $utils->initialize('delete_protection', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_protection', 'storage');
    }
};

#
# delete_protection_online test
#
subtest 'delete_protection_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_protection_online', 'document', 'File'), 'password' => $utils->get_param_value('delete_protection_online', 'password', 'string'));
    $utils->initialize('delete_protection_online', '');
    eval {
        my $result = $utils->{api}->delete_protection_online(%params);
    };
    if ($@) {
        fail("delete_protection_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_protection_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_protection_online', 'document', 'File'), 'password' => $utils->get_param_value('delete_protection_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_protection_online', 'document', $params{ document });
    $utils->initialize('delete_protection_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('delete_protection_online', 'document');
    }
};

subtest 'delete_protection_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_protection_online', 'document', 'File'), 'password' => $utils->get_param_value('delete_protection_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_protection_online', 'password', $params{ password });
    $utils->initialize('delete_protection_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_protection_online', 'password');
    }
};

#
# delete_section test
#
subtest 'delete_section' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $utils->initialize('delete_section', '');
    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        fail("delete_section raised an exception: $@");
    }
    pass();
};

subtest 'delete_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_section', 'name', $params{ name });
    $utils->initialize('delete_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'name');
    }
};

subtest 'delete_section invalid section_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ section_index } = $utils->invalidize_param_value('delete_section', 'section_index', $params{ section_index });
    $utils->initialize('delete_section', 'section_index', $params{ section_index });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'section_index', $params{ section_index }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'section_index');
    }
};

subtest 'delete_section invalid with_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ with_slides } = $utils->invalidize_param_value('delete_section', 'with_slides', $params{ with_slides });
    $utils->initialize('delete_section', 'with_slides', $params{ with_slides });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'with_slides', $params{ with_slides }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'with_slides');
    }
};

subtest 'delete_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_section', 'password', $params{ password });
    $utils->initialize('delete_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'password');
    }
};

subtest 'delete_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_section', 'folder', $params{ folder });
    $utils->initialize('delete_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'folder');
    }
};

subtest 'delete_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_section', 'storage', $params{ storage });
    $utils->initialize('delete_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_section', 'storage');
    }
};

#
# delete_sections test
#
subtest 'delete_sections' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $utils->initialize('delete_sections', '');
    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        fail("delete_sections raised an exception: $@");
    }
    pass();
};

subtest 'delete_sections invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_sections', 'name', $params{ name });
    $utils->initialize('delete_sections', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'name');
    }
};

subtest 'delete_sections invalid sections' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ sections } = $utils->invalidize_param_value('delete_sections', 'sections', $params{ sections });
    $utils->initialize('delete_sections', 'sections', $params{ sections });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'sections', $params{ sections }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'sections');
    }
};

subtest 'delete_sections invalid with_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ with_slides } = $utils->invalidize_param_value('delete_sections', 'with_slides', $params{ with_slides });
    $utils->initialize('delete_sections', 'with_slides', $params{ with_slides });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'with_slides', $params{ with_slides }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'with_slides');
    }
};

subtest 'delete_sections invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_sections', 'password', $params{ password });
    $utils->initialize('delete_sections', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'password');
    }
};

subtest 'delete_sections invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_sections', 'folder', $params{ folder });
    $utils->initialize('delete_sections', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'folder');
    }
};

subtest 'delete_sections invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'string'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_sections', 'storage', $params{ storage });
    $utils->initialize('delete_sections', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_sections', 'storage');
    }
};

#
# delete_shape test
#
subtest 'delete_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'));
    $utils->initialize('delete_shape', '');
    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        fail("delete_shape raised an exception: $@");
    }
    pass();
};

subtest 'delete_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_shape', 'name', $params{ name });
    $utils->initialize('delete_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_shape', 'name');
    }
};

subtest 'delete_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_shape', 'slide_index');
    }
};

subtest 'delete_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_shape', 'shape_index');
    }
};

subtest 'delete_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_shape', 'password', $params{ password });
    $utils->initialize('delete_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_shape', 'password');
    }
};

subtest 'delete_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_shape', 'folder', $params{ folder });
    $utils->initialize('delete_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_shape', 'folder');
    }
};

subtest 'delete_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_shape', 'storage', $params{ storage });
    $utils->initialize('delete_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_shape', 'storage');
    }
};

#
# delete_shapes test
#
subtest 'delete_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'));
    $utils->initialize('delete_shapes', '');
    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        fail("delete_shapes raised an exception: $@");
    }
    pass();
};

subtest 'delete_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_shapes', 'name', $params{ name });
    $utils->initialize('delete_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'name');
    }
};

subtest 'delete_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'slide_index');
    }
};

subtest 'delete_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('delete_shapes', 'shapes', $params{ shapes });
    $utils->initialize('delete_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'shapes', $params{ shapes }, $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'shapes');
    }
};

subtest 'delete_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_shapes', 'password', $params{ password });
    $utils->initialize('delete_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'password');
    }
};

subtest 'delete_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_shapes', 'folder', $params{ folder });
    $utils->initialize('delete_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'folder');
    }
};

subtest 'delete_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_shapes', 'storage', $params{ storage });
    $utils->initialize('delete_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'storage');
    }
};

#
# delete_slide test
#
subtest 'delete_slide' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $utils->initialize('delete_slide', '');
    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        fail("delete_slide raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide', 'name', $params{ name });
    $utils->initialize('delete_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide', 'name');
    }
};

subtest 'delete_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide', 'slide_index');
    }
};

subtest 'delete_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide', 'password', $params{ password });
    $utils->initialize('delete_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide', 'password');
    }
};

subtest 'delete_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide', 'folder', $params{ folder });
    $utils->initialize('delete_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide', 'folder');
    }
};

subtest 'delete_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide', 'storage', $params{ storage });
    $utils->initialize('delete_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide', 'storage');
    }
};

#
# delete_slide_comments test
#
subtest 'delete_slide_comments' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $utils->initialize('delete_slide_comments', '');
    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        fail("delete_slide_comments raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_comments invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_comments', 'name', $params{ name });
    $utils->initialize('delete_slide_comments', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'name');
    }
};

subtest 'delete_slide_comments invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_comments', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_comments', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'slide_index');
    }
};

subtest 'delete_slide_comments invalid author' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ author } = $utils->invalidize_param_value('delete_slide_comments', 'author', $params{ author });
    $utils->initialize('delete_slide_comments', 'author', $params{ author });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'author', $params{ author }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'author');
    }
};

subtest 'delete_slide_comments invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_comments', 'password', $params{ password });
    $utils->initialize('delete_slide_comments', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'password');
    }
};

subtest 'delete_slide_comments invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_comments', 'folder', $params{ folder });
    $utils->initialize('delete_slide_comments', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'folder');
    }
};

subtest 'delete_slide_comments invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_comments', 'storage', $params{ storage });
    $utils->initialize('delete_slide_comments', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'storage');
    }
};

#
# delete_slide_comments_online test
#
subtest 'delete_slide_comments_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $utils->initialize('delete_slide_comments_online', '');
    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        fail("delete_slide_comments_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_comments_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_slide_comments_online', 'document', $params{ document });
    $utils->initialize('delete_slide_comments_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments_online', 'document');
    }
};

subtest 'delete_slide_comments_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_comments_online', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_slide_comments_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments_online', 'slide_index');
    }
};

subtest 'delete_slide_comments_online invalid author' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $params{ author } = $utils->invalidize_param_value('delete_slide_comments_online', 'author', $params{ author });
    $utils->initialize('delete_slide_comments_online', 'author', $params{ author });

    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments_online', 'author', $params{ author }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments_online', 'author');
    }
};

subtest 'delete_slide_comments_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_comments_online', 'password', $params{ password });
    $utils->initialize('delete_slide_comments_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slide_comments_online', 'password');
    }
};

#
# delete_slides test
#
subtest 'delete_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $utils->initialize('delete_slides', '');
    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        fail("delete_slides raised an exception: $@");
    }
    pass();
};

subtest 'delete_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slides', 'name', $params{ name });
    $utils->initialize('delete_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_slides', 'name');
    }
};

subtest 'delete_slides invalid slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ slides } = $utils->invalidize_param_value('delete_slides', 'slides', $params{ slides });
    $utils->initialize('delete_slides', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'slides', $params{ slides }, $@);
    } else {
        $utils->assert_no_error('delete_slides', 'slides');
    }
};

subtest 'delete_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slides', 'password', $params{ password });
    $utils->initialize('delete_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_slides', 'password');
    }
};

subtest 'delete_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slides', 'folder', $params{ folder });
    $utils->initialize('delete_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_slides', 'folder');
    }
};

subtest 'delete_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'string'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slides', 'storage', $params{ storage });
    $utils->initialize('delete_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_slides', 'storage');
    }
};

#
# delete_special_slide_animation test
#
subtest 'delete_special_slide_animation' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation', 'name', $params{ name });
    $utils->initialize('delete_special_slide_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'name');
    }
};

subtest 'delete_special_slide_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'slide_index');
    }
};

subtest 'delete_special_slide_animation invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_animation', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'slide_type');
    }
};

subtest 'delete_special_slide_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation', 'password', $params{ password });
    $utils->initialize('delete_special_slide_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'password');
    }
};

subtest 'delete_special_slide_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'folder');
    }
};

subtest 'delete_special_slide_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'storage');
    }
};

#
# delete_special_slide_animation_effect test
#
subtest 'delete_special_slide_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_effect', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'name', $params{ name });
    $utils->initialize('delete_special_slide_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'name');
    }
};

subtest 'delete_special_slide_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'slide_index');
    }
};

subtest 'delete_special_slide_animation_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_animation_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'slide_type');
    }
};

subtest 'delete_special_slide_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('delete_special_slide_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'effect_index');
    }
};

subtest 'delete_special_slide_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'password', $params{ password });
    $utils->initialize('delete_special_slide_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'password');
    }
};

subtest 'delete_special_slide_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'folder');
    }
};

subtest 'delete_special_slide_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'storage');
    }
};

#
# delete_special_slide_animation_interactive_sequence test
#
subtest 'delete_special_slide_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'name', $params{ name });
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'name');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'slide_index');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'slide_type');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', $params{ sequence_index });
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'sequence_index');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'password', $params{ password });
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'password');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'folder');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'storage');
    }
};

#
# delete_special_slide_animation_interactive_sequence_effect test
#
subtest 'delete_special_slide_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', $params{ name });
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'name');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'slide_index');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'slide_type');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'effect_index');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', $params{ password });
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'password');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'folder');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'storage');
    }
};

#
# delete_special_slide_animation_interactive_sequences test
#
subtest 'delete_special_slide_animation_interactive_sequences' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_interactive_sequences', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_interactive_sequences raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_interactive_sequences invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'name', $params{ name });
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'name');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'slide_index');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'slide_type');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'password', $params{ password });
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'password');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'folder');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'storage');
    }
};

#
# delete_special_slide_animation_main_sequence test
#
subtest 'delete_special_slide_animation_main_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_main_sequence', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_main_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_main_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'name', $params{ name });
    $utils->initialize('delete_special_slide_animation_main_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'name');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_animation_main_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'slide_index');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_animation_main_sequence', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'slide_type');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'password', $params{ password });
    $utils->initialize('delete_special_slide_animation_main_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'password');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_animation_main_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'folder');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_animation_main_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'storage');
    }
};

#
# delete_special_slide_paragraph test
#
subtest 'delete_special_slide_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'));
    $utils->initialize('delete_special_slide_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        fail("delete_special_slide_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'name', $params{ name });
    $utils->initialize('delete_special_slide_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'name');
    }
};

subtest 'delete_special_slide_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'slide_index');
    }
};

subtest 'delete_special_slide_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'slide_type');
    }
};

subtest 'delete_special_slide_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'shape_index');
    }
};

subtest 'delete_special_slide_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'paragraph_index');
    }
};

subtest 'delete_special_slide_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'password', $params{ password });
    $utils->initialize('delete_special_slide_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'password');
    }
};

subtest 'delete_special_slide_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'folder');
    }
};

subtest 'delete_special_slide_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'storage');
    }
};

#
# delete_special_slide_paragraphs test
#
subtest 'delete_special_slide_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'));
    $utils->initialize('delete_special_slide_paragraphs', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        fail("delete_special_slide_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'name', $params{ name });
    $utils->initialize('delete_special_slide_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'name');
    }
};

subtest 'delete_special_slide_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'slide_index');
    }
};

subtest 'delete_special_slide_paragraphs invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_paragraphs', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'slide_type');
    }
};

subtest 'delete_special_slide_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'shape_index');
    }
};

subtest 'delete_special_slide_paragraphs invalid paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'));
    $params{ paragraphs } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'paragraphs', $params{ paragraphs });
    $utils->initialize('delete_special_slide_paragraphs', 'paragraphs', $params{ paragraphs });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'paragraphs', $params{ paragraphs }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'paragraphs');
    }
};

subtest 'delete_special_slide_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'password', $params{ password });
    $utils->initialize('delete_special_slide_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'password');
    }
};

subtest 'delete_special_slide_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'folder');
    }
};

subtest 'delete_special_slide_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'storage');
    }
};

#
# delete_special_slide_portion test
#
subtest 'delete_special_slide_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $utils->initialize('delete_special_slide_portion', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        fail("delete_special_slide_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_portion', 'name', $params{ name });
    $utils->initialize('delete_special_slide_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'name');
    }
};

subtest 'delete_special_slide_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'slide_index');
    }
};

subtest 'delete_special_slide_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_portion', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'slide_type');
    }
};

subtest 'delete_special_slide_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'shape_index');
    }
};

subtest 'delete_special_slide_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_special_slide_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_special_slide_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'paragraph_index');
    }
};

subtest 'delete_special_slide_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_special_slide_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('delete_special_slide_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'portion_index');
    }
};

subtest 'delete_special_slide_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_portion', 'password', $params{ password });
    $utils->initialize('delete_special_slide_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'password');
    }
};

subtest 'delete_special_slide_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_portion', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'folder');
    }
};

subtest 'delete_special_slide_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_portion', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'storage');
    }
};

#
# delete_special_slide_portions test
#
subtest 'delete_special_slide_portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $utils->initialize('delete_special_slide_portions', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        fail("delete_special_slide_portions raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_portions', 'name', $params{ name });
    $utils->initialize('delete_special_slide_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'name');
    }
};

subtest 'delete_special_slide_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'slide_index');
    }
};

subtest 'delete_special_slide_portions invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_portions', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_portions', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'slide_type');
    }
};

subtest 'delete_special_slide_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'shape_index');
    }
};

subtest 'delete_special_slide_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_special_slide_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_special_slide_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'paragraph_index');
    }
};

subtest 'delete_special_slide_portions invalid portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $params{ portions } = $utils->invalidize_param_value('delete_special_slide_portions', 'portions', $params{ portions });
    $utils->initialize('delete_special_slide_portions', 'portions', $params{ portions });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'portions', $params{ portions }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'portions');
    }
};

subtest 'delete_special_slide_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_portions', 'password', $params{ password });
    $utils->initialize('delete_special_slide_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'password');
    }
};

subtest 'delete_special_slide_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_portions', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'folder');
    }
};

subtest 'delete_special_slide_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_portions', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'storage');
    }
};

#
# delete_special_slide_shape test
#
subtest 'delete_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'));
    $utils->initialize('delete_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        fail("delete_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_shape', 'name', $params{ name });
    $utils->initialize('delete_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'name');
    }
};

subtest 'delete_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'slide_index');
    }
};

subtest 'delete_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_shape', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'slide_type');
    }
};

subtest 'delete_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'shape_index');
    }
};

subtest 'delete_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_shape', 'password', $params{ password });
    $utils->initialize('delete_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'password');
    }
};

subtest 'delete_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_shape', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'folder');
    }
};

subtest 'delete_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_shape', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'storage');
    }
};

#
# delete_special_slide_shapes test
#
subtest 'delete_special_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'));
    $utils->initialize('delete_special_slide_shapes', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        fail("delete_special_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_shapes', 'name', $params{ name });
    $utils->initialize('delete_special_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'name');
    }
};

subtest 'delete_special_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'slide_index');
    }
};

subtest 'delete_special_slide_shapes invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_shapes', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_shapes', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'slide_type');
    }
};

subtest 'delete_special_slide_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('delete_special_slide_shapes', 'shapes', $params{ shapes });
    $utils->initialize('delete_special_slide_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'shapes', $params{ shapes }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'shapes');
    }
};

subtest 'delete_special_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_shapes', 'password', $params{ password });
    $utils->initialize('delete_special_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'password');
    }
};

subtest 'delete_special_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_shapes', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'folder');
    }
};

subtest 'delete_special_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_shapes', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'storage');
    }
};

#
# delete_special_slide_subshape test
#
subtest 'delete_special_slide_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape', 'storage', 'string'));
    $utils->initialize('delete_special_slide_subshape', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_subshape(%params);
    };
    if ($@) {
        fail("delete_special_slide_subshape raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_subshape', 'name', $params{ name });
    $utils->initialize('delete_special_slide_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape', 'name');
    }
};

subtest 'delete_special_slide_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape', 'slide_index');
    }
};

subtest 'delete_special_slide_subshape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_subshape', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_subshape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape', 'slide_type');
    }
};

subtest 'delete_special_slide_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_special_slide_subshape', 'path', $params{ path });
    $utils->initialize('delete_special_slide_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape', 'path');
    }
};

subtest 'delete_special_slide_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape', 'shape_index');
    }
};

subtest 'delete_special_slide_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_subshape', 'password', $params{ password });
    $utils->initialize('delete_special_slide_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape', 'password');
    }
};

subtest 'delete_special_slide_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_subshape', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape', 'folder');
    }
};

subtest 'delete_special_slide_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_subshape', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape', 'storage');
    }
};

#
# delete_special_slide_subshape_paragraph test
#
subtest 'delete_special_slide_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('delete_special_slide_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        fail("delete_special_slide_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('delete_special_slide_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraph', 'name');
    }
};

subtest 'delete_special_slide_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraph', 'slide_index');
    }
};

subtest 'delete_special_slide_subshape_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraph', 'slide_type');
    }
};

subtest 'delete_special_slide_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('delete_special_slide_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraph', 'path');
    }
};

subtest 'delete_special_slide_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraph', 'shape_index');
    }
};

subtest 'delete_special_slide_subshape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_special_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraph', 'paragraph_index');
    }
};

subtest 'delete_special_slide_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('delete_special_slide_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraph', 'password');
    }
};

subtest 'delete_special_slide_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraph', 'folder');
    }
};

subtest 'delete_special_slide_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraph', 'storage');
    }
};

#
# delete_special_slide_subshape_paragraphs test
#
subtest 'delete_special_slide_subshape_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $utils->initialize('delete_special_slide_subshape_paragraphs', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        fail("delete_special_slide_subshape_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_subshape_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraphs', 'name', $params{ name });
    $utils->initialize('delete_special_slide_subshape_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraphs', 'name');
    }
};

subtest 'delete_special_slide_subshape_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_subshape_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraphs', 'slide_index');
    }
};

subtest 'delete_special_slide_subshape_paragraphs invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_subshape_paragraphs', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraphs', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraphs', 'slide_type');
    }
};

subtest 'delete_special_slide_subshape_paragraphs invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraphs', 'path', $params{ path });
    $utils->initialize('delete_special_slide_subshape_paragraphs', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraphs', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraphs', 'path');
    }
};

subtest 'delete_special_slide_subshape_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_subshape_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraphs', 'shape_index');
    }
};

subtest 'delete_special_slide_subshape_paragraphs invalid paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ paragraphs } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', $params{ paragraphs });
    $utils->initialize('delete_special_slide_subshape_paragraphs', 'paragraphs', $params{ paragraphs });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraphs', 'paragraphs', $params{ paragraphs }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraphs', 'paragraphs');
    }
};

subtest 'delete_special_slide_subshape_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraphs', 'password', $params{ password });
    $utils->initialize('delete_special_slide_subshape_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraphs', 'password');
    }
};

subtest 'delete_special_slide_subshape_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraphs', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_subshape_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraphs', 'folder');
    }
};

subtest 'delete_special_slide_subshape_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_subshape_paragraphs', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_subshape_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_paragraphs', 'storage');
    }
};

#
# delete_special_slide_subshape_portion test
#
subtest 'delete_special_slide_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $utils->initialize('delete_special_slide_subshape_portion', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        fail("delete_special_slide_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'name', $params{ name });
    $utils->initialize('delete_special_slide_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'name');
    }
};

subtest 'delete_special_slide_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'slide_index');
    }
};

subtest 'delete_special_slide_subshape_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_subshape_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'slide_type');
    }
};

subtest 'delete_special_slide_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'path', $params{ path });
    $utils->initialize('delete_special_slide_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'path');
    }
};

subtest 'delete_special_slide_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'shape_index');
    }
};

subtest 'delete_special_slide_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'paragraph_index');
    }
};

subtest 'delete_special_slide_subshape_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('delete_special_slide_subshape_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'portion_index');
    }
};

subtest 'delete_special_slide_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'password', $params{ password });
    $utils->initialize('delete_special_slide_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'password');
    }
};

subtest 'delete_special_slide_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'folder');
    }
};

subtest 'delete_special_slide_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portion', 'storage');
    }
};

#
# delete_special_slide_subshape_portions test
#
subtest 'delete_special_slide_subshape_portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $utils->initialize('delete_special_slide_subshape_portions', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        fail("delete_special_slide_subshape_portions raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_subshape_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'name', $params{ name });
    $utils->initialize('delete_special_slide_subshape_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'name');
    }
};

subtest 'delete_special_slide_subshape_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_subshape_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'slide_index');
    }
};

subtest 'delete_special_slide_subshape_portions invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_subshape_portions', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'slide_type');
    }
};

subtest 'delete_special_slide_subshape_portions invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'path', $params{ path });
    $utils->initialize('delete_special_slide_subshape_portions', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'path');
    }
};

subtest 'delete_special_slide_subshape_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_special_slide_subshape_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'shape_index');
    }
};

subtest 'delete_special_slide_subshape_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_special_slide_subshape_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'paragraph_index');
    }
};

subtest 'delete_special_slide_subshape_portions invalid portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ portions } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'portions', $params{ portions });
    $utils->initialize('delete_special_slide_subshape_portions', 'portions', $params{ portions });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'portions', $params{ portions }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'portions');
    }
};

subtest 'delete_special_slide_subshape_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'password', $params{ password });
    $utils->initialize('delete_special_slide_subshape_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'password');
    }
};

subtest 'delete_special_slide_subshape_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_subshape_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'folder');
    }
};

subtest 'delete_special_slide_subshape_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshape_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_subshape_portions', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_subshape_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshape_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshape_portions', 'storage');
    }
};

#
# delete_special_slide_subshapes test
#
subtest 'delete_special_slide_subshapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshapes', 'storage', 'string'));
    $utils->initialize('delete_special_slide_subshapes', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_subshapes(%params);
    };
    if ($@) {
        fail("delete_special_slide_subshapes raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_subshapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_subshapes', 'name', $params{ name });
    $utils->initialize('delete_special_slide_subshapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshapes', 'name');
    }
};

subtest 'delete_special_slide_subshapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_subshapes', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_special_slide_subshapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshapes', 'slide_index');
    }
};

subtest 'delete_special_slide_subshapes invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshapes', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_subshapes', 'slide_type', $params{ slide_type });
    $utils->initialize('delete_special_slide_subshapes', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshapes', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshapes', 'slide_type');
    }
};

subtest 'delete_special_slide_subshapes invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshapes', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_special_slide_subshapes', 'path', $params{ path });
    $utils->initialize('delete_special_slide_subshapes', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshapes', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshapes', 'path');
    }
};

subtest 'delete_special_slide_subshapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshapes', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('delete_special_slide_subshapes', 'shapes', $params{ shapes });
    $utils->initialize('delete_special_slide_subshapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshapes', 'shapes', $params{ shapes }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshapes', 'shapes');
    }
};

subtest 'delete_special_slide_subshapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_subshapes', 'password', $params{ password });
    $utils->initialize('delete_special_slide_subshapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshapes', 'password');
    }
};

subtest 'delete_special_slide_subshapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_subshapes', 'folder', $params{ folder });
    $utils->initialize('delete_special_slide_subshapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshapes', 'folder');
    }
};

subtest 'delete_special_slide_subshapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('delete_special_slide_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_subshapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_subshapes', 'storage', $params{ storage });
    $utils->initialize('delete_special_slide_subshapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_subshapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_special_slide_subshapes', 'storage');
    }
};

#
# delete_subshape test
#
subtest 'delete_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape', 'storage', 'string'));
    $utils->initialize('delete_subshape', '');
    eval {
        my $result = $utils->{api}->delete_subshape(%params);
    };
    if ($@) {
        fail("delete_subshape raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshape', 'name', $params{ name });
    $utils->initialize('delete_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshape', 'name');
    }
};

subtest 'delete_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape', 'slide_index');
    }
};

subtest 'delete_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshape', 'path', $params{ path });
    $utils->initialize('delete_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshape', 'path');
    }
};

subtest 'delete_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape', 'shape_index');
    }
};

subtest 'delete_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshape', 'password', $params{ password });
    $utils->initialize('delete_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshape', 'password');
    }
};

subtest 'delete_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshape', 'folder', $params{ folder });
    $utils->initialize('delete_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshape', 'folder');
    }
};

subtest 'delete_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshape', 'storage', $params{ storage });
    $utils->initialize('delete_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshape', 'storage');
    }
};

#
# delete_subshape_paragraph test
#
subtest 'delete_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('delete_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        fail("delete_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('delete_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'name');
    }
};

subtest 'delete_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'slide_index');
    }
};

subtest 'delete_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('delete_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'path');
    }
};

subtest 'delete_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'shape_index');
    }
};

subtest 'delete_subshape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'paragraph_index');
    }
};

subtest 'delete_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('delete_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'password');
    }
};

subtest 'delete_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('delete_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'folder');
    }
};

subtest 'delete_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('delete_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraph', 'storage');
    }
};

#
# delete_subshape_paragraphs test
#
subtest 'delete_subshape_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $utils->initialize('delete_subshape_paragraphs', '');
    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        fail("delete_subshape_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshape_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'name', $params{ name });
    $utils->initialize('delete_subshape_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'name');
    }
};

subtest 'delete_subshape_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshape_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'slide_index');
    }
};

subtest 'delete_subshape_paragraphs invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'path', $params{ path });
    $utils->initialize('delete_subshape_paragraphs', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'path');
    }
};

subtest 'delete_subshape_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_subshape_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'shape_index');
    }
};

subtest 'delete_subshape_paragraphs invalid paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ paragraphs } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'paragraphs', $params{ paragraphs });
    $utils->initialize('delete_subshape_paragraphs', 'paragraphs', $params{ paragraphs });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'paragraphs', $params{ paragraphs }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'paragraphs');
    }
};

subtest 'delete_subshape_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'password', $params{ password });
    $utils->initialize('delete_subshape_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'password');
    }
};

subtest 'delete_subshape_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'folder', $params{ folder });
    $utils->initialize('delete_subshape_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'folder');
    }
};

subtest 'delete_subshape_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_subshape_paragraphs', 'paragraphs', 'string'), 'password' => $utils->get_param_value('delete_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshape_paragraphs', 'storage', $params{ storage });
    $utils->initialize('delete_subshape_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_paragraphs', 'storage');
    }
};

#
# delete_subshape_portion test
#
subtest 'delete_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $utils->initialize('delete_subshape_portion', '');
    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        fail("delete_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshape_portion', 'name', $params{ name });
    $utils->initialize('delete_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'name');
    }
};

subtest 'delete_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'slide_index');
    }
};

subtest 'delete_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshape_portion', 'path', $params{ path });
    $utils->initialize('delete_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'path');
    }
};

subtest 'delete_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'shape_index');
    }
};

subtest 'delete_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'paragraph_index');
    }
};

subtest 'delete_subshape_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_subshape_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('delete_subshape_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'portion_index');
    }
};

subtest 'delete_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshape_portion', 'password', $params{ password });
    $utils->initialize('delete_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'password');
    }
};

subtest 'delete_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('delete_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'folder');
    }
};

subtest 'delete_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('delete_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portion', 'storage');
    }
};

#
# delete_subshape_portions test
#
subtest 'delete_subshape_portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $utils->initialize('delete_subshape_portions', '');
    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        fail("delete_subshape_portions raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshape_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshape_portions', 'name', $params{ name });
    $utils->initialize('delete_subshape_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'name');
    }
};

subtest 'delete_subshape_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshape_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshape_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'slide_index');
    }
};

subtest 'delete_subshape_portions invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshape_portions', 'path', $params{ path });
    $utils->initialize('delete_subshape_portions', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'path');
    }
};

subtest 'delete_subshape_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_subshape_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('delete_subshape_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'shape_index');
    }
};

subtest 'delete_subshape_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_subshape_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('delete_subshape_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'paragraph_index');
    }
};

subtest 'delete_subshape_portions invalid portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ portions } = $utils->invalidize_param_value('delete_subshape_portions', 'portions', $params{ portions });
    $utils->initialize('delete_subshape_portions', 'portions', $params{ portions });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'portions', $params{ portions }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'portions');
    }
};

subtest 'delete_subshape_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshape_portions', 'password', $params{ password });
    $utils->initialize('delete_subshape_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'password');
    }
};

subtest 'delete_subshape_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshape_portions', 'folder', $params{ folder });
    $utils->initialize('delete_subshape_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'folder');
    }
};

subtest 'delete_subshape_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('delete_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_subshape_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_subshape_portions', 'portions', 'string'), 'password' => $utils->get_param_value('delete_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshape_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshape_portions', 'storage', $params{ storage });
    $utils->initialize('delete_subshape_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshape_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshape_portions', 'storage');
    }
};

#
# delete_subshapes test
#
subtest 'delete_subshapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshapes', 'storage', 'string'));
    $utils->initialize('delete_subshapes', '');
    eval {
        my $result = $utils->{api}->delete_subshapes(%params);
    };
    if ($@) {
        fail("delete_subshapes raised an exception: $@");
    }
    pass();
};

subtest 'delete_subshapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_subshapes', 'name', $params{ name });
    $utils->initialize('delete_subshapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_subshapes', 'name');
    }
};

subtest 'delete_subshapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_subshapes', 'slide_index', $params{ slide_index });
    $utils->initialize('delete_subshapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('delete_subshapes', 'slide_index');
    }
};

subtest 'delete_subshapes invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshapes', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_subshapes', 'path', $params{ path });
    $utils->initialize('delete_subshapes', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshapes', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('delete_subshapes', 'path');
    }
};

subtest 'delete_subshapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshapes', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('delete_subshapes', 'shapes', $params{ shapes });
    $utils->initialize('delete_subshapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->delete_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshapes', 'shapes', $params{ shapes }, $@);
    } else {
        $utils->assert_no_error('delete_subshapes', 'shapes');
    }
};

subtest 'delete_subshapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_subshapes', 'password', $params{ password });
    $utils->initialize('delete_subshapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_subshapes', 'password');
    }
};

subtest 'delete_subshapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_subshapes', 'folder', $params{ folder });
    $utils->initialize('delete_subshapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_subshapes', 'folder');
    }
};

subtest 'delete_subshapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('delete_subshapes', 'path', 'string'), 'shapes' => $utils->get_param_value('delete_subshapes', 'shapes', 'string'), 'password' => $utils->get_param_value('delete_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_subshapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_subshapes', 'storage', $params{ storage });
    $utils->initialize('delete_subshapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_subshapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_subshapes', 'storage');
    }
};

#
# delete_watermark test
#
subtest 'delete_watermark' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $utils->initialize('delete_watermark', '');
    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        fail("delete_watermark raised an exception: $@");
    }
    pass();
};

subtest 'delete_watermark invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_watermark', 'name', $params{ name });
    $utils->initialize('delete_watermark', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'name');
    }
};

subtest 'delete_watermark invalid shape_name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ shape_name } = $utils->invalidize_param_value('delete_watermark', 'shape_name', $params{ shape_name });
    $utils->initialize('delete_watermark', 'shape_name', $params{ shape_name });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'shape_name', $params{ shape_name }, $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'shape_name');
    }
};

subtest 'delete_watermark invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_watermark', 'password', $params{ password });
    $utils->initialize('delete_watermark', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'password');
    }
};

subtest 'delete_watermark invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_watermark', 'folder', $params{ folder });
    $utils->initialize('delete_watermark', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'folder');
    }
};

subtest 'delete_watermark invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_watermark', 'storage', $params{ storage });
    $utils->initialize('delete_watermark', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'storage');
    }
};

#
# delete_watermark_online test
#
subtest 'delete_watermark_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_watermark_online', 'document', 'File'), 'shape_name' => $utils->get_param_value('delete_watermark_online', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark_online', 'password', 'string'));
    $utils->initialize('delete_watermark_online', '');
    eval {
        my $result = $utils->{api}->delete_watermark_online(%params);
    };
    if ($@) {
        fail("delete_watermark_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_watermark_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_watermark_online', 'document', 'File'), 'shape_name' => $utils->get_param_value('delete_watermark_online', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_watermark_online', 'document', $params{ document });
    $utils->initialize('delete_watermark_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('delete_watermark_online', 'document');
    }
};

subtest 'delete_watermark_online invalid shape_name' => sub {
    my %params = ('document' => $utils->get_param_value('delete_watermark_online', 'document', 'File'), 'shape_name' => $utils->get_param_value('delete_watermark_online', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark_online', 'password', 'string'));
    $params{ shape_name } = $utils->invalidize_param_value('delete_watermark_online', 'shape_name', $params{ shape_name });
    $utils->initialize('delete_watermark_online', 'shape_name', $params{ shape_name });

    eval {
        my $result = $utils->{api}->delete_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark_online', 'shape_name', $params{ shape_name }, $@);
    } else {
        $utils->assert_no_error('delete_watermark_online', 'shape_name');
    }
};

subtest 'delete_watermark_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_watermark_online', 'document', 'File'), 'shape_name' => $utils->get_param_value('delete_watermark_online', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_watermark_online', 'password', $params{ password });
    $utils->initialize('delete_watermark_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('delete_watermark_online', 'password');
    }
};

#
# download_file test
#
subtest 'download_file' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $utils->initialize('download_file', '');
    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        fail("download_file raised an exception: $@");
    }
    pass();
};

subtest 'download_file invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $params{ path } = $utils->invalidize_param_value('download_file', 'path', $params{ path });
    $utils->initialize('download_file', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        $utils->assert_error('download_file', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('download_file', 'path');
    }
};

subtest 'download_file invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('download_file', 'storage_name', $params{ storage_name });
    $utils->initialize('download_file', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        $utils->assert_error('download_file', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('download_file', 'storage_name');
    }
};

subtest 'download_file invalid version_id' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('download_file', 'version_id', $params{ version_id });
    $utils->initialize('download_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        $utils->assert_error('download_file', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('download_file', 'version_id');
    }
};

#
# download_image test
#
subtest 'download_image' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $utils->initialize('download_image', '');
    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        fail("download_image raised an exception: $@");
    }
    pass();
};

subtest 'download_image invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_image', 'name', $params{ name });
    $utils->initialize('download_image', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_image', 'name');
    }
};

subtest 'download_image invalid index' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ index } = $utils->invalidize_param_value('download_image', 'index', $params{ index });
    $utils->initialize('download_image', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'index', $params{ index }, $@);
    } else {
        $utils->assert_no_error('download_image', 'index');
    }
};

subtest 'download_image invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_image', 'format', $params{ format });
    $utils->initialize('download_image', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_image', 'format');
    }
};

subtest 'download_image invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_image', 'password', $params{ password });
    $utils->initialize('download_image', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_image', 'password');
    }
};

subtest 'download_image invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_image', 'folder', $params{ folder });
    $utils->initialize('download_image', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_image', 'folder');
    }
};

subtest 'download_image invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_image', 'storage', $params{ storage });
    $utils->initialize('download_image', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_image', 'storage');
    }
};

#
# download_image_default_format test
#
subtest 'download_image_default_format' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $utils->initialize('download_image_default_format', '');
    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        fail("download_image_default_format raised an exception: $@");
    }
    pass();
};

subtest 'download_image_default_format invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_image_default_format', 'name', $params{ name });
    $utils->initialize('download_image_default_format', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'name');
    }
};

subtest 'download_image_default_format invalid index' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ index } = $utils->invalidize_param_value('download_image_default_format', 'index', $params{ index });
    $utils->initialize('download_image_default_format', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'index', $params{ index }, $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'index');
    }
};

subtest 'download_image_default_format invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_image_default_format', 'password', $params{ password });
    $utils->initialize('download_image_default_format', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'password');
    }
};

subtest 'download_image_default_format invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_image_default_format', 'folder', $params{ folder });
    $utils->initialize('download_image_default_format', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'folder');
    }
};

subtest 'download_image_default_format invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_image_default_format', 'storage', $params{ storage });
    $utils->initialize('download_image_default_format', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'storage');
    }
};

#
# download_image_default_format_online test
#
subtest 'download_image_default_format_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_default_format_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_default_format_online', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format_online', 'password', 'string'));
    $utils->initialize('download_image_default_format_online', '');
    eval {
        my $result = $utils->{api}->download_image_default_format_online(%params);
    };
    if ($@) {
        fail("download_image_default_format_online raised an exception: $@");
    }
    pass();
};

subtest 'download_image_default_format_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_default_format_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_default_format_online', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_image_default_format_online', 'document', $params{ document });
    $utils->initialize('download_image_default_format_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_image_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('download_image_default_format_online', 'document');
    }
};

subtest 'download_image_default_format_online invalid index' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_default_format_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_default_format_online', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format_online', 'password', 'string'));
    $params{ index } = $utils->invalidize_param_value('download_image_default_format_online', 'index', $params{ index });
    $utils->initialize('download_image_default_format_online', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->download_image_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format_online', 'index', $params{ index }, $@);
    } else {
        $utils->assert_no_error('download_image_default_format_online', 'index');
    }
};

subtest 'download_image_default_format_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_default_format_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_default_format_online', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_image_default_format_online', 'password', $params{ password });
    $utils->initialize('download_image_default_format_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_image_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_image_default_format_online', 'password');
    }
};

#
# download_image_online test
#
subtest 'download_image_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $utils->initialize('download_image_online', '');
    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        fail("download_image_online raised an exception: $@");
    }
    pass();
};

subtest 'download_image_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_image_online', 'document', $params{ document });
    $utils->initialize('download_image_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('download_image_online', 'document');
    }
};

subtest 'download_image_online invalid index' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $params{ index } = $utils->invalidize_param_value('download_image_online', 'index', $params{ index });
    $utils->initialize('download_image_online', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_online', 'index', $params{ index }, $@);
    } else {
        $utils->assert_no_error('download_image_online', 'index');
    }
};

subtest 'download_image_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_image_online', 'format', $params{ format });
    $utils->initialize('download_image_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_online', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_image_online', 'format');
    }
};

subtest 'download_image_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_image_online', 'password', $params{ password });
    $utils->initialize('download_image_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_image_online', 'password');
    }
};

#
# download_images test
#
subtest 'download_images' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $utils->initialize('download_images', '');
    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        fail("download_images raised an exception: $@");
    }
    pass();
};

subtest 'download_images invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_images', 'name', $params{ name });
    $utils->initialize('download_images', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_images', 'name');
    }
};

subtest 'download_images invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_images', 'format', $params{ format });
    $utils->initialize('download_images', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_images', 'format');
    }
};

subtest 'download_images invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_images', 'password', $params{ password });
    $utils->initialize('download_images', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_images', 'password');
    }
};

subtest 'download_images invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_images', 'folder', $params{ folder });
    $utils->initialize('download_images', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_images', 'folder');
    }
};

subtest 'download_images invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_images', 'storage', $params{ storage });
    $utils->initialize('download_images', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_images', 'storage');
    }
};

#
# download_images_default_format test
#
subtest 'download_images_default_format' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $utils->initialize('download_images_default_format', '');
    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        fail("download_images_default_format raised an exception: $@");
    }
    pass();
};

subtest 'download_images_default_format invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_images_default_format', 'name', $params{ name });
    $utils->initialize('download_images_default_format', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_images_default_format', 'name');
    }
};

subtest 'download_images_default_format invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_images_default_format', 'password', $params{ password });
    $utils->initialize('download_images_default_format', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_images_default_format', 'password');
    }
};

subtest 'download_images_default_format invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_images_default_format', 'folder', $params{ folder });
    $utils->initialize('download_images_default_format', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_images_default_format', 'folder');
    }
};

subtest 'download_images_default_format invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_images_default_format', 'storage', $params{ storage });
    $utils->initialize('download_images_default_format', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_images_default_format', 'storage');
    }
};

#
# download_images_default_format_online test
#
subtest 'download_images_default_format_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_default_format_online', 'document', 'File'), 'password' => $utils->get_param_value('download_images_default_format_online', 'password', 'string'));
    $utils->initialize('download_images_default_format_online', '');
    eval {
        my $result = $utils->{api}->download_images_default_format_online(%params);
    };
    if ($@) {
        fail("download_images_default_format_online raised an exception: $@");
    }
    pass();
};

subtest 'download_images_default_format_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_default_format_online', 'document', 'File'), 'password' => $utils->get_param_value('download_images_default_format_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_images_default_format_online', 'document', $params{ document });
    $utils->initialize('download_images_default_format_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_images_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('download_images_default_format_online', 'document');
    }
};

subtest 'download_images_default_format_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_default_format_online', 'document', 'File'), 'password' => $utils->get_param_value('download_images_default_format_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_images_default_format_online', 'password', $params{ password });
    $utils->initialize('download_images_default_format_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_images_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_images_default_format_online', 'password');
    }
};

#
# download_images_online test
#
subtest 'download_images_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_online', 'document', 'File'), 'format' => $utils->get_param_value('download_images_online', 'format', 'string'), 'password' => $utils->get_param_value('download_images_online', 'password', 'string'));
    $utils->initialize('download_images_online', '');
    eval {
        my $result = $utils->{api}->download_images_online(%params);
    };
    if ($@) {
        fail("download_images_online raised an exception: $@");
    }
    pass();
};

subtest 'download_images_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_online', 'document', 'File'), 'format' => $utils->get_param_value('download_images_online', 'format', 'string'), 'password' => $utils->get_param_value('download_images_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_images_online', 'document', $params{ document });
    $utils->initialize('download_images_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_images_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('download_images_online', 'document');
    }
};

subtest 'download_images_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_online', 'document', 'File'), 'format' => $utils->get_param_value('download_images_online', 'format', 'string'), 'password' => $utils->get_param_value('download_images_online', 'password', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_images_online', 'format', $params{ format });
    $utils->initialize('download_images_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_images_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_online', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_images_online', 'format');
    }
};

subtest 'download_images_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_online', 'document', 'File'), 'format' => $utils->get_param_value('download_images_online', 'format', 'string'), 'password' => $utils->get_param_value('download_images_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_images_online', 'password', $params{ password });
    $utils->initialize('download_images_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_images_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_images_online', 'password');
    }
};

#
# download_notes_slide test
#
subtest 'download_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $utils->initialize('download_notes_slide', '');
    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        fail("download_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'download_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_notes_slide', 'name', $params{ name });
    $utils->initialize('download_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'name');
    }
};

subtest 'download_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('download_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'slide_index');
    }
};

subtest 'download_notes_slide invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_notes_slide', 'format', $params{ format });
    $utils->initialize('download_notes_slide', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'format');
    }
};

subtest 'download_notes_slide invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('download_notes_slide', 'width', $params{ width });
    $utils->initialize('download_notes_slide', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'width');
    }
};

subtest 'download_notes_slide invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('download_notes_slide', 'height', $params{ height });
    $utils->initialize('download_notes_slide', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'height');
    }
};

subtest 'download_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_notes_slide', 'password', $params{ password });
    $utils->initialize('download_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'password');
    }
};

subtest 'download_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_notes_slide', 'folder', $params{ folder });
    $utils->initialize('download_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'folder');
    }
};

subtest 'download_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_notes_slide', 'storage', $params{ storage });
    $utils->initialize('download_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'storage');
    }
};

subtest 'download_notes_slide invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_notes_slide', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_notes_slide', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'fonts_folder');
    }
};

#
# download_notes_slide_online test
#
subtest 'download_notes_slide_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $utils->initialize('download_notes_slide_online', '');
    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        fail("download_notes_slide_online raised an exception: $@");
    }
    pass();
};

subtest 'download_notes_slide_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_notes_slide_online', 'document', $params{ document });
    $utils->initialize('download_notes_slide_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'document');
    }
};

subtest 'download_notes_slide_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_notes_slide_online', 'slide_index', $params{ slide_index });
    $utils->initialize('download_notes_slide_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'slide_index');
    }
};

subtest 'download_notes_slide_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_notes_slide_online', 'format', $params{ format });
    $utils->initialize('download_notes_slide_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'format');
    }
};

subtest 'download_notes_slide_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('download_notes_slide_online', 'width', $params{ width });
    $utils->initialize('download_notes_slide_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'width');
    }
};

subtest 'download_notes_slide_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('download_notes_slide_online', 'height', $params{ height });
    $utils->initialize('download_notes_slide_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'height');
    }
};

subtest 'download_notes_slide_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_notes_slide_online', 'password', $params{ password });
    $utils->initialize('download_notes_slide_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'password');
    }
};

subtest 'download_notes_slide_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_notes_slide_online', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_notes_slide_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'fonts_folder');
    }
};

#
# download_presentation test
#
subtest 'download_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'string'));
    $utils->initialize('download_presentation', '');
    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        fail("download_presentation raised an exception: $@");
    }
    pass();
};

subtest 'download_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_presentation', 'name', $params{ name });
    $utils->initialize('download_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_presentation', 'name');
    }
};

subtest 'download_presentation invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_presentation', 'format', $params{ format });
    $utils->initialize('download_presentation', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_presentation', 'format');
    }
};

subtest 'download_presentation invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'string'));
    $params{ options } = $utils->invalidize_param_value('download_presentation', 'options', $params{ options });
    $utils->initialize('download_presentation', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('download_presentation', 'options');
    }
};

subtest 'download_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_presentation', 'password', $params{ password });
    $utils->initialize('download_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_presentation', 'password');
    }
};

subtest 'download_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_presentation', 'folder', $params{ folder });
    $utils->initialize('download_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_presentation', 'folder');
    }
};

subtest 'download_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_presentation', 'storage', $params{ storage });
    $utils->initialize('download_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_presentation', 'storage');
    }
};

subtest 'download_presentation invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_presentation', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_presentation', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_presentation', 'fonts_folder');
    }
};

subtest 'download_presentation invalid slides' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'string'));
    $params{ slides } = $utils->invalidize_param_value('download_presentation', 'slides', $params{ slides });
    $utils->initialize('download_presentation', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'slides', $params{ slides }, $@);
    } else {
        $utils->assert_no_error('download_presentation', 'slides');
    }
};

#
# download_shape test
#
subtest 'download_shape' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $utils->initialize('download_shape', '');
    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        fail("download_shape raised an exception: $@");
    }
    pass();
};

subtest 'download_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_shape', 'name', $params{ name });
    $utils->initialize('download_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'name');
    }
};

subtest 'download_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('download_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'slide_index');
    }
};

subtest 'download_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('download_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('download_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'shape_index');
    }
};

subtest 'download_shape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_shape', 'format', $params{ format });
    $utils->initialize('download_shape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'format');
    }
};

subtest 'download_shape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('download_shape', 'options', $params{ options });
    $utils->initialize('download_shape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'options');
    }
};

subtest 'download_shape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('download_shape', 'scale_x', $params{ scale_x });
    $utils->initialize('download_shape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'scale_x');
    }
};

subtest 'download_shape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('download_shape', 'scale_y', $params{ scale_y });
    $utils->initialize('download_shape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'scale_y');
    }
};

subtest 'download_shape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('download_shape', 'bounds', $params{ bounds });
    $utils->initialize('download_shape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'bounds');
    }
};

subtest 'download_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_shape', 'password', $params{ password });
    $utils->initialize('download_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'password');
    }
};

subtest 'download_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_shape', 'folder', $params{ folder });
    $utils->initialize('download_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'folder');
    }
};

subtest 'download_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_shape', 'storage', $params{ storage });
    $utils->initialize('download_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'storage');
    }
};

subtest 'download_shape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_shape', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_shape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_shape', 'fonts_folder');
    }
};

#
# download_shape_online test
#
subtest 'download_shape_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $utils->initialize('download_shape_online', '');
    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        fail("download_shape_online raised an exception: $@");
    }
    pass();
};

subtest 'download_shape_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ document } = $utils->invalidize_param_value('download_shape_online', 'document', $params{ document });
    $utils->initialize('download_shape_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'document');
    }
};

subtest 'download_shape_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ slide_index } = $utils->invalidize_param_value('download_shape_online', 'slide_index', $params{ slide_index });
    $utils->initialize('download_shape_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'slide_index');
    }
};

subtest 'download_shape_online invalid shape_index' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ shape_index } = $utils->invalidize_param_value('download_shape_online', 'shape_index', $params{ shape_index });
    $utils->initialize('download_shape_online', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'shape_index');
    }
};

subtest 'download_shape_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ format } = $utils->invalidize_param_value('download_shape_online', 'format', $params{ format });
    $utils->initialize('download_shape_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'format');
    }
};

subtest 'download_shape_online invalid scale_x' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ scale_x } = $utils->invalidize_param_value('download_shape_online', 'scale_x', $params{ scale_x });
    $utils->initialize('download_shape_online', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'scale_x');
    }
};

subtest 'download_shape_online invalid scale_y' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ scale_y } = $utils->invalidize_param_value('download_shape_online', 'scale_y', $params{ scale_y });
    $utils->initialize('download_shape_online', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'scale_y');
    }
};

subtest 'download_shape_online invalid bounds' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ bounds } = $utils->invalidize_param_value('download_shape_online', 'bounds', $params{ bounds });
    $utils->initialize('download_shape_online', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'bounds');
    }
};

subtest 'download_shape_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ password } = $utils->invalidize_param_value('download_shape_online', 'password', $params{ password });
    $utils->initialize('download_shape_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'password');
    }
};

subtest 'download_shape_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('download_shape_online', 'storage', $params{ storage });
    $utils->initialize('download_shape_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'storage');
    }
};

subtest 'download_shape_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_shape_online', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_shape_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'fonts_folder');
    }
};

subtest 'download_shape_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ options } = $utils->invalidize_param_value('download_shape_online', 'options', $params{ options });
    $utils->initialize('download_shape_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'options');
    }
};

#
# download_slide test
#
subtest 'download_slide' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $utils->initialize('download_slide', '');
    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        fail("download_slide raised an exception: $@");
    }
    pass();
};

subtest 'download_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_slide', 'name', $params{ name });
    $utils->initialize('download_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'name');
    }
};

subtest 'download_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('download_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'slide_index');
    }
};

subtest 'download_slide invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_slide', 'format', $params{ format });
    $utils->initialize('download_slide', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'format');
    }
};

subtest 'download_slide invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('download_slide', 'options', $params{ options });
    $utils->initialize('download_slide', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'options');
    }
};

subtest 'download_slide invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('download_slide', 'width', $params{ width });
    $utils->initialize('download_slide', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'width');
    }
};

subtest 'download_slide invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('download_slide', 'height', $params{ height });
    $utils->initialize('download_slide', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'height');
    }
};

subtest 'download_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_slide', 'password', $params{ password });
    $utils->initialize('download_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'password');
    }
};

subtest 'download_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_slide', 'folder', $params{ folder });
    $utils->initialize('download_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'folder');
    }
};

subtest 'download_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_slide', 'storage', $params{ storage });
    $utils->initialize('download_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'storage');
    }
};

subtest 'download_slide invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_slide', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_slide', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_slide', 'fonts_folder');
    }
};

#
# download_slide_online test
#
subtest 'download_slide_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $utils->initialize('download_slide_online', '');
    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        fail("download_slide_online raised an exception: $@");
    }
    pass();
};

subtest 'download_slide_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('download_slide_online', 'document', $params{ document });
    $utils->initialize('download_slide_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'document');
    }
};

subtest 'download_slide_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ slide_index } = $utils->invalidize_param_value('download_slide_online', 'slide_index', $params{ slide_index });
    $utils->initialize('download_slide_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'slide_index');
    }
};

subtest 'download_slide_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('download_slide_online', 'format', $params{ format });
    $utils->initialize('download_slide_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'format');
    }
};

subtest 'download_slide_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ width } = $utils->invalidize_param_value('download_slide_online', 'width', $params{ width });
    $utils->initialize('download_slide_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'width');
    }
};

subtest 'download_slide_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ height } = $utils->invalidize_param_value('download_slide_online', 'height', $params{ height });
    $utils->initialize('download_slide_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'height');
    }
};

subtest 'download_slide_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('download_slide_online', 'password', $params{ password });
    $utils->initialize('download_slide_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'password');
    }
};

subtest 'download_slide_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('download_slide_online', 'storage', $params{ storage });
    $utils->initialize('download_slide_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'storage');
    }
};

subtest 'download_slide_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_slide_online', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_slide_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'fonts_folder');
    }
};

subtest 'download_slide_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('download_slide_online', 'options', $params{ options });
    $utils->initialize('download_slide_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'options');
    }
};

#
# download_special_slide_shape test
#
subtest 'download_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $utils->initialize('download_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        fail("download_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'download_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_special_slide_shape', 'name', $params{ name });
    $utils->initialize('download_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'name');
    }
};

subtest 'download_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_special_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('download_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'slide_index');
    }
};

subtest 'download_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('download_special_slide_shape', 'slide_type', $params{ slide_type });
    $utils->initialize('download_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'slide_type');
    }
};

subtest 'download_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('download_special_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('download_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'shape_index');
    }
};

subtest 'download_special_slide_shape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_special_slide_shape', 'format', $params{ format });
    $utils->initialize('download_special_slide_shape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'format');
    }
};

subtest 'download_special_slide_shape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('download_special_slide_shape', 'options', $params{ options });
    $utils->initialize('download_special_slide_shape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'options');
    }
};

subtest 'download_special_slide_shape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('download_special_slide_shape', 'scale_x', $params{ scale_x });
    $utils->initialize('download_special_slide_shape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'scale_x');
    }
};

subtest 'download_special_slide_shape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('download_special_slide_shape', 'scale_y', $params{ scale_y });
    $utils->initialize('download_special_slide_shape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'scale_y');
    }
};

subtest 'download_special_slide_shape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('download_special_slide_shape', 'bounds', $params{ bounds });
    $utils->initialize('download_special_slide_shape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'bounds');
    }
};

subtest 'download_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_special_slide_shape', 'password', $params{ password });
    $utils->initialize('download_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'password');
    }
};

subtest 'download_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_special_slide_shape', 'folder', $params{ folder });
    $utils->initialize('download_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'folder');
    }
};

subtest 'download_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_special_slide_shape', 'storage', $params{ storage });
    $utils->initialize('download_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'storage');
    }
};

subtest 'download_special_slide_shape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_special_slide_shape', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_special_slide_shape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'fonts_folder');
    }
};

#
# download_special_slide_subshape test
#
subtest 'download_special_slide_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $utils->initialize('download_special_slide_subshape', '');
    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        fail("download_special_slide_subshape raised an exception: $@");
    }
    pass();
};

subtest 'download_special_slide_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_special_slide_subshape', 'name', $params{ name });
    $utils->initialize('download_special_slide_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'name');
    }
};

subtest 'download_special_slide_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_special_slide_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('download_special_slide_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'slide_index');
    }
};

subtest 'download_special_slide_subshape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('download_special_slide_subshape', 'slide_type', $params{ slide_type });
    $utils->initialize('download_special_slide_subshape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'slide_type');
    }
};

subtest 'download_special_slide_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ path } = $utils->invalidize_param_value('download_special_slide_subshape', 'path', $params{ path });
    $utils->initialize('download_special_slide_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'path');
    }
};

subtest 'download_special_slide_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('download_special_slide_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('download_special_slide_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'shape_index');
    }
};

subtest 'download_special_slide_subshape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_special_slide_subshape', 'format', $params{ format });
    $utils->initialize('download_special_slide_subshape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'format');
    }
};

subtest 'download_special_slide_subshape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('download_special_slide_subshape', 'options', $params{ options });
    $utils->initialize('download_special_slide_subshape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'options');
    }
};

subtest 'download_special_slide_subshape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('download_special_slide_subshape', 'scale_x', $params{ scale_x });
    $utils->initialize('download_special_slide_subshape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'scale_x');
    }
};

subtest 'download_special_slide_subshape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('download_special_slide_subshape', 'scale_y', $params{ scale_y });
    $utils->initialize('download_special_slide_subshape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'scale_y');
    }
};

subtest 'download_special_slide_subshape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('download_special_slide_subshape', 'bounds', $params{ bounds });
    $utils->initialize('download_special_slide_subshape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'bounds');
    }
};

subtest 'download_special_slide_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_special_slide_subshape', 'password', $params{ password });
    $utils->initialize('download_special_slide_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'password');
    }
};

subtest 'download_special_slide_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_special_slide_subshape', 'folder', $params{ folder });
    $utils->initialize('download_special_slide_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'folder');
    }
};

subtest 'download_special_slide_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_special_slide_subshape', 'storage', $params{ storage });
    $utils->initialize('download_special_slide_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'storage');
    }
};

subtest 'download_special_slide_subshape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('download_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_special_slide_subshape', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_special_slide_subshape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_subshape', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_special_slide_subshape', 'fonts_folder');
    }
};

#
# download_subshape test
#
subtest 'download_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $utils->initialize('download_subshape', '');
    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        fail("download_subshape raised an exception: $@");
    }
    pass();
};

subtest 'download_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_subshape', 'name', $params{ name });
    $utils->initialize('download_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'name');
    }
};

subtest 'download_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('download_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'slide_index');
    }
};

subtest 'download_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ path } = $utils->invalidize_param_value('download_subshape', 'path', $params{ path });
    $utils->initialize('download_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'path');
    }
};

subtest 'download_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('download_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('download_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'shape_index');
    }
};

subtest 'download_subshape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_subshape', 'format', $params{ format });
    $utils->initialize('download_subshape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'format');
    }
};

subtest 'download_subshape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('download_subshape', 'options', $params{ options });
    $utils->initialize('download_subshape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'options');
    }
};

subtest 'download_subshape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('download_subshape', 'scale_x', $params{ scale_x });
    $utils->initialize('download_subshape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'scale_x');
    }
};

subtest 'download_subshape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('download_subshape', 'scale_y', $params{ scale_y });
    $utils->initialize('download_subshape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'scale_y');
    }
};

subtest 'download_subshape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('download_subshape', 'bounds', $params{ bounds });
    $utils->initialize('download_subshape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'bounds');
    }
};

subtest 'download_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_subshape', 'password', $params{ password });
    $utils->initialize('download_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'password');
    }
};

subtest 'download_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_subshape', 'folder', $params{ folder });
    $utils->initialize('download_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'folder');
    }
};

subtest 'download_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_subshape', 'storage', $params{ storage });
    $utils->initialize('download_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'storage');
    }
};

subtest 'download_subshape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('download_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('download_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_subshape', 'format', 'string'), 'options' => $utils->get_param_value('download_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('download_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_subshape', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_subshape', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('download_subshape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('download_subshape', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('download_subshape', 'fonts_folder');
    }
};

#
# get_animation test
#
subtest 'get_animation' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $utils->initialize('get_animation', '');
    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        fail("get_animation raised an exception: $@");
    }
    pass();
};

subtest 'get_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_animation', 'name', $params{ name });
    $utils->initialize('get_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_animation', 'name');
    }
};

subtest 'get_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_animation', 'slide_index', $params{ slide_index });
    $utils->initialize('get_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_animation', 'slide_index');
    }
};

subtest 'get_animation invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_animation', 'shape_index', $params{ shape_index });
    $utils->initialize('get_animation', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_animation', 'shape_index');
    }
};

subtest 'get_animation invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_animation', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_animation', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_animation', 'paragraph_index');
    }
};

subtest 'get_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_animation', 'password', $params{ password });
    $utils->initialize('get_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_animation', 'password');
    }
};

subtest 'get_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_animation', 'folder', $params{ folder });
    $utils->initialize('get_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_animation', 'folder');
    }
};

subtest 'get_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_animation', 'storage', $params{ storage });
    $utils->initialize('get_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_animation', 'storage');
    }
};

#
# get_api_info test
#
subtest 'get_api_info' => sub {
    my %params = ();
    $utils->initialize('get_api_info', '');
    eval {
        my $result = $utils->{api}->get_api_info(%params);
    };
    if ($@) {
        fail("get_api_info raised an exception: $@");
    }
    pass();
};

#
# get_background test
#
subtest 'get_background' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $utils->initialize('get_background', '');
    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        fail("get_background raised an exception: $@");
    }
    pass();
};

subtest 'get_background invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_background', 'name', $params{ name });
    $utils->initialize('get_background', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_background', 'name');
    }
};

subtest 'get_background invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_background', 'slide_index', $params{ slide_index });
    $utils->initialize('get_background', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_background', 'slide_index');
    }
};

subtest 'get_background invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_background', 'password', $params{ password });
    $utils->initialize('get_background', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_background', 'password');
    }
};

subtest 'get_background invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_background', 'folder', $params{ folder });
    $utils->initialize('get_background', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_background', 'folder');
    }
};

subtest 'get_background invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_background', 'storage', $params{ storage });
    $utils->initialize('get_background', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_background', 'storage');
    }
};

#
# get_color_scheme test
#
subtest 'get_color_scheme' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $utils->initialize('get_color_scheme', '');
    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        fail("get_color_scheme raised an exception: $@");
    }
    pass();
};

subtest 'get_color_scheme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_color_scheme', 'name', $params{ name });
    $utils->initialize('get_color_scheme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'name');
    }
};

subtest 'get_color_scheme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_color_scheme', 'slide_index', $params{ slide_index });
    $utils->initialize('get_color_scheme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'slide_index');
    }
};

subtest 'get_color_scheme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_color_scheme', 'password', $params{ password });
    $utils->initialize('get_color_scheme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'password');
    }
};

subtest 'get_color_scheme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_color_scheme', 'folder', $params{ folder });
    $utils->initialize('get_color_scheme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'folder');
    }
};

subtest 'get_color_scheme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_color_scheme', 'storage', $params{ storage });
    $utils->initialize('get_color_scheme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'storage');
    }
};

#
# get_disc_usage test
#
subtest 'get_disc_usage' => sub {
    my %params = ('storage_name' => $utils->get_param_value('get_disc_usage', 'storage_name', 'string'));
    $utils->initialize('get_disc_usage', '');
    eval {
        my $result = $utils->{api}->get_disc_usage(%params);
    };
    if ($@) {
        fail("get_disc_usage raised an exception: $@");
    }
    pass();
};

subtest 'get_disc_usage invalid storage_name' => sub {
    my %params = ('storage_name' => $utils->get_param_value('get_disc_usage', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('get_disc_usage', 'storage_name', $params{ storage_name });
    $utils->initialize('get_disc_usage', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->get_disc_usage(%params);
    };
    if ($@) {
        $utils->assert_error('get_disc_usage', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('get_disc_usage', 'storage_name');
    }
};

#
# get_document_properties test
#
subtest 'get_document_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $utils->initialize('get_document_properties', '');
    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        fail("get_document_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_document_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_document_properties', 'name', $params{ name });
    $utils->initialize('get_document_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_document_properties', 'name');
    }
};

subtest 'get_document_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_document_properties', 'password', $params{ password });
    $utils->initialize('get_document_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_document_properties', 'password');
    }
};

subtest 'get_document_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_document_properties', 'folder', $params{ folder });
    $utils->initialize('get_document_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_document_properties', 'folder');
    }
};

subtest 'get_document_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_document_properties', 'storage', $params{ storage });
    $utils->initialize('get_document_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_document_properties', 'storage');
    }
};

#
# get_document_property test
#
subtest 'get_document_property' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $utils->initialize('get_document_property', '');
    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        fail("get_document_property raised an exception: $@");
    }
    pass();
};

subtest 'get_document_property invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_document_property', 'name', $params{ name });
    $utils->initialize('get_document_property', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_document_property', 'name');
    }
};

subtest 'get_document_property invalid property_name' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ property_name } = $utils->invalidize_param_value('get_document_property', 'property_name', $params{ property_name });
    $utils->initialize('get_document_property', 'property_name', $params{ property_name });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'property_name', $params{ property_name }, $@);
    } else {
        $utils->assert_no_error('get_document_property', 'property_name');
    }
};

subtest 'get_document_property invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_document_property', 'password', $params{ password });
    $utils->initialize('get_document_property', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_document_property', 'password');
    }
};

subtest 'get_document_property invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_document_property', 'folder', $params{ folder });
    $utils->initialize('get_document_property', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_document_property', 'folder');
    }
};

subtest 'get_document_property invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_document_property', 'storage', $params{ storage });
    $utils->initialize('get_document_property', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_document_property', 'storage');
    }
};

#
# get_file_versions test
#
subtest 'get_file_versions' => sub {
    my %params = ('path' => $utils->get_param_value('get_file_versions', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_file_versions', 'storage_name', 'string'));
    $utils->initialize('get_file_versions', '');
    eval {
        my $result = $utils->{api}->get_file_versions(%params);
    };
    if ($@) {
        fail("get_file_versions raised an exception: $@");
    }
    pass();
};

subtest 'get_file_versions invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('get_file_versions', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_file_versions', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_file_versions', 'path', $params{ path });
    $utils->initialize('get_file_versions', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_file_versions(%params);
    };
    if ($@) {
        $utils->assert_error('get_file_versions', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_file_versions', 'path');
    }
};

subtest 'get_file_versions invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('get_file_versions', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_file_versions', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('get_file_versions', 'storage_name', $params{ storage_name });
    $utils->initialize('get_file_versions', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->get_file_versions(%params);
    };
    if ($@) {
        $utils->assert_error('get_file_versions', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('get_file_versions', 'storage_name');
    }
};

#
# get_files_list test
#
subtest 'get_files_list' => sub {
    my %params = ('path' => $utils->get_param_value('get_files_list', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_files_list', 'storage_name', 'string'));
    $utils->initialize('get_files_list', '');
    eval {
        my $result = $utils->{api}->get_files_list(%params);
    };
    if ($@) {
        fail("get_files_list raised an exception: $@");
    }
    pass();
};

subtest 'get_files_list invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('get_files_list', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_files_list', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_files_list', 'path', $params{ path });
    $utils->initialize('get_files_list', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_files_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_files_list', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_files_list', 'path');
    }
};

subtest 'get_files_list invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('get_files_list', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_files_list', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('get_files_list', 'storage_name', $params{ storage_name });
    $utils->initialize('get_files_list', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->get_files_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_files_list', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('get_files_list', 'storage_name');
    }
};

#
# get_font_scheme test
#
subtest 'get_font_scheme' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $utils->initialize('get_font_scheme', '');
    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        fail("get_font_scheme raised an exception: $@");
    }
    pass();
};

subtest 'get_font_scheme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_font_scheme', 'name', $params{ name });
    $utils->initialize('get_font_scheme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'name');
    }
};

subtest 'get_font_scheme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_font_scheme', 'slide_index', $params{ slide_index });
    $utils->initialize('get_font_scheme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'slide_index');
    }
};

subtest 'get_font_scheme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_font_scheme', 'password', $params{ password });
    $utils->initialize('get_font_scheme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'password');
    }
};

subtest 'get_font_scheme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_font_scheme', 'folder', $params{ folder });
    $utils->initialize('get_font_scheme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'folder');
    }
};

subtest 'get_font_scheme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_font_scheme', 'storage', $params{ storage });
    $utils->initialize('get_font_scheme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'storage');
    }
};

#
# get_format_scheme test
#
subtest 'get_format_scheme' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $utils->initialize('get_format_scheme', '');
    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        fail("get_format_scheme raised an exception: $@");
    }
    pass();
};

subtest 'get_format_scheme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_format_scheme', 'name', $params{ name });
    $utils->initialize('get_format_scheme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'name');
    }
};

subtest 'get_format_scheme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_format_scheme', 'slide_index', $params{ slide_index });
    $utils->initialize('get_format_scheme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'slide_index');
    }
};

subtest 'get_format_scheme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_format_scheme', 'password', $params{ password });
    $utils->initialize('get_format_scheme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'password');
    }
};

subtest 'get_format_scheme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_format_scheme', 'folder', $params{ folder });
    $utils->initialize('get_format_scheme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'folder');
    }
};

subtest 'get_format_scheme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_format_scheme', 'storage', $params{ storage });
    $utils->initialize('get_format_scheme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'storage');
    }
};

#
# get_layout_slide test
#
subtest 'get_layout_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $utils->initialize('get_layout_slide', '');
    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        fail("get_layout_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_layout_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_layout_slide', 'name', $params{ name });
    $utils->initialize('get_layout_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'name');
    }
};

subtest 'get_layout_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_layout_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('get_layout_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'slide_index');
    }
};

subtest 'get_layout_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_layout_slide', 'password', $params{ password });
    $utils->initialize('get_layout_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'password');
    }
};

subtest 'get_layout_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_layout_slide', 'folder', $params{ folder });
    $utils->initialize('get_layout_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'folder');
    }
};

subtest 'get_layout_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_layout_slide', 'storage', $params{ storage });
    $utils->initialize('get_layout_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'storage');
    }
};

#
# get_layout_slides test
#
subtest 'get_layout_slides' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $utils->initialize('get_layout_slides', '');
    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        fail("get_layout_slides raised an exception: $@");
    }
    pass();
};

subtest 'get_layout_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_layout_slides', 'name', $params{ name });
    $utils->initialize('get_layout_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_layout_slides', 'name');
    }
};

subtest 'get_layout_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_layout_slides', 'password', $params{ password });
    $utils->initialize('get_layout_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_layout_slides', 'password');
    }
};

subtest 'get_layout_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_layout_slides', 'folder', $params{ folder });
    $utils->initialize('get_layout_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_layout_slides', 'folder');
    }
};

subtest 'get_layout_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_layout_slides', 'storage', $params{ storage });
    $utils->initialize('get_layout_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_layout_slides', 'storage');
    }
};

#
# get_master_slide test
#
subtest 'get_master_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $utils->initialize('get_master_slide', '');
    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        fail("get_master_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_master_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_master_slide', 'name', $params{ name });
    $utils->initialize('get_master_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'name');
    }
};

subtest 'get_master_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_master_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('get_master_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'slide_index');
    }
};

subtest 'get_master_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_master_slide', 'password', $params{ password });
    $utils->initialize('get_master_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'password');
    }
};

subtest 'get_master_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_master_slide', 'folder', $params{ folder });
    $utils->initialize('get_master_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'folder');
    }
};

subtest 'get_master_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_master_slide', 'storage', $params{ storage });
    $utils->initialize('get_master_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'storage');
    }
};

#
# get_master_slides test
#
subtest 'get_master_slides' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $utils->initialize('get_master_slides', '');
    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        fail("get_master_slides raised an exception: $@");
    }
    pass();
};

subtest 'get_master_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_master_slides', 'name', $params{ name });
    $utils->initialize('get_master_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_master_slides', 'name');
    }
};

subtest 'get_master_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_master_slides', 'password', $params{ password });
    $utils->initialize('get_master_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_master_slides', 'password');
    }
};

subtest 'get_master_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_master_slides', 'folder', $params{ folder });
    $utils->initialize('get_master_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_master_slides', 'folder');
    }
};

subtest 'get_master_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_master_slides', 'storage', $params{ storage });
    $utils->initialize('get_master_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_master_slides', 'storage');
    }
};

#
# get_notes_slide test
#
subtest 'get_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $utils->initialize('get_notes_slide', '');
    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        fail("get_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide', 'name', $params{ name });
    $utils->initialize('get_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'name');
    }
};

subtest 'get_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'slide_index');
    }
};

subtest 'get_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide', 'password', $params{ password });
    $utils->initialize('get_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'password');
    }
};

subtest 'get_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'folder');
    }
};

subtest 'get_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'storage');
    }
};

#
# get_notes_slide_header_footer test
#
subtest 'get_notes_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $utils->initialize('get_notes_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        fail("get_notes_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'name', $params{ name });
    $utils->initialize('get_notes_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'name');
    }
};

subtest 'get_notes_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'slide_index');
    }
};

subtest 'get_notes_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'password', $params{ password });
    $utils->initialize('get_notes_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'password');
    }
};

subtest 'get_notes_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'folder', $params{ folder });
    $utils->initialize('get_notes_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'folder');
    }
};

subtest 'get_notes_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'storage', $params{ storage });
    $utils->initialize('get_notes_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'storage');
    }
};

#
# get_notes_slide_online test
#
subtest 'get_notes_slide_online' => sub {
    my %params = ('document' => $utils->get_param_value('get_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('get_notes_slide_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_online', 'password', 'string'));
    $utils->initialize('get_notes_slide_online', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_online(%params);
    };
    if ($@) {
        fail("get_notes_slide_online raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('get_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('get_notes_slide_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('get_notes_slide_online', 'document', $params{ document });
    $utils->initialize('get_notes_slide_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->get_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_online', 'document');
    }
};

subtest 'get_notes_slide_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('get_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('get_notes_slide_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_online', 'slide_index', $params{ slide_index });
    $utils->initialize('get_notes_slide_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_online', 'slide_index');
    }
};

subtest 'get_notes_slide_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('get_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('get_notes_slide_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_online', 'password', $params{ password });
    $utils->initialize('get_notes_slide_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_notes_slide_online', 'password');
    }
};

#
# get_paragraph test
#
subtest 'get_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'));
    $utils->initialize('get_paragraph', '');
    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        fail("get_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_paragraph', 'name', $params{ name });
    $utils->initialize('get_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'name');
    }
};

subtest 'get_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('get_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'slide_index');
    }
};

subtest 'get_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('get_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'shape_index');
    }
};

subtest 'get_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'paragraph_index');
    }
};

subtest 'get_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_paragraph', 'password', $params{ password });
    $utils->initialize('get_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'password');
    }
};

subtest 'get_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_paragraph', 'folder', $params{ folder });
    $utils->initialize('get_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'folder');
    }
};

subtest 'get_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_paragraph', 'storage', $params{ storage });
    $utils->initialize('get_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'storage');
    }
};

#
# get_paragraphs test
#
subtest 'get_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'));
    $utils->initialize('get_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        fail("get_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_paragraphs', 'name', $params{ name });
    $utils->initialize('get_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'name');
    }
};

subtest 'get_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('get_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'slide_index');
    }
};

subtest 'get_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('get_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'shape_index');
    }
};

subtest 'get_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_paragraphs', 'password', $params{ password });
    $utils->initialize('get_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'password');
    }
};

subtest 'get_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_paragraphs', 'folder', $params{ folder });
    $utils->initialize('get_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'folder');
    }
};

subtest 'get_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_paragraphs', 'storage', $params{ storage });
    $utils->initialize('get_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'storage');
    }
};

#
# get_placeholder test
#
subtest 'get_placeholder' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $utils->initialize('get_placeholder', '');
    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        fail("get_placeholder raised an exception: $@");
    }
    pass();
};

subtest 'get_placeholder invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_placeholder', 'name', $params{ name });
    $utils->initialize('get_placeholder', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'name');
    }
};

subtest 'get_placeholder invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_placeholder', 'slide_index', $params{ slide_index });
    $utils->initialize('get_placeholder', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'slide_index');
    }
};

subtest 'get_placeholder invalid placeholder_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ placeholder_index } = $utils->invalidize_param_value('get_placeholder', 'placeholder_index', $params{ placeholder_index });
    $utils->initialize('get_placeholder', 'placeholder_index', $params{ placeholder_index });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'placeholder_index', $params{ placeholder_index }, $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'placeholder_index');
    }
};

subtest 'get_placeholder invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_placeholder', 'password', $params{ password });
    $utils->initialize('get_placeholder', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'password');
    }
};

subtest 'get_placeholder invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_placeholder', 'folder', $params{ folder });
    $utils->initialize('get_placeholder', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'folder');
    }
};

subtest 'get_placeholder invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_placeholder', 'storage', $params{ storage });
    $utils->initialize('get_placeholder', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'storage');
    }
};

#
# get_placeholders test
#
subtest 'get_placeholders' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $utils->initialize('get_placeholders', '');
    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        fail("get_placeholders raised an exception: $@");
    }
    pass();
};

subtest 'get_placeholders invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_placeholders', 'name', $params{ name });
    $utils->initialize('get_placeholders', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'name');
    }
};

subtest 'get_placeholders invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_placeholders', 'slide_index', $params{ slide_index });
    $utils->initialize('get_placeholders', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'slide_index');
    }
};

subtest 'get_placeholders invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_placeholders', 'password', $params{ password });
    $utils->initialize('get_placeholders', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'password');
    }
};

subtest 'get_placeholders invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_placeholders', 'folder', $params{ folder });
    $utils->initialize('get_placeholders', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'folder');
    }
};

subtest 'get_placeholders invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_placeholders', 'storage', $params{ storage });
    $utils->initialize('get_placeholders', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'storage');
    }
};

#
# get_portion test
#
subtest 'get_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'));
    $utils->initialize('get_portion', '');
    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        fail("get_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_portion', 'name', $params{ name });
    $utils->initialize('get_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_portion', 'name');
    }
};

subtest 'get_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('get_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_portion', 'slide_index');
    }
};

subtest 'get_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('get_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_portion', 'shape_index');
    }
};

subtest 'get_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_portion', 'paragraph_index');
    }
};

subtest 'get_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('get_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('get_portion', 'portion_index');
    }
};

subtest 'get_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_portion', 'password', $params{ password });
    $utils->initialize('get_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_portion', 'password');
    }
};

subtest 'get_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_portion', 'folder', $params{ folder });
    $utils->initialize('get_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_portion', 'folder');
    }
};

subtest 'get_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_portion', 'storage', $params{ storage });
    $utils->initialize('get_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_portion', 'storage');
    }
};

#
# get_portions test
#
subtest 'get_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'));
    $utils->initialize('get_portions', '');
    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        fail("get_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_portions', 'name', $params{ name });
    $utils->initialize('get_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_portions', 'name');
    }
};

subtest 'get_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('get_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_portions', 'slide_index');
    }
};

subtest 'get_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('get_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_portions', 'shape_index');
    }
};

subtest 'get_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_portions', 'paragraph_index');
    }
};

subtest 'get_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_portions', 'password', $params{ password });
    $utils->initialize('get_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_portions', 'password');
    }
};

subtest 'get_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_portions', 'folder', $params{ folder });
    $utils->initialize('get_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_portions', 'folder');
    }
};

subtest 'get_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_portions', 'storage', $params{ storage });
    $utils->initialize('get_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_portions', 'storage');
    }
};

#
# get_presentation test
#
subtest 'get_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $utils->initialize('get_presentation', '');
    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        fail("get_presentation raised an exception: $@");
    }
    pass();
};

subtest 'get_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_presentation', 'name', $params{ name });
    $utils->initialize('get_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_presentation', 'name');
    }
};

subtest 'get_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_presentation', 'password', $params{ password });
    $utils->initialize('get_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_presentation', 'password');
    }
};

subtest 'get_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_presentation', 'folder', $params{ folder });
    $utils->initialize('get_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_presentation', 'folder');
    }
};

subtest 'get_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_presentation', 'storage', $params{ storage });
    $utils->initialize('get_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_presentation', 'storage');
    }
};

#
# get_presentation_images test
#
subtest 'get_presentation_images' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $utils->initialize('get_presentation_images', '');
    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        fail("get_presentation_images raised an exception: $@");
    }
    pass();
};

subtest 'get_presentation_images invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_presentation_images', 'name', $params{ name });
    $utils->initialize('get_presentation_images', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_images', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_presentation_images', 'name');
    }
};

subtest 'get_presentation_images invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_presentation_images', 'password', $params{ password });
    $utils->initialize('get_presentation_images', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_images', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_presentation_images', 'password');
    }
};

subtest 'get_presentation_images invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_presentation_images', 'folder', $params{ folder });
    $utils->initialize('get_presentation_images', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_images', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_presentation_images', 'folder');
    }
};

subtest 'get_presentation_images invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_presentation_images', 'storage', $params{ storage });
    $utils->initialize('get_presentation_images', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_images', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_presentation_images', 'storage');
    }
};

#
# get_presentation_text_items test
#
subtest 'get_presentation_text_items' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $utils->initialize('get_presentation_text_items', '');
    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        fail("get_presentation_text_items raised an exception: $@");
    }
    pass();
};

subtest 'get_presentation_text_items invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_presentation_text_items', 'name', $params{ name });
    $utils->initialize('get_presentation_text_items', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'name');
    }
};

subtest 'get_presentation_text_items invalid with_empty' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ with_empty } = $utils->invalidize_param_value('get_presentation_text_items', 'with_empty', $params{ with_empty });
    $utils->initialize('get_presentation_text_items', 'with_empty', $params{ with_empty });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'with_empty', $params{ with_empty }, $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'with_empty');
    }
};

subtest 'get_presentation_text_items invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_presentation_text_items', 'password', $params{ password });
    $utils->initialize('get_presentation_text_items', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'password');
    }
};

subtest 'get_presentation_text_items invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_presentation_text_items', 'folder', $params{ folder });
    $utils->initialize('get_presentation_text_items', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'folder');
    }
};

subtest 'get_presentation_text_items invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_presentation_text_items', 'storage', $params{ storage });
    $utils->initialize('get_presentation_text_items', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'storage');
    }
};

#
# get_protection_properties test
#
subtest 'get_protection_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $utils->initialize('get_protection_properties', '');
    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        fail("get_protection_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_protection_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_protection_properties', 'name', $params{ name });
    $utils->initialize('get_protection_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_protection_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_protection_properties', 'name');
    }
};

subtest 'get_protection_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_protection_properties', 'password', $params{ password });
    $utils->initialize('get_protection_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_protection_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_protection_properties', 'password');
    }
};

subtest 'get_protection_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_protection_properties', 'folder', $params{ folder });
    $utils->initialize('get_protection_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_protection_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_protection_properties', 'folder');
    }
};

subtest 'get_protection_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_protection_properties', 'storage', $params{ storage });
    $utils->initialize('get_protection_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_protection_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_protection_properties', 'storage');
    }
};

#
# get_sections test
#
subtest 'get_sections' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $utils->initialize('get_sections', '');
    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        fail("get_sections raised an exception: $@");
    }
    pass();
};

subtest 'get_sections invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_sections', 'name', $params{ name });
    $utils->initialize('get_sections', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_sections', 'name');
    }
};

subtest 'get_sections invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_sections', 'password', $params{ password });
    $utils->initialize('get_sections', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_sections', 'password');
    }
};

subtest 'get_sections invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_sections', 'folder', $params{ folder });
    $utils->initialize('get_sections', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_sections', 'folder');
    }
};

subtest 'get_sections invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_sections', 'storage', $params{ storage });
    $utils->initialize('get_sections', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_sections', 'storage');
    }
};

#
# get_shape test
#
subtest 'get_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'));
    $utils->initialize('get_shape', '');
    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        fail("get_shape raised an exception: $@");
    }
    pass();
};

subtest 'get_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_shape', 'name', $params{ name });
    $utils->initialize('get_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_shape', 'name');
    }
};

subtest 'get_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('get_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_shape', 'slide_index');
    }
};

subtest 'get_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('get_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_shape', 'shape_index');
    }
};

subtest 'get_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_shape', 'password', $params{ password });
    $utils->initialize('get_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_shape', 'password');
    }
};

subtest 'get_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_shape', 'folder', $params{ folder });
    $utils->initialize('get_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_shape', 'folder');
    }
};

subtest 'get_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_shape', 'storage', $params{ storage });
    $utils->initialize('get_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_shape', 'storage');
    }
};

#
# get_shapes test
#
subtest 'get_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'));
    $utils->initialize('get_shapes', '');
    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        fail("get_shapes raised an exception: $@");
    }
    pass();
};

subtest 'get_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_shapes', 'name', $params{ name });
    $utils->initialize('get_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_shapes', 'name');
    }
};

subtest 'get_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('get_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_shapes', 'slide_index');
    }
};

subtest 'get_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_shapes', 'password', $params{ password });
    $utils->initialize('get_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_shapes', 'password');
    }
};

subtest 'get_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_shapes', 'folder', $params{ folder });
    $utils->initialize('get_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_shapes', 'folder');
    }
};

subtest 'get_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_shapes', 'storage', $params{ storage });
    $utils->initialize('get_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_shapes', 'storage');
    }
};

#
# get_slide test
#
subtest 'get_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $utils->initialize('get_slide', '');
    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        fail("get_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide', 'name', $params{ name });
    $utils->initialize('get_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide', 'name');
    }
};

subtest 'get_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide', 'slide_index');
    }
};

subtest 'get_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide', 'password', $params{ password });
    $utils->initialize('get_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide', 'password');
    }
};

subtest 'get_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide', 'folder', $params{ folder });
    $utils->initialize('get_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide', 'folder');
    }
};

subtest 'get_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide', 'storage', $params{ storage });
    $utils->initialize('get_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide', 'storage');
    }
};

#
# get_slide_comments test
#
subtest 'get_slide_comments' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $utils->initialize('get_slide_comments', '');
    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        fail("get_slide_comments raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_comments invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_comments', 'name', $params{ name });
    $utils->initialize('get_slide_comments', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'name');
    }
};

subtest 'get_slide_comments invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_comments', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_comments', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'slide_index');
    }
};

subtest 'get_slide_comments invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_comments', 'password', $params{ password });
    $utils->initialize('get_slide_comments', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'password');
    }
};

subtest 'get_slide_comments invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_comments', 'folder', $params{ folder });
    $utils->initialize('get_slide_comments', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'folder');
    }
};

subtest 'get_slide_comments invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_comments', 'storage', $params{ storage });
    $utils->initialize('get_slide_comments', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'storage');
    }
};

#
# get_slide_header_footer test
#
subtest 'get_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $utils->initialize('get_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        fail("get_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_header_footer', 'name', $params{ name });
    $utils->initialize('get_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'name');
    }
};

subtest 'get_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_header_footer', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'slide_index');
    }
};

subtest 'get_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_header_footer', 'password', $params{ password });
    $utils->initialize('get_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'password');
    }
};

subtest 'get_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_header_footer', 'folder', $params{ folder });
    $utils->initialize('get_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'folder');
    }
};

subtest 'get_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_header_footer', 'storage', $params{ storage });
    $utils->initialize('get_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'storage');
    }
};

#
# get_slide_images test
#
subtest 'get_slide_images' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $utils->initialize('get_slide_images', '');
    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        fail("get_slide_images raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_images invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_images', 'name', $params{ name });
    $utils->initialize('get_slide_images', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'name');
    }
};

subtest 'get_slide_images invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_images', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_images', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'slide_index');
    }
};

subtest 'get_slide_images invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_images', 'password', $params{ password });
    $utils->initialize('get_slide_images', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'password');
    }
};

subtest 'get_slide_images invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_images', 'folder', $params{ folder });
    $utils->initialize('get_slide_images', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'folder');
    }
};

subtest 'get_slide_images invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_images', 'storage', $params{ storage });
    $utils->initialize('get_slide_images', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'storage');
    }
};

#
# get_slide_properties test
#
subtest 'get_slide_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $utils->initialize('get_slide_properties', '');
    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        fail("get_slide_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_properties', 'name', $params{ name });
    $utils->initialize('get_slide_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_properties', 'name');
    }
};

subtest 'get_slide_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_properties', 'password', $params{ password });
    $utils->initialize('get_slide_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_properties', 'password');
    }
};

subtest 'get_slide_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_properties', 'folder', $params{ folder });
    $utils->initialize('get_slide_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_properties', 'folder');
    }
};

subtest 'get_slide_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_properties', 'storage', $params{ storage });
    $utils->initialize('get_slide_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_properties', 'storage');
    }
};

#
# get_slide_text_items test
#
subtest 'get_slide_text_items' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $utils->initialize('get_slide_text_items', '');
    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        fail("get_slide_text_items raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_text_items invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_text_items', 'name', $params{ name });
    $utils->initialize('get_slide_text_items', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'name');
    }
};

subtest 'get_slide_text_items invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_text_items', 'slide_index', $params{ slide_index });
    $utils->initialize('get_slide_text_items', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'slide_index');
    }
};

subtest 'get_slide_text_items invalid with_empty' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ with_empty } = $utils->invalidize_param_value('get_slide_text_items', 'with_empty', $params{ with_empty });
    $utils->initialize('get_slide_text_items', 'with_empty', $params{ with_empty });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'with_empty', $params{ with_empty }, $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'with_empty');
    }
};

subtest 'get_slide_text_items invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_text_items', 'password', $params{ password });
    $utils->initialize('get_slide_text_items', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'password');
    }
};

subtest 'get_slide_text_items invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_text_items', 'folder', $params{ folder });
    $utils->initialize('get_slide_text_items', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'folder');
    }
};

subtest 'get_slide_text_items invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_text_items', 'storage', $params{ storage });
    $utils->initialize('get_slide_text_items', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'storage');
    }
};

#
# get_slides test
#
subtest 'get_slides' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $utils->initialize('get_slides', '');
    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        fail("get_slides raised an exception: $@");
    }
    pass();
};

subtest 'get_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides', 'name', $params{ name });
    $utils->initialize('get_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_slides', 'name');
    }
};

subtest 'get_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides', 'password', $params{ password });
    $utils->initialize('get_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_slides', 'password');
    }
};

subtest 'get_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides', 'folder', $params{ folder });
    $utils->initialize('get_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_slides', 'folder');
    }
};

subtest 'get_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides', 'storage', $params{ storage });
    $utils->initialize('get_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_slides', 'storage');
    }
};

#
# get_special_slide_animation test
#
subtest 'get_special_slide_animation' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $utils->initialize('get_special_slide_animation', '');
    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        fail("get_special_slide_animation raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_animation', 'name', $params{ name });
    $utils->initialize('get_special_slide_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'name');
    }
};

subtest 'get_special_slide_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_animation', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'slide_index');
    }
};

subtest 'get_special_slide_animation invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_animation', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_animation', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'slide_type');
    }
};

subtest 'get_special_slide_animation invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_animation', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_animation', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'shape_index');
    }
};

subtest 'get_special_slide_animation invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_animation', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_special_slide_animation', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'paragraph_index');
    }
};

subtest 'get_special_slide_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_animation', 'password', $params{ password });
    $utils->initialize('get_special_slide_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'password');
    }
};

subtest 'get_special_slide_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_animation', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'folder');
    }
};

subtest 'get_special_slide_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_animation', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'storage');
    }
};

#
# get_special_slide_paragraph test
#
subtest 'get_special_slide_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'));
    $utils->initialize('get_special_slide_paragraph', '');
    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        fail("get_special_slide_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_paragraph', 'name', $params{ name });
    $utils->initialize('get_special_slide_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'name');
    }
};

subtest 'get_special_slide_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'slide_index');
    }
};

subtest 'get_special_slide_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_paragraph', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'slide_type');
    }
};

subtest 'get_special_slide_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'shape_index');
    }
};

subtest 'get_special_slide_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'paragraph_index');
    }
};

subtest 'get_special_slide_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_paragraph', 'password', $params{ password });
    $utils->initialize('get_special_slide_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'password');
    }
};

subtest 'get_special_slide_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_paragraph', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'folder');
    }
};

subtest 'get_special_slide_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_paragraph', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'storage');
    }
};

#
# get_special_slide_paragraphs test
#
subtest 'get_special_slide_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'));
    $utils->initialize('get_special_slide_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        fail("get_special_slide_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'name', $params{ name });
    $utils->initialize('get_special_slide_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'name');
    }
};

subtest 'get_special_slide_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'slide_index');
    }
};

subtest 'get_special_slide_paragraphs invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_paragraphs', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'slide_type');
    }
};

subtest 'get_special_slide_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'shape_index');
    }
};

subtest 'get_special_slide_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'password', $params{ password });
    $utils->initialize('get_special_slide_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'password');
    }
};

subtest 'get_special_slide_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'folder');
    }
};

subtest 'get_special_slide_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'storage');
    }
};

#
# get_special_slide_portion test
#
subtest 'get_special_slide_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $utils->initialize('get_special_slide_portion', '');
    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        fail("get_special_slide_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_portion', 'name', $params{ name });
    $utils->initialize('get_special_slide_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'name');
    }
};

subtest 'get_special_slide_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'slide_index');
    }
};

subtest 'get_special_slide_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_portion', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'slide_type');
    }
};

subtest 'get_special_slide_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'shape_index');
    }
};

subtest 'get_special_slide_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_special_slide_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'paragraph_index');
    }
};

subtest 'get_special_slide_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_special_slide_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('get_special_slide_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'portion_index');
    }
};

subtest 'get_special_slide_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_portion', 'password', $params{ password });
    $utils->initialize('get_special_slide_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'password');
    }
};

subtest 'get_special_slide_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_portion', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'folder');
    }
};

subtest 'get_special_slide_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_portion', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'storage');
    }
};

#
# get_special_slide_portions test
#
subtest 'get_special_slide_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'));
    $utils->initialize('get_special_slide_portions', '');
    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        fail("get_special_slide_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_portions', 'name', $params{ name });
    $utils->initialize('get_special_slide_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'name');
    }
};

subtest 'get_special_slide_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'slide_index');
    }
};

subtest 'get_special_slide_portions invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_portions', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_portions', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'slide_type');
    }
};

subtest 'get_special_slide_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'shape_index');
    }
};

subtest 'get_special_slide_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_special_slide_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'paragraph_index');
    }
};

subtest 'get_special_slide_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_portions', 'password', $params{ password });
    $utils->initialize('get_special_slide_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'password');
    }
};

subtest 'get_special_slide_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_portions', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'folder');
    }
};

subtest 'get_special_slide_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_portions', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'storage');
    }
};

#
# get_special_slide_shape test
#
subtest 'get_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'));
    $utils->initialize('get_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        fail("get_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_shape', 'name', $params{ name });
    $utils->initialize('get_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'name');
    }
};

subtest 'get_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'slide_index');
    }
};

subtest 'get_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_shape', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'slide_type');
    }
};

subtest 'get_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'shape_index');
    }
};

subtest 'get_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_shape', 'password', $params{ password });
    $utils->initialize('get_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'password');
    }
};

subtest 'get_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_shape', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'folder');
    }
};

subtest 'get_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_shape', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'storage');
    }
};

#
# get_special_slide_shapes test
#
subtest 'get_special_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'));
    $utils->initialize('get_special_slide_shapes', '');
    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        fail("get_special_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_shapes', 'name', $params{ name });
    $utils->initialize('get_special_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'name');
    }
};

subtest 'get_special_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_shapes', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'slide_index');
    }
};

subtest 'get_special_slide_shapes invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_shapes', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_shapes', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'slide_type');
    }
};

subtest 'get_special_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_shapes', 'password', $params{ password });
    $utils->initialize('get_special_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'password');
    }
};

subtest 'get_special_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_shapes', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'folder');
    }
};

subtest 'get_special_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_shapes', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'storage');
    }
};

#
# get_special_slide_subshape test
#
subtest 'get_special_slide_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape', 'storage', 'string'));
    $utils->initialize('get_special_slide_subshape', '');
    eval {
        my $result = $utils->{api}->get_special_slide_subshape(%params);
    };
    if ($@) {
        fail("get_special_slide_subshape raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_subshape', 'name', $params{ name });
    $utils->initialize('get_special_slide_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape', 'name');
    }
};

subtest 'get_special_slide_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape', 'slide_index');
    }
};

subtest 'get_special_slide_subshape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_subshape', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_subshape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape', 'slide_type');
    }
};

subtest 'get_special_slide_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_special_slide_subshape', 'path', $params{ path });
    $utils->initialize('get_special_slide_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape', 'path');
    }
};

subtest 'get_special_slide_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape', 'shape_index');
    }
};

subtest 'get_special_slide_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_subshape', 'password', $params{ password });
    $utils->initialize('get_special_slide_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape', 'password');
    }
};

subtest 'get_special_slide_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_subshape', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape', 'folder');
    }
};

subtest 'get_special_slide_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_subshape', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape', 'storage');
    }
};

#
# get_special_slide_subshape_paragraph test
#
subtest 'get_special_slide_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('get_special_slide_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        fail("get_special_slide_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('get_special_slide_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraph', 'name');
    }
};

subtest 'get_special_slide_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraph', 'slide_index');
    }
};

subtest 'get_special_slide_subshape_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraph', 'slide_type');
    }
};

subtest 'get_special_slide_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_special_slide_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('get_special_slide_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraph', 'path');
    }
};

subtest 'get_special_slide_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraph', 'shape_index');
    }
};

subtest 'get_special_slide_subshape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_special_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraph', 'paragraph_index');
    }
};

subtest 'get_special_slide_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('get_special_slide_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraph', 'password');
    }
};

subtest 'get_special_slide_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraph', 'folder');
    }
};

subtest 'get_special_slide_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraph', 'storage');
    }
};

#
# get_special_slide_subshape_paragraphs test
#
subtest 'get_special_slide_subshape_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'storage', 'string'));
    $utils->initialize('get_special_slide_subshape_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        fail("get_special_slide_subshape_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_subshape_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_subshape_paragraphs', 'name', $params{ name });
    $utils->initialize('get_special_slide_subshape_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraphs', 'name');
    }
};

subtest 'get_special_slide_subshape_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_subshape_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_subshape_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraphs', 'slide_index');
    }
};

subtest 'get_special_slide_subshape_paragraphs invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_subshape_paragraphs', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_subshape_paragraphs', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraphs', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraphs', 'slide_type');
    }
};

subtest 'get_special_slide_subshape_paragraphs invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_special_slide_subshape_paragraphs', 'path', $params{ path });
    $utils->initialize('get_special_slide_subshape_paragraphs', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraphs', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraphs', 'path');
    }
};

subtest 'get_special_slide_subshape_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_subshape_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_subshape_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraphs', 'shape_index');
    }
};

subtest 'get_special_slide_subshape_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_subshape_paragraphs', 'password', $params{ password });
    $utils->initialize('get_special_slide_subshape_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraphs', 'password');
    }
};

subtest 'get_special_slide_subshape_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_subshape_paragraphs', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_subshape_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraphs', 'folder');
    }
};

subtest 'get_special_slide_subshape_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_subshape_paragraphs', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_subshape_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_paragraphs', 'storage');
    }
};

#
# get_special_slide_subshape_portion test
#
subtest 'get_special_slide_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $utils->initialize('get_special_slide_subshape_portion', '');
    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        fail("get_special_slide_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'name', $params{ name });
    $utils->initialize('get_special_slide_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'name');
    }
};

subtest 'get_special_slide_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'slide_index');
    }
};

subtest 'get_special_slide_subshape_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_subshape_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'slide_type');
    }
};

subtest 'get_special_slide_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'path', $params{ path });
    $utils->initialize('get_special_slide_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'path');
    }
};

subtest 'get_special_slide_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'shape_index');
    }
};

subtest 'get_special_slide_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'paragraph_index');
    }
};

subtest 'get_special_slide_subshape_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('get_special_slide_subshape_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'portion_index');
    }
};

subtest 'get_special_slide_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'password', $params{ password });
    $utils->initialize('get_special_slide_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'password');
    }
};

subtest 'get_special_slide_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'folder');
    }
};

subtest 'get_special_slide_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portion', 'storage');
    }
};

#
# get_special_slide_subshape_portions test
#
subtest 'get_special_slide_subshape_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $utils->initialize('get_special_slide_subshape_portions', '');
    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        fail("get_special_slide_subshape_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_subshape_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_subshape_portions', 'name', $params{ name });
    $utils->initialize('get_special_slide_subshape_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portions', 'name');
    }
};

subtest 'get_special_slide_subshape_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_subshape_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_subshape_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portions', 'slide_index');
    }
};

subtest 'get_special_slide_subshape_portions invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_subshape_portions', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_subshape_portions', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portions', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portions', 'slide_type');
    }
};

subtest 'get_special_slide_subshape_portions invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_special_slide_subshape_portions', 'path', $params{ path });
    $utils->initialize('get_special_slide_subshape_portions', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portions', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portions', 'path');
    }
};

subtest 'get_special_slide_subshape_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_subshape_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('get_special_slide_subshape_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portions', 'shape_index');
    }
};

subtest 'get_special_slide_subshape_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_subshape_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_special_slide_subshape_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portions', 'paragraph_index');
    }
};

subtest 'get_special_slide_subshape_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_subshape_portions', 'password', $params{ password });
    $utils->initialize('get_special_slide_subshape_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portions', 'password');
    }
};

subtest 'get_special_slide_subshape_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_subshape_portions', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_subshape_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portions', 'folder');
    }
};

subtest 'get_special_slide_subshape_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshape_portions', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshape_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_subshape_portions', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_subshape_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshape_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshape_portions', 'storage');
    }
};

#
# get_special_slide_subshapes test
#
subtest 'get_special_slide_subshapes' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshapes', 'storage', 'string'));
    $utils->initialize('get_special_slide_subshapes', '');
    eval {
        my $result = $utils->{api}->get_special_slide_subshapes(%params);
    };
    if ($@) {
        fail("get_special_slide_subshapes raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_subshapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_subshapes', 'name', $params{ name });
    $utils->initialize('get_special_slide_subshapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshapes', 'name');
    }
};

subtest 'get_special_slide_subshapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_subshapes', 'slide_index', $params{ slide_index });
    $utils->initialize('get_special_slide_subshapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshapes', 'slide_index');
    }
};

subtest 'get_special_slide_subshapes invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshapes', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_subshapes', 'slide_type', $params{ slide_type });
    $utils->initialize('get_special_slide_subshapes', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshapes', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshapes', 'slide_type');
    }
};

subtest 'get_special_slide_subshapes invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshapes', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_special_slide_subshapes', 'path', $params{ path });
    $utils->initialize('get_special_slide_subshapes', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshapes', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshapes', 'path');
    }
};

subtest 'get_special_slide_subshapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_subshapes', 'password', $params{ password });
    $utils->initialize('get_special_slide_subshapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshapes', 'password');
    }
};

subtest 'get_special_slide_subshapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_subshapes', 'folder', $params{ folder });
    $utils->initialize('get_special_slide_subshapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshapes', 'folder');
    }
};

subtest 'get_special_slide_subshapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_subshapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_subshapes', 'slide_type', 'string'), 'path' => $utils->get_param_value('get_special_slide_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_special_slide_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_subshapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_subshapes', 'storage', $params{ storage });
    $utils->initialize('get_special_slide_subshapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_subshapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_special_slide_subshapes', 'storage');
    }
};

#
# get_subshape test
#
subtest 'get_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape', 'storage', 'string'));
    $utils->initialize('get_subshape', '');
    eval {
        my $result = $utils->{api}->get_subshape(%params);
    };
    if ($@) {
        fail("get_subshape raised an exception: $@");
    }
    pass();
};

subtest 'get_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_subshape', 'name', $params{ name });
    $utils->initialize('get_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_subshape', 'name');
    }
};

subtest 'get_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('get_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape', 'slide_index');
    }
};

subtest 'get_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_subshape', 'path', $params{ path });
    $utils->initialize('get_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_subshape', 'path');
    }
};

subtest 'get_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('get_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape', 'shape_index');
    }
};

subtest 'get_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_subshape', 'password', $params{ password });
    $utils->initialize('get_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_subshape', 'password');
    }
};

subtest 'get_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_subshape', 'folder', $params{ folder });
    $utils->initialize('get_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_subshape', 'folder');
    }
};

subtest 'get_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_subshape', 'storage', $params{ storage });
    $utils->initialize('get_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_subshape', 'storage');
    }
};

#
# get_subshape_paragraph test
#
subtest 'get_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('get_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->get_subshape_paragraph(%params);
    };
    if ($@) {
        fail("get_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('get_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph', 'name');
    }
};

subtest 'get_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('get_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph', 'slide_index');
    }
};

subtest 'get_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('get_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph', 'path');
    }
};

subtest 'get_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('get_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph', 'shape_index');
    }
};

subtest 'get_subshape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph', 'paragraph_index');
    }
};

subtest 'get_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('get_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph', 'password');
    }
};

subtest 'get_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('get_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph', 'folder');
    }
};

subtest 'get_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('get_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraph', 'storage');
    }
};

#
# get_subshape_paragraphs test
#
subtest 'get_subshape_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraphs', 'storage', 'string'));
    $utils->initialize('get_subshape_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_subshape_paragraphs(%params);
    };
    if ($@) {
        fail("get_subshape_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_subshape_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_subshape_paragraphs', 'name', $params{ name });
    $utils->initialize('get_subshape_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraphs', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraphs', 'name');
    }
};

subtest 'get_subshape_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_subshape_paragraphs', 'slide_index', $params{ slide_index });
    $utils->initialize('get_subshape_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraphs', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraphs', 'slide_index');
    }
};

subtest 'get_subshape_paragraphs invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraphs', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_subshape_paragraphs', 'path', $params{ path });
    $utils->initialize('get_subshape_paragraphs', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraphs', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraphs', 'path');
    }
};

subtest 'get_subshape_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_subshape_paragraphs', 'shape_index', $params{ shape_index });
    $utils->initialize('get_subshape_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraphs', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraphs', 'shape_index');
    }
};

subtest 'get_subshape_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_subshape_paragraphs', 'password', $params{ password });
    $utils->initialize('get_subshape_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraphs', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraphs', 'password');
    }
};

subtest 'get_subshape_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_subshape_paragraphs', 'folder', $params{ folder });
    $utils->initialize('get_subshape_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraphs', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraphs', 'folder');
    }
};

subtest 'get_subshape_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_paragraphs', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_paragraphs', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_subshape_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_subshape_paragraphs', 'storage', $params{ storage });
    $utils->initialize('get_subshape_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_subshape_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_paragraphs', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_subshape_paragraphs', 'storage');
    }
};

#
# get_subshape_portion test
#
subtest 'get_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $utils->initialize('get_subshape_portion', '');
    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        fail("get_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_subshape_portion', 'name', $params{ name });
    $utils->initialize('get_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portion', 'name');
    }
};

subtest 'get_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('get_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portion', 'slide_index');
    }
};

subtest 'get_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_subshape_portion', 'path', $params{ path });
    $utils->initialize('get_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portion', 'path');
    }
};

subtest 'get_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('get_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portion', 'shape_index');
    }
};

subtest 'get_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portion', 'paragraph_index');
    }
};

subtest 'get_subshape_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_subshape_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('get_subshape_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portion', 'portion_index');
    }
};

subtest 'get_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_subshape_portion', 'password', $params{ password });
    $utils->initialize('get_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portion', 'password');
    }
};

subtest 'get_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('get_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portion', 'folder');
    }
};

subtest 'get_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_subshape_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('get_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portion', 'storage');
    }
};

#
# get_subshape_portions test
#
subtest 'get_subshape_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portions', 'storage', 'string'));
    $utils->initialize('get_subshape_portions', '');
    eval {
        my $result = $utils->{api}->get_subshape_portions(%params);
    };
    if ($@) {
        fail("get_subshape_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_subshape_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_subshape_portions', 'name', $params{ name });
    $utils->initialize('get_subshape_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portions', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portions', 'name');
    }
};

subtest 'get_subshape_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_subshape_portions', 'slide_index', $params{ slide_index });
    $utils->initialize('get_subshape_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portions', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portions', 'slide_index');
    }
};

subtest 'get_subshape_portions invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portions', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_subshape_portions', 'path', $params{ path });
    $utils->initialize('get_subshape_portions', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portions', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portions', 'path');
    }
};

subtest 'get_subshape_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_subshape_portions', 'shape_index', $params{ shape_index });
    $utils->initialize('get_subshape_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portions', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portions', 'shape_index');
    }
};

subtest 'get_subshape_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_subshape_portions', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('get_subshape_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portions', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portions', 'paragraph_index');
    }
};

subtest 'get_subshape_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_subshape_portions', 'password', $params{ password });
    $utils->initialize('get_subshape_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portions', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portions', 'password');
    }
};

subtest 'get_subshape_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_subshape_portions', 'folder', $params{ folder });
    $utils->initialize('get_subshape_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portions', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portions', 'folder');
    }
};

subtest 'get_subshape_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshape_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshape_portions', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshape_portions', 'path', 'string'), 'shape_index' => $utils->get_param_value('get_subshape_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_subshape_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_subshape_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshape_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshape_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_subshape_portions', 'storage', $params{ storage });
    $utils->initialize('get_subshape_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_subshape_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshape_portions', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_subshape_portions', 'storage');
    }
};

#
# get_subshapes test
#
subtest 'get_subshapes' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshapes', 'storage', 'string'));
    $utils->initialize('get_subshapes', '');
    eval {
        my $result = $utils->{api}->get_subshapes(%params);
    };
    if ($@) {
        fail("get_subshapes raised an exception: $@");
    }
    pass();
};

subtest 'get_subshapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshapes', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_subshapes', 'name', $params{ name });
    $utils->initialize('get_subshapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshapes', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_subshapes', 'name');
    }
};

subtest 'get_subshapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshapes', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_subshapes', 'slide_index', $params{ slide_index });
    $utils->initialize('get_subshapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshapes', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_subshapes', 'slide_index');
    }
};

subtest 'get_subshapes invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshapes', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_subshapes', 'path', $params{ path });
    $utils->initialize('get_subshapes', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshapes', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('get_subshapes', 'path');
    }
};

subtest 'get_subshapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshapes', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_subshapes', 'password', $params{ password });
    $utils->initialize('get_subshapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshapes', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_subshapes', 'password');
    }
};

subtest 'get_subshapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshapes', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_subshapes', 'folder', $params{ folder });
    $utils->initialize('get_subshapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshapes', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_subshapes', 'folder');
    }
};

subtest 'get_subshapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_subshapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_subshapes', 'slide_index', 'int'), 'path' => $utils->get_param_value('get_subshapes', 'path', 'string'), 'password' => $utils->get_param_value('get_subshapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_subshapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_subshapes', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_subshapes', 'storage', $params{ storage });
    $utils->initialize('get_subshapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_subshapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_subshapes', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_subshapes', 'storage');
    }
};

#
# get_theme test
#
subtest 'get_theme' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $utils->initialize('get_theme', '');
    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        fail("get_theme raised an exception: $@");
    }
    pass();
};

subtest 'get_theme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_theme', 'name', $params{ name });
    $utils->initialize('get_theme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_theme', 'name');
    }
};

subtest 'get_theme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_theme', 'slide_index', $params{ slide_index });
    $utils->initialize('get_theme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('get_theme', 'slide_index');
    }
};

subtest 'get_theme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_theme', 'password', $params{ password });
    $utils->initialize('get_theme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_theme', 'password');
    }
};

subtest 'get_theme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_theme', 'folder', $params{ folder });
    $utils->initialize('get_theme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_theme', 'folder');
    }
};

subtest 'get_theme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_theme', 'storage', $params{ storage });
    $utils->initialize('get_theme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_theme', 'storage');
    }
};

#
# get_view_properties test
#
subtest 'get_view_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $utils->initialize('get_view_properties', '');
    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        fail("get_view_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_view_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_view_properties', 'name', $params{ name });
    $utils->initialize('get_view_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_view_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('get_view_properties', 'name');
    }
};

subtest 'get_view_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_view_properties', 'password', $params{ password });
    $utils->initialize('get_view_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_view_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('get_view_properties', 'password');
    }
};

subtest 'get_view_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_view_properties', 'folder', $params{ folder });
    $utils->initialize('get_view_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_view_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('get_view_properties', 'folder');
    }
};

subtest 'get_view_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_view_properties', 'storage', $params{ storage });
    $utils->initialize('get_view_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_view_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('get_view_properties', 'storage');
    }
};

#
# import_from_html test
#
subtest 'import_from_html' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $utils->initialize('import_from_html', '');
    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        fail("import_from_html raised an exception: $@");
    }
    pass();
};

subtest 'import_from_html invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('import_from_html', 'name', $params{ name });
    $utils->initialize('import_from_html', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('import_from_html', 'name');
    }
};

subtest 'import_from_html invalid html' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ html } = $utils->invalidize_param_value('import_from_html', 'html', $params{ html });
    $utils->initialize('import_from_html', 'html', $params{ html });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'html', $params{ html }, $@);
    } else {
        $utils->assert_no_error('import_from_html', 'html');
    }
};

subtest 'import_from_html invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('import_from_html', 'password', $params{ password });
    $utils->initialize('import_from_html', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('import_from_html', 'password');
    }
};

subtest 'import_from_html invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('import_from_html', 'folder', $params{ folder });
    $utils->initialize('import_from_html', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('import_from_html', 'folder');
    }
};

subtest 'import_from_html invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('import_from_html', 'storage', $params{ storage });
    $utils->initialize('import_from_html', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('import_from_html', 'storage');
    }
};

#
# import_from_pdf test
#
subtest 'import_from_pdf' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $utils->initialize('import_from_pdf', '');
    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        fail("import_from_pdf raised an exception: $@");
    }
    pass();
};

subtest 'import_from_pdf invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('import_from_pdf', 'name', $params{ name });
    $utils->initialize('import_from_pdf', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'name');
    }
};

subtest 'import_from_pdf invalid pdf' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ pdf } = $utils->invalidize_param_value('import_from_pdf', 'pdf', $params{ pdf });
    $utils->initialize('import_from_pdf', 'pdf', $params{ pdf });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'pdf', $params{ pdf }, $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'pdf');
    }
};

subtest 'import_from_pdf invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('import_from_pdf', 'password', $params{ password });
    $utils->initialize('import_from_pdf', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'password');
    }
};

subtest 'import_from_pdf invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('import_from_pdf', 'folder', $params{ folder });
    $utils->initialize('import_from_pdf', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'folder');
    }
};

subtest 'import_from_pdf invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('import_from_pdf', 'storage', $params{ storage });
    $utils->initialize('import_from_pdf', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'storage');
    }
};

#
# merge test
#
subtest 'merge' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $utils->initialize('merge', '');
    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        fail("merge raised an exception: $@");
    }
    pass();
};

subtest 'merge invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('merge', 'name', $params{ name });
    $utils->initialize('merge', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('merge', 'name');
    }
};

subtest 'merge invalid request' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ request } = $utils->invalidize_param_value('merge', 'request', $params{ request });
    $utils->initialize('merge', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'request', $params{ request }, $@);
    } else {
        $utils->assert_no_error('merge', 'request');
    }
};

subtest 'merge invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('merge', 'password', $params{ password });
    $utils->initialize('merge', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('merge', 'password');
    }
};

subtest 'merge invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('merge', 'folder', $params{ folder });
    $utils->initialize('merge', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('merge', 'folder');
    }
};

subtest 'merge invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('merge', 'storage', $params{ storage });
    $utils->initialize('merge', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('merge', 'storage');
    }
};

#
# merge_and_save_online test
#
subtest 'merge_and_save_online' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $utils->initialize('merge_and_save_online', '');
    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        fail("merge_and_save_online raised an exception: $@");
    }
    pass();
};

subtest 'merge_and_save_online invalid out_path' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('merge_and_save_online', 'out_path', $params{ out_path });
    $utils->initialize('merge_and_save_online', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_and_save_online', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('merge_and_save_online', 'out_path');
    }
};

subtest 'merge_and_save_online invalid files' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $params{ files } = $utils->invalidize_param_value('merge_and_save_online', 'files', $params{ files });
    $utils->initialize('merge_and_save_online', 'files', $params{ files });

    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_and_save_online', 'files', $params{ files }, $@);
    } else {
        $utils->assert_no_error('merge_and_save_online', 'files');
    }
};

subtest 'merge_and_save_online invalid request' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $params{ request } = $utils->invalidize_param_value('merge_and_save_online', 'request', $params{ request });
    $utils->initialize('merge_and_save_online', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_and_save_online', 'request', $params{ request }, $@);
    } else {
        $utils->assert_no_error('merge_and_save_online', 'request');
    }
};

subtest 'merge_and_save_online invalid storage' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('merge_and_save_online', 'storage', $params{ storage });
    $utils->initialize('merge_and_save_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_and_save_online', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('merge_and_save_online', 'storage');
    }
};

#
# merge_online test
#
subtest 'merge_online' => sub {
    my %params = ('files' => $utils->get_param_value('merge_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_online', 'storage', 'string'));
    $utils->initialize('merge_online', '');
    eval {
        my $result = $utils->{api}->merge_online(%params);
    };
    if ($@) {
        fail("merge_online raised an exception: $@");
    }
    pass();
};

subtest 'merge_online invalid files' => sub {
    my %params = ('files' => $utils->get_param_value('merge_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_online', 'storage', 'string'));
    $params{ files } = $utils->invalidize_param_value('merge_online', 'files', $params{ files });
    $utils->initialize('merge_online', 'files', $params{ files });

    eval {
        my $result = $utils->{api}->merge_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_online', 'files', $params{ files }, $@);
    } else {
        $utils->assert_no_error('merge_online', 'files');
    }
};

subtest 'merge_online invalid request' => sub {
    my %params = ('files' => $utils->get_param_value('merge_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_online', 'storage', 'string'));
    $params{ request } = $utils->invalidize_param_value('merge_online', 'request', $params{ request });
    $utils->initialize('merge_online', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->merge_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_online', 'request', $params{ request }, $@);
    } else {
        $utils->assert_no_error('merge_online', 'request');
    }
};

subtest 'merge_online invalid storage' => sub {
    my %params = ('files' => $utils->get_param_value('merge_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_online', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('merge_online', 'storage', $params{ storage });
    $utils->initialize('merge_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->merge_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_online', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('merge_online', 'storage');
    }
};

#
# move_file test
#
subtest 'move_file' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $utils->initialize('move_file', '');
    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        fail("move_file raised an exception: $@");
    }
    pass();
};

subtest 'move_file invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('move_file', 'src_path', $params{ src_path });
    $utils->initialize('move_file', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'src_path', $params{ src_path }, $@);
    } else {
        $utils->assert_no_error('move_file', 'src_path');
    }
};

subtest 'move_file invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('move_file', 'dest_path', $params{ dest_path });
    $utils->initialize('move_file', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'dest_path', $params{ dest_path }, $@);
    } else {
        $utils->assert_no_error('move_file', 'dest_path');
    }
};

subtest 'move_file invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('move_file', 'src_storage_name', $params{ src_storage_name });
    $utils->initialize('move_file', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'src_storage_name', $params{ src_storage_name }, $@);
    } else {
        $utils->assert_no_error('move_file', 'src_storage_name');
    }
};

subtest 'move_file invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('move_file', 'dest_storage_name', $params{ dest_storage_name });
    $utils->initialize('move_file', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'dest_storage_name', $params{ dest_storage_name }, $@);
    } else {
        $utils->assert_no_error('move_file', 'dest_storage_name');
    }
};

subtest 'move_file invalid version_id' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('move_file', 'version_id', $params{ version_id });
    $utils->initialize('move_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('move_file', 'version_id');
    }
};

#
# move_folder test
#
subtest 'move_folder' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $utils->initialize('move_folder', '');
    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        fail("move_folder raised an exception: $@");
    }
    pass();
};

subtest 'move_folder invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('move_folder', 'src_path', $params{ src_path });
    $utils->initialize('move_folder', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'src_path', $params{ src_path }, $@);
    } else {
        $utils->assert_no_error('move_folder', 'src_path');
    }
};

subtest 'move_folder invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('move_folder', 'dest_path', $params{ dest_path });
    $utils->initialize('move_folder', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'dest_path', $params{ dest_path }, $@);
    } else {
        $utils->assert_no_error('move_folder', 'dest_path');
    }
};

subtest 'move_folder invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('move_folder', 'src_storage_name', $params{ src_storage_name });
    $utils->initialize('move_folder', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'src_storage_name', $params{ src_storage_name }, $@);
    } else {
        $utils->assert_no_error('move_folder', 'src_storage_name');
    }
};

subtest 'move_folder invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('move_folder', 'dest_storage_name', $params{ dest_storage_name });
    $utils->initialize('move_folder', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'dest_storage_name', $params{ dest_storage_name }, $@);
    } else {
        $utils->assert_no_error('move_folder', 'dest_storage_name');
    }
};

#
# move_section test
#
subtest 'move_section' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $utils->initialize('move_section', '');
    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        fail("move_section raised an exception: $@");
    }
    pass();
};

subtest 'move_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('move_section', 'name', $params{ name });
    $utils->initialize('move_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('move_section', 'name');
    }
};

subtest 'move_section invalid section_index' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ section_index } = $utils->invalidize_param_value('move_section', 'section_index', $params{ section_index });
    $utils->initialize('move_section', 'section_index', $params{ section_index });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'section_index', $params{ section_index }, $@);
    } else {
        $utils->assert_no_error('move_section', 'section_index');
    }
};

subtest 'move_section invalid new_position' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ new_position } = $utils->invalidize_param_value('move_section', 'new_position', $params{ new_position });
    $utils->initialize('move_section', 'new_position', $params{ new_position });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'new_position', $params{ new_position }, $@);
    } else {
        $utils->assert_no_error('move_section', 'new_position');
    }
};

subtest 'move_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('move_section', 'password', $params{ password });
    $utils->initialize('move_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('move_section', 'password');
    }
};

subtest 'move_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('move_section', 'folder', $params{ folder });
    $utils->initialize('move_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('move_section', 'folder');
    }
};

subtest 'move_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('move_section', 'storage', $params{ storage });
    $utils->initialize('move_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('move_section', 'storage');
    }
};

#
# move_slide test
#
subtest 'move_slide' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $utils->initialize('move_slide', '');
    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        fail("move_slide raised an exception: $@");
    }
    pass();
};

subtest 'move_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('move_slide', 'name', $params{ name });
    $utils->initialize('move_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('move_slide', 'name');
    }
};

subtest 'move_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('move_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('move_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('move_slide', 'slide_index');
    }
};

subtest 'move_slide invalid new_position' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ new_position } = $utils->invalidize_param_value('move_slide', 'new_position', $params{ new_position });
    $utils->initialize('move_slide', 'new_position', $params{ new_position });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'new_position', $params{ new_position }, $@);
    } else {
        $utils->assert_no_error('move_slide', 'new_position');
    }
};

subtest 'move_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('move_slide', 'password', $params{ password });
    $utils->initialize('move_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('move_slide', 'password');
    }
};

subtest 'move_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('move_slide', 'folder', $params{ folder });
    $utils->initialize('move_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('move_slide', 'folder');
    }
};

subtest 'move_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('move_slide', 'storage', $params{ storage });
    $utils->initialize('move_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('move_slide', 'storage');
    }
};

#
# notes_slide_exists test
#
subtest 'notes_slide_exists' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $utils->initialize('notes_slide_exists', '');
    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        fail("notes_slide_exists raised an exception: $@");
    }
    pass();
};

subtest 'notes_slide_exists invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('notes_slide_exists', 'name', $params{ name });
    $utils->initialize('notes_slide_exists', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'name');
    }
};

subtest 'notes_slide_exists invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('notes_slide_exists', 'slide_index', $params{ slide_index });
    $utils->initialize('notes_slide_exists', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'slide_index');
    }
};

subtest 'notes_slide_exists invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('notes_slide_exists', 'password', $params{ password });
    $utils->initialize('notes_slide_exists', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'password');
    }
};

subtest 'notes_slide_exists invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('notes_slide_exists', 'folder', $params{ folder });
    $utils->initialize('notes_slide_exists', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'folder');
    }
};

subtest 'notes_slide_exists invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('notes_slide_exists', 'storage', $params{ storage });
    $utils->initialize('notes_slide_exists', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'storage');
    }
};

#
# notes_slide_exists_online test
#
subtest 'notes_slide_exists_online' => sub {
    my %params = ('document' => $utils->get_param_value('notes_slide_exists_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('notes_slide_exists_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists_online', 'password', 'string'));
    $utils->initialize('notes_slide_exists_online', '');
    eval {
        my $result = $utils->{api}->notes_slide_exists_online(%params);
    };
    if ($@) {
        fail("notes_slide_exists_online raised an exception: $@");
    }
    pass();
};

subtest 'notes_slide_exists_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('notes_slide_exists_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('notes_slide_exists_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('notes_slide_exists_online', 'document', $params{ document });
    $utils->initialize('notes_slide_exists_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->notes_slide_exists_online(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('notes_slide_exists_online', 'document');
    }
};

subtest 'notes_slide_exists_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('notes_slide_exists_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('notes_slide_exists_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('notes_slide_exists_online', 'slide_index', $params{ slide_index });
    $utils->initialize('notes_slide_exists_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->notes_slide_exists_online(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('notes_slide_exists_online', 'slide_index');
    }
};

subtest 'notes_slide_exists_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('notes_slide_exists_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('notes_slide_exists_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('notes_slide_exists_online', 'password', $params{ password });
    $utils->initialize('notes_slide_exists_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->notes_slide_exists_online(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('notes_slide_exists_online', 'password');
    }
};

#
# object_exists test
#
subtest 'object_exists' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $utils->initialize('object_exists', '');
    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        fail("object_exists raised an exception: $@");
    }
    pass();
};

subtest 'object_exists invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $params{ path } = $utils->invalidize_param_value('object_exists', 'path', $params{ path });
    $utils->initialize('object_exists', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        $utils->assert_error('object_exists', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('object_exists', 'path');
    }
};

subtest 'object_exists invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('object_exists', 'storage_name', $params{ storage_name });
    $utils->initialize('object_exists', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        $utils->assert_error('object_exists', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('object_exists', 'storage_name');
    }
};

subtest 'object_exists invalid version_id' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('object_exists', 'version_id', $params{ version_id });
    $utils->initialize('object_exists', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        $utils->assert_error('object_exists', 'version_id', $params{ version_id }, $@);
    } else {
        $utils->assert_no_error('object_exists', 'version_id');
    }
};

#
# ordered_merge test
#
subtest 'ordered_merge' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $utils->initialize('ordered_merge', '');
    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        fail("ordered_merge raised an exception: $@");
    }
    pass();
};

subtest 'ordered_merge invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('ordered_merge', 'name', $params{ name });
    $utils->initialize('ordered_merge', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'name');
    }
};

subtest 'ordered_merge invalid request' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ request } = $utils->invalidize_param_value('ordered_merge', 'request', $params{ request });
    $utils->initialize('ordered_merge', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'request', $params{ request }, $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'request');
    }
};

subtest 'ordered_merge invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('ordered_merge', 'password', $params{ password });
    $utils->initialize('ordered_merge', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'password');
    }
};

subtest 'ordered_merge invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('ordered_merge', 'folder', $params{ folder });
    $utils->initialize('ordered_merge', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'folder');
    }
};

subtest 'ordered_merge invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('ordered_merge', 'storage', $params{ storage });
    $utils->initialize('ordered_merge', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'storage');
    }
};

#
# pipeline test
#
subtest 'pipeline' => sub {
    my %params = ('pipeline' => $utils->get_param_value('pipeline', 'pipeline', 'Pipeline'), 'files' => $utils->get_param_value('pipeline', 'files', 'ARRAY[string]'));
    $utils->initialize('pipeline', '');
    eval {
        my $result = $utils->{api}->pipeline(%params);
    };
    if ($@) {
        fail("pipeline raised an exception: $@");
    }
    pass();
};

subtest 'pipeline invalid pipeline' => sub {
    my %params = ('pipeline' => $utils->get_param_value('pipeline', 'pipeline', 'Pipeline'), 'files' => $utils->get_param_value('pipeline', 'files', 'ARRAY[string]'));
    $params{ pipeline } = $utils->invalidize_param_value('pipeline', 'pipeline', $params{ pipeline });
    $utils->initialize('pipeline', 'pipeline', $params{ pipeline });

    eval {
        my $result = $utils->{api}->pipeline(%params);
    };
    if ($@) {
        $utils->assert_error('pipeline', 'pipeline', $params{ pipeline }, $@);
    } else {
        $utils->assert_no_error('pipeline', 'pipeline');
    }
};

subtest 'pipeline invalid files' => sub {
    my %params = ('pipeline' => $utils->get_param_value('pipeline', 'pipeline', 'Pipeline'), 'files' => $utils->get_param_value('pipeline', 'files', 'ARRAY[string]'));
    $params{ files } = $utils->invalidize_param_value('pipeline', 'files', $params{ files });
    $utils->initialize('pipeline', 'files', $params{ files });

    eval {
        my $result = $utils->{api}->pipeline(%params);
    };
    if ($@) {
        $utils->assert_error('pipeline', 'files', $params{ files }, $@);
    } else {
        $utils->assert_no_error('pipeline', 'files');
    }
};

#
# reorder_slides test
#
subtest 'reorder_slides' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'string'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $utils->initialize('reorder_slides', '');
    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        fail("reorder_slides raised an exception: $@");
    }
    pass();
};

subtest 'reorder_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'string'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('reorder_slides', 'name', $params{ name });
    $utils->initialize('reorder_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'name');
    }
};

subtest 'reorder_slides invalid old_positions' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'string'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ old_positions } = $utils->invalidize_param_value('reorder_slides', 'old_positions', $params{ old_positions });
    $utils->initialize('reorder_slides', 'old_positions', $params{ old_positions });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'old_positions', $params{ old_positions }, $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'old_positions');
    }
};

subtest 'reorder_slides invalid new_positions' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'string'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ new_positions } = $utils->invalidize_param_value('reorder_slides', 'new_positions', $params{ new_positions });
    $utils->initialize('reorder_slides', 'new_positions', $params{ new_positions });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'new_positions', $params{ new_positions }, $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'new_positions');
    }
};

subtest 'reorder_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'string'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('reorder_slides', 'password', $params{ password });
    $utils->initialize('reorder_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'password');
    }
};

subtest 'reorder_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'string'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('reorder_slides', 'folder', $params{ folder });
    $utils->initialize('reorder_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'folder');
    }
};

subtest 'reorder_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'string'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'string'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('reorder_slides', 'storage', $params{ storage });
    $utils->initialize('reorder_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'storage');
    }
};

#
# replace_presentation_text test
#
subtest 'replace_presentation_text' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $utils->initialize('replace_presentation_text', '');
    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        fail("replace_presentation_text raised an exception: $@");
    }
    pass();
};

subtest 'replace_presentation_text invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('replace_presentation_text', 'name', $params{ name });
    $utils->initialize('replace_presentation_text', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'name');
    }
};

subtest 'replace_presentation_text invalid old_value' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('replace_presentation_text', 'old_value', $params{ old_value });
    $utils->initialize('replace_presentation_text', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'old_value', $params{ old_value }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'old_value');
    }
};

subtest 'replace_presentation_text invalid new_value' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('replace_presentation_text', 'new_value', $params{ new_value });
    $utils->initialize('replace_presentation_text', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'new_value', $params{ new_value }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'new_value');
    }
};

subtest 'replace_presentation_text invalid ignore_case' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('replace_presentation_text', 'ignore_case', $params{ ignore_case });
    $utils->initialize('replace_presentation_text', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'ignore_case', $params{ ignore_case }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'ignore_case');
    }
};

subtest 'replace_presentation_text invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_presentation_text', 'password', $params{ password });
    $utils->initialize('replace_presentation_text', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'password');
    }
};

subtest 'replace_presentation_text invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('replace_presentation_text', 'folder', $params{ folder });
    $utils->initialize('replace_presentation_text', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'folder');
    }
};

subtest 'replace_presentation_text invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('replace_presentation_text', 'storage', $params{ storage });
    $utils->initialize('replace_presentation_text', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'storage');
    }
};

#
# replace_presentation_text_online test
#
subtest 'replace_presentation_text_online' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $utils->initialize('replace_presentation_text_online', '');
    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        fail("replace_presentation_text_online raised an exception: $@");
    }
    pass();
};

subtest 'replace_presentation_text_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('replace_presentation_text_online', 'document', $params{ document });
    $utils->initialize('replace_presentation_text_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'document');
    }
};

subtest 'replace_presentation_text_online invalid old_value' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('replace_presentation_text_online', 'old_value', $params{ old_value });
    $utils->initialize('replace_presentation_text_online', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'old_value', $params{ old_value }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'old_value');
    }
};

subtest 'replace_presentation_text_online invalid new_value' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('replace_presentation_text_online', 'new_value', $params{ new_value });
    $utils->initialize('replace_presentation_text_online', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'new_value', $params{ new_value }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'new_value');
    }
};

subtest 'replace_presentation_text_online invalid ignore_case' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('replace_presentation_text_online', 'ignore_case', $params{ ignore_case });
    $utils->initialize('replace_presentation_text_online', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'ignore_case', $params{ ignore_case }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'ignore_case');
    }
};

subtest 'replace_presentation_text_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_presentation_text_online', 'password', $params{ password });
    $utils->initialize('replace_presentation_text_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'password');
    }
};

#
# replace_slide_text test
#
subtest 'replace_slide_text' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $utils->initialize('replace_slide_text', '');
    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        fail("replace_slide_text raised an exception: $@");
    }
    pass();
};

subtest 'replace_slide_text invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('replace_slide_text', 'name', $params{ name });
    $utils->initialize('replace_slide_text', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'name');
    }
};

subtest 'replace_slide_text invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('replace_slide_text', 'slide_index', $params{ slide_index });
    $utils->initialize('replace_slide_text', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'slide_index');
    }
};

subtest 'replace_slide_text invalid old_value' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('replace_slide_text', 'old_value', $params{ old_value });
    $utils->initialize('replace_slide_text', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'old_value', $params{ old_value }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'old_value');
    }
};

subtest 'replace_slide_text invalid new_value' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('replace_slide_text', 'new_value', $params{ new_value });
    $utils->initialize('replace_slide_text', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'new_value', $params{ new_value }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'new_value');
    }
};

subtest 'replace_slide_text invalid ignore_case' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('replace_slide_text', 'ignore_case', $params{ ignore_case });
    $utils->initialize('replace_slide_text', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'ignore_case', $params{ ignore_case }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'ignore_case');
    }
};

subtest 'replace_slide_text invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_slide_text', 'password', $params{ password });
    $utils->initialize('replace_slide_text', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'password');
    }
};

subtest 'replace_slide_text invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('replace_slide_text', 'folder', $params{ folder });
    $utils->initialize('replace_slide_text', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'folder');
    }
};

subtest 'replace_slide_text invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('replace_slide_text', 'storage', $params{ storage });
    $utils->initialize('replace_slide_text', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'storage');
    }
};

#
# replace_slide_text_online test
#
subtest 'replace_slide_text_online' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $utils->initialize('replace_slide_text_online', '');
    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        fail("replace_slide_text_online raised an exception: $@");
    }
    pass();
};

subtest 'replace_slide_text_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('replace_slide_text_online', 'document', $params{ document });
    $utils->initialize('replace_slide_text_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'document');
    }
};

subtest 'replace_slide_text_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('replace_slide_text_online', 'slide_index', $params{ slide_index });
    $utils->initialize('replace_slide_text_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'slide_index');
    }
};

subtest 'replace_slide_text_online invalid old_value' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('replace_slide_text_online', 'old_value', $params{ old_value });
    $utils->initialize('replace_slide_text_online', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'old_value', $params{ old_value }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'old_value');
    }
};

subtest 'replace_slide_text_online invalid new_value' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('replace_slide_text_online', 'new_value', $params{ new_value });
    $utils->initialize('replace_slide_text_online', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'new_value', $params{ new_value }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'new_value');
    }
};

subtest 'replace_slide_text_online invalid ignore_case' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('replace_slide_text_online', 'ignore_case', $params{ ignore_case });
    $utils->initialize('replace_slide_text_online', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'ignore_case', $params{ ignore_case }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'ignore_case');
    }
};

subtest 'replace_slide_text_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_slide_text_online', 'password', $params{ password });
    $utils->initialize('replace_slide_text_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'password');
    }
};

#
# save_presentation test
#
subtest 'save_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $utils->initialize('save_presentation', '');
    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        fail("save_presentation raised an exception: $@");
    }
    pass();
};

subtest 'save_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_presentation', 'name', $params{ name });
    $utils->initialize('save_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('save_presentation', 'name');
    }
};

subtest 'save_presentation invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $params{ format } = $utils->invalidize_param_value('save_presentation', 'format', $params{ format });
    $utils->initialize('save_presentation', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('save_presentation', 'format');
    }
};

subtest 'save_presentation invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_presentation', 'out_path', $params{ out_path });
    $utils->initialize('save_presentation', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('save_presentation', 'out_path');
    }
};

subtest 'save_presentation invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $params{ options } = $utils->invalidize_param_value('save_presentation', 'options', $params{ options });
    $utils->initialize('save_presentation', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('save_presentation', 'options');
    }
};

subtest 'save_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_presentation', 'password', $params{ password });
    $utils->initialize('save_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('save_presentation', 'password');
    }
};

subtest 'save_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_presentation', 'folder', $params{ folder });
    $utils->initialize('save_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('save_presentation', 'folder');
    }
};

subtest 'save_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_presentation', 'storage', $params{ storage });
    $utils->initialize('save_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('save_presentation', 'storage');
    }
};

subtest 'save_presentation invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_presentation', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('save_presentation', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('save_presentation', 'fonts_folder');
    }
};

subtest 'save_presentation invalid slides' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'string'));
    $params{ slides } = $utils->invalidize_param_value('save_presentation', 'slides', $params{ slides });
    $utils->initialize('save_presentation', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'slides', $params{ slides }, $@);
    } else {
        $utils->assert_no_error('save_presentation', 'slides');
    }
};

#
# save_shape test
#
subtest 'save_shape' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $utils->initialize('save_shape', '');
    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        fail("save_shape raised an exception: $@");
    }
    pass();
};

subtest 'save_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_shape', 'name', $params{ name });
    $utils->initialize('save_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'name');
    }
};

subtest 'save_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('save_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('save_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'slide_index');
    }
};

subtest 'save_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('save_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('save_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'shape_index');
    }
};

subtest 'save_shape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('save_shape', 'format', $params{ format });
    $utils->initialize('save_shape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'format');
    }
};

subtest 'save_shape invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_shape', 'out_path', $params{ out_path });
    $utils->initialize('save_shape', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'out_path');
    }
};

subtest 'save_shape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('save_shape', 'options', $params{ options });
    $utils->initialize('save_shape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'options');
    }
};

subtest 'save_shape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('save_shape', 'scale_x', $params{ scale_x });
    $utils->initialize('save_shape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'scale_x');
    }
};

subtest 'save_shape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('save_shape', 'scale_y', $params{ scale_y });
    $utils->initialize('save_shape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'scale_y');
    }
};

subtest 'save_shape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('save_shape', 'bounds', $params{ bounds });
    $utils->initialize('save_shape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'bounds');
    }
};

subtest 'save_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_shape', 'password', $params{ password });
    $utils->initialize('save_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'password');
    }
};

subtest 'save_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_shape', 'folder', $params{ folder });
    $utils->initialize('save_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'folder');
    }
};

subtest 'save_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_shape', 'storage', $params{ storage });
    $utils->initialize('save_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'storage');
    }
};

subtest 'save_shape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_shape', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('save_shape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('save_shape', 'fonts_folder');
    }
};

#
# save_shape_online test
#
subtest 'save_shape_online' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $utils->initialize('save_shape_online', '');
    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        fail("save_shape_online raised an exception: $@");
    }
    pass();
};

subtest 'save_shape_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ document } = $utils->invalidize_param_value('save_shape_online', 'document', $params{ document });
    $utils->initialize('save_shape_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'document');
    }
};

subtest 'save_shape_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ slide_index } = $utils->invalidize_param_value('save_shape_online', 'slide_index', $params{ slide_index });
    $utils->initialize('save_shape_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'slide_index');
    }
};

subtest 'save_shape_online invalid shape_index' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ shape_index } = $utils->invalidize_param_value('save_shape_online', 'shape_index', $params{ shape_index });
    $utils->initialize('save_shape_online', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'shape_index');
    }
};

subtest 'save_shape_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ format } = $utils->invalidize_param_value('save_shape_online', 'format', $params{ format });
    $utils->initialize('save_shape_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'format');
    }
};

subtest 'save_shape_online invalid out_path' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ out_path } = $utils->invalidize_param_value('save_shape_online', 'out_path', $params{ out_path });
    $utils->initialize('save_shape_online', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'out_path');
    }
};

subtest 'save_shape_online invalid scale_x' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ scale_x } = $utils->invalidize_param_value('save_shape_online', 'scale_x', $params{ scale_x });
    $utils->initialize('save_shape_online', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'scale_x');
    }
};

subtest 'save_shape_online invalid scale_y' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ scale_y } = $utils->invalidize_param_value('save_shape_online', 'scale_y', $params{ scale_y });
    $utils->initialize('save_shape_online', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'scale_y');
    }
};

subtest 'save_shape_online invalid bounds' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ bounds } = $utils->invalidize_param_value('save_shape_online', 'bounds', $params{ bounds });
    $utils->initialize('save_shape_online', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'bounds');
    }
};

subtest 'save_shape_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ password } = $utils->invalidize_param_value('save_shape_online', 'password', $params{ password });
    $utils->initialize('save_shape_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'password');
    }
};

subtest 'save_shape_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('save_shape_online', 'storage', $params{ storage });
    $utils->initialize('save_shape_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'storage');
    }
};

subtest 'save_shape_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_shape_online', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('save_shape_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'fonts_folder');
    }
};

subtest 'save_shape_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ options } = $utils->invalidize_param_value('save_shape_online', 'options', $params{ options });
    $utils->initialize('save_shape_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'options');
    }
};

#
# save_slide test
#
subtest 'save_slide' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $utils->initialize('save_slide', '');
    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        fail("save_slide raised an exception: $@");
    }
    pass();
};

subtest 'save_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_slide', 'name', $params{ name });
    $utils->initialize('save_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'name');
    }
};

subtest 'save_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('save_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('save_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'slide_index');
    }
};

subtest 'save_slide invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('save_slide', 'format', $params{ format });
    $utils->initialize('save_slide', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'format');
    }
};

subtest 'save_slide invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_slide', 'out_path', $params{ out_path });
    $utils->initialize('save_slide', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'out_path');
    }
};

subtest 'save_slide invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('save_slide', 'options', $params{ options });
    $utils->initialize('save_slide', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'options');
    }
};

subtest 'save_slide invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('save_slide', 'width', $params{ width });
    $utils->initialize('save_slide', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'width');
    }
};

subtest 'save_slide invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('save_slide', 'height', $params{ height });
    $utils->initialize('save_slide', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'height');
    }
};

subtest 'save_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_slide', 'password', $params{ password });
    $utils->initialize('save_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'password');
    }
};

subtest 'save_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_slide', 'folder', $params{ folder });
    $utils->initialize('save_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'folder');
    }
};

subtest 'save_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_slide', 'storage', $params{ storage });
    $utils->initialize('save_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'storage');
    }
};

subtest 'save_slide invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_slide', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('save_slide', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('save_slide', 'fonts_folder');
    }
};

#
# save_slide_online test
#
subtest 'save_slide_online' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $utils->initialize('save_slide_online', '');
    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        fail("save_slide_online raised an exception: $@");
    }
    pass();
};

subtest 'save_slide_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('save_slide_online', 'document', $params{ document });
    $utils->initialize('save_slide_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'document');
    }
};

subtest 'save_slide_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ slide_index } = $utils->invalidize_param_value('save_slide_online', 'slide_index', $params{ slide_index });
    $utils->initialize('save_slide_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'slide_index');
    }
};

subtest 'save_slide_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('save_slide_online', 'format', $params{ format });
    $utils->initialize('save_slide_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'format');
    }
};

subtest 'save_slide_online invalid out_path' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ out_path } = $utils->invalidize_param_value('save_slide_online', 'out_path', $params{ out_path });
    $utils->initialize('save_slide_online', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'out_path');
    }
};

subtest 'save_slide_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ width } = $utils->invalidize_param_value('save_slide_online', 'width', $params{ width });
    $utils->initialize('save_slide_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'width');
    }
};

subtest 'save_slide_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ height } = $utils->invalidize_param_value('save_slide_online', 'height', $params{ height });
    $utils->initialize('save_slide_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'height');
    }
};

subtest 'save_slide_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('save_slide_online', 'password', $params{ password });
    $utils->initialize('save_slide_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'password');
    }
};

subtest 'save_slide_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('save_slide_online', 'storage', $params{ storage });
    $utils->initialize('save_slide_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'storage');
    }
};

subtest 'save_slide_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_slide_online', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('save_slide_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'fonts_folder');
    }
};

subtest 'save_slide_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('save_slide_online', 'options', $params{ options });
    $utils->initialize('save_slide_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'options');
    }
};

#
# save_special_slide_shape test
#
subtest 'save_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $utils->initialize('save_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        fail("save_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'save_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_special_slide_shape', 'name', $params{ name });
    $utils->initialize('save_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'name');
    }
};

subtest 'save_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('save_special_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('save_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'slide_index');
    }
};

subtest 'save_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('save_special_slide_shape', 'slide_type', $params{ slide_type });
    $utils->initialize('save_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'slide_type');
    }
};

subtest 'save_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('save_special_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('save_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'shape_index');
    }
};

subtest 'save_special_slide_shape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('save_special_slide_shape', 'format', $params{ format });
    $utils->initialize('save_special_slide_shape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'format');
    }
};

subtest 'save_special_slide_shape invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_special_slide_shape', 'out_path', $params{ out_path });
    $utils->initialize('save_special_slide_shape', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'out_path');
    }
};

subtest 'save_special_slide_shape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('save_special_slide_shape', 'options', $params{ options });
    $utils->initialize('save_special_slide_shape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'options');
    }
};

subtest 'save_special_slide_shape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('save_special_slide_shape', 'scale_x', $params{ scale_x });
    $utils->initialize('save_special_slide_shape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'scale_x');
    }
};

subtest 'save_special_slide_shape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('save_special_slide_shape', 'scale_y', $params{ scale_y });
    $utils->initialize('save_special_slide_shape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'scale_y');
    }
};

subtest 'save_special_slide_shape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('save_special_slide_shape', 'bounds', $params{ bounds });
    $utils->initialize('save_special_slide_shape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'bounds');
    }
};

subtest 'save_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_special_slide_shape', 'password', $params{ password });
    $utils->initialize('save_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'password');
    }
};

subtest 'save_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_special_slide_shape', 'folder', $params{ folder });
    $utils->initialize('save_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'folder');
    }
};

subtest 'save_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_special_slide_shape', 'storage', $params{ storage });
    $utils->initialize('save_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'storage');
    }
};

subtest 'save_special_slide_shape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_special_slide_shape', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('save_special_slide_shape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'fonts_folder');
    }
};

#
# save_special_slide_subshape test
#
subtest 'save_special_slide_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $utils->initialize('save_special_slide_subshape', '');
    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        fail("save_special_slide_subshape raised an exception: $@");
    }
    pass();
};

subtest 'save_special_slide_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_special_slide_subshape', 'name', $params{ name });
    $utils->initialize('save_special_slide_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'name');
    }
};

subtest 'save_special_slide_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('save_special_slide_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('save_special_slide_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'slide_index');
    }
};

subtest 'save_special_slide_subshape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('save_special_slide_subshape', 'slide_type', $params{ slide_type });
    $utils->initialize('save_special_slide_subshape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'slide_type');
    }
};

subtest 'save_special_slide_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ path } = $utils->invalidize_param_value('save_special_slide_subshape', 'path', $params{ path });
    $utils->initialize('save_special_slide_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'path');
    }
};

subtest 'save_special_slide_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('save_special_slide_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('save_special_slide_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'shape_index');
    }
};

subtest 'save_special_slide_subshape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('save_special_slide_subshape', 'format', $params{ format });
    $utils->initialize('save_special_slide_subshape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'format');
    }
};

subtest 'save_special_slide_subshape invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_special_slide_subshape', 'out_path', $params{ out_path });
    $utils->initialize('save_special_slide_subshape', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'out_path');
    }
};

subtest 'save_special_slide_subshape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('save_special_slide_subshape', 'options', $params{ options });
    $utils->initialize('save_special_slide_subshape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'options');
    }
};

subtest 'save_special_slide_subshape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('save_special_slide_subshape', 'scale_x', $params{ scale_x });
    $utils->initialize('save_special_slide_subshape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'scale_x');
    }
};

subtest 'save_special_slide_subshape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('save_special_slide_subshape', 'scale_y', $params{ scale_y });
    $utils->initialize('save_special_slide_subshape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'scale_y');
    }
};

subtest 'save_special_slide_subshape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('save_special_slide_subshape', 'bounds', $params{ bounds });
    $utils->initialize('save_special_slide_subshape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'bounds');
    }
};

subtest 'save_special_slide_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_special_slide_subshape', 'password', $params{ password });
    $utils->initialize('save_special_slide_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'password');
    }
};

subtest 'save_special_slide_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_special_slide_subshape', 'folder', $params{ folder });
    $utils->initialize('save_special_slide_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'folder');
    }
};

subtest 'save_special_slide_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_special_slide_subshape', 'storage', $params{ storage });
    $utils->initialize('save_special_slide_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'storage');
    }
};

subtest 'save_special_slide_subshape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('save_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_subshape', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_special_slide_subshape', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('save_special_slide_subshape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_subshape', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('save_special_slide_subshape', 'fonts_folder');
    }
};

#
# save_subshape test
#
subtest 'save_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $utils->initialize('save_subshape', '');
    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        fail("save_subshape raised an exception: $@");
    }
    pass();
};

subtest 'save_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_subshape', 'name', $params{ name });
    $utils->initialize('save_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'name');
    }
};

subtest 'save_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('save_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('save_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'slide_index');
    }
};

subtest 'save_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ path } = $utils->invalidize_param_value('save_subshape', 'path', $params{ path });
    $utils->initialize('save_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'path');
    }
};

subtest 'save_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('save_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('save_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'shape_index');
    }
};

subtest 'save_subshape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('save_subshape', 'format', $params{ format });
    $utils->initialize('save_subshape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'format');
    }
};

subtest 'save_subshape invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_subshape', 'out_path', $params{ out_path });
    $utils->initialize('save_subshape', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'out_path', $params{ out_path }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'out_path');
    }
};

subtest 'save_subshape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('save_subshape', 'options', $params{ options });
    $utils->initialize('save_subshape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'options');
    }
};

subtest 'save_subshape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('save_subshape', 'scale_x', $params{ scale_x });
    $utils->initialize('save_subshape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'scale_x', $params{ scale_x }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'scale_x');
    }
};

subtest 'save_subshape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('save_subshape', 'scale_y', $params{ scale_y });
    $utils->initialize('save_subshape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'scale_y', $params{ scale_y }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'scale_y');
    }
};

subtest 'save_subshape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('save_subshape', 'bounds', $params{ bounds });
    $utils->initialize('save_subshape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'bounds', $params{ bounds }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'bounds');
    }
};

subtest 'save_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_subshape', 'password', $params{ password });
    $utils->initialize('save_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'password');
    }
};

subtest 'save_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_subshape', 'folder', $params{ folder });
    $utils->initialize('save_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'folder');
    }
};

subtest 'save_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_subshape', 'storage', $params{ storage });
    $utils->initialize('save_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'storage');
    }
};

subtest 'save_subshape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('save_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('save_subshape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_subshape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_subshape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_subshape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_subshape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_subshape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_subshape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('save_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_subshape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_subshape', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_subshape', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('save_subshape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('save_subshape', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('save_subshape', 'fonts_folder');
    }
};

#
# set_animation test
#
subtest 'set_animation' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $utils->initialize('set_animation', '');
    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        fail("set_animation raised an exception: $@");
    }
    pass();
};

subtest 'set_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_animation', 'name', $params{ name });
    $utils->initialize('set_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_animation', 'name');
    }
};

subtest 'set_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_animation', 'slide_index', $params{ slide_index });
    $utils->initialize('set_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('set_animation', 'slide_index');
    }
};

subtest 'set_animation invalid animation' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ animation } = $utils->invalidize_param_value('set_animation', 'animation', $params{ animation });
    $utils->initialize('set_animation', 'animation', $params{ animation });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'animation', $params{ animation }, $@);
    } else {
        $utils->assert_no_error('set_animation', 'animation');
    }
};

subtest 'set_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_animation', 'password', $params{ password });
    $utils->initialize('set_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_animation', 'password');
    }
};

subtest 'set_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_animation', 'folder', $params{ folder });
    $utils->initialize('set_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_animation', 'folder');
    }
};

subtest 'set_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_animation', 'storage', $params{ storage });
    $utils->initialize('set_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_animation', 'storage');
    }
};

#
# set_background test
#
subtest 'set_background' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $utils->initialize('set_background', '');
    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        fail("set_background raised an exception: $@");
    }
    pass();
};

subtest 'set_background invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_background', 'name', $params{ name });
    $utils->initialize('set_background', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_background', 'name');
    }
};

subtest 'set_background invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_background', 'slide_index', $params{ slide_index });
    $utils->initialize('set_background', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('set_background', 'slide_index');
    }
};

subtest 'set_background invalid background' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ background } = $utils->invalidize_param_value('set_background', 'background', $params{ background });
    $utils->initialize('set_background', 'background', $params{ background });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'background', $params{ background }, $@);
    } else {
        $utils->assert_no_error('set_background', 'background');
    }
};

subtest 'set_background invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_background', 'password', $params{ password });
    $utils->initialize('set_background', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_background', 'password');
    }
};

subtest 'set_background invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_background', 'folder', $params{ folder });
    $utils->initialize('set_background', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_background', 'folder');
    }
};

subtest 'set_background invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_background', 'storage', $params{ storage });
    $utils->initialize('set_background', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_background', 'storage');
    }
};

#
# set_background_color test
#
subtest 'set_background_color' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $utils->initialize('set_background_color', '');
    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        fail("set_background_color raised an exception: $@");
    }
    pass();
};

subtest 'set_background_color invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_background_color', 'name', $params{ name });
    $utils->initialize('set_background_color', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_background_color', 'name');
    }
};

subtest 'set_background_color invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_background_color', 'slide_index', $params{ slide_index });
    $utils->initialize('set_background_color', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('set_background_color', 'slide_index');
    }
};

subtest 'set_background_color invalid color' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ color } = $utils->invalidize_param_value('set_background_color', 'color', $params{ color });
    $utils->initialize('set_background_color', 'color', $params{ color });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'color', $params{ color }, $@);
    } else {
        $utils->assert_no_error('set_background_color', 'color');
    }
};

subtest 'set_background_color invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_background_color', 'password', $params{ password });
    $utils->initialize('set_background_color', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_background_color', 'password');
    }
};

subtest 'set_background_color invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_background_color', 'folder', $params{ folder });
    $utils->initialize('set_background_color', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_background_color', 'folder');
    }
};

subtest 'set_background_color invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_background_color', 'storage', $params{ storage });
    $utils->initialize('set_background_color', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_background_color', 'storage');
    }
};

#
# set_document_properties test
#
subtest 'set_document_properties' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $utils->initialize('set_document_properties', '');
    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        fail("set_document_properties raised an exception: $@");
    }
    pass();
};

subtest 'set_document_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_document_properties', 'name', $params{ name });
    $utils->initialize('set_document_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'name');
    }
};

subtest 'set_document_properties invalid properties' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ properties } = $utils->invalidize_param_value('set_document_properties', 'properties', $params{ properties });
    $utils->initialize('set_document_properties', 'properties', $params{ properties });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'properties', $params{ properties }, $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'properties');
    }
};

subtest 'set_document_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_document_properties', 'password', $params{ password });
    $utils->initialize('set_document_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'password');
    }
};

subtest 'set_document_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_document_properties', 'folder', $params{ folder });
    $utils->initialize('set_document_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'folder');
    }
};

subtest 'set_document_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_document_properties', 'storage', $params{ storage });
    $utils->initialize('set_document_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'storage');
    }
};

#
# set_document_property test
#
subtest 'set_document_property' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $utils->initialize('set_document_property', '');
    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        fail("set_document_property raised an exception: $@");
    }
    pass();
};

subtest 'set_document_property invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_document_property', 'name', $params{ name });
    $utils->initialize('set_document_property', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_document_property', 'name');
    }
};

subtest 'set_document_property invalid property_name' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ property_name } = $utils->invalidize_param_value('set_document_property', 'property_name', $params{ property_name });
    $utils->initialize('set_document_property', 'property_name', $params{ property_name });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'property_name', $params{ property_name }, $@);
    } else {
        $utils->assert_no_error('set_document_property', 'property_name');
    }
};

subtest 'set_document_property invalid property' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ property } = $utils->invalidize_param_value('set_document_property', 'property', $params{ property });
    $utils->initialize('set_document_property', 'property', $params{ property });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'property', $params{ property }, $@);
    } else {
        $utils->assert_no_error('set_document_property', 'property');
    }
};

subtest 'set_document_property invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_document_property', 'password', $params{ password });
    $utils->initialize('set_document_property', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_document_property', 'password');
    }
};

subtest 'set_document_property invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_document_property', 'folder', $params{ folder });
    $utils->initialize('set_document_property', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_document_property', 'folder');
    }
};

subtest 'set_document_property invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_document_property', 'storage', $params{ storage });
    $utils->initialize('set_document_property', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_document_property', 'storage');
    }
};

#
# set_notes_slide_header_footer test
#
subtest 'set_notes_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $utils->initialize('set_notes_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        fail("set_notes_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'set_notes_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'name', $params{ name });
    $utils->initialize('set_notes_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'name');
    }
};

subtest 'set_notes_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'slide_index', $params{ slide_index });
    $utils->initialize('set_notes_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'slide_index');
    }
};

subtest 'set_notes_slide_header_footer invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'dto', $params{ dto });
    $utils->initialize('set_notes_slide_header_footer', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'dto');
    }
};

subtest 'set_notes_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'password', $params{ password });
    $utils->initialize('set_notes_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'password');
    }
};

subtest 'set_notes_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'folder', $params{ folder });
    $utils->initialize('set_notes_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'folder');
    }
};

subtest 'set_notes_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'storage', $params{ storage });
    $utils->initialize('set_notes_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'storage');
    }
};

#
# set_presentation_header_footer test
#
subtest 'set_presentation_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $utils->initialize('set_presentation_header_footer', '');
    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        fail("set_presentation_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'set_presentation_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_presentation_header_footer', 'name', $params{ name });
    $utils->initialize('set_presentation_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'name');
    }
};

subtest 'set_presentation_header_footer invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_presentation_header_footer', 'dto', $params{ dto });
    $utils->initialize('set_presentation_header_footer', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'dto');
    }
};

subtest 'set_presentation_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_presentation_header_footer', 'password', $params{ password });
    $utils->initialize('set_presentation_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'password');
    }
};

subtest 'set_presentation_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_presentation_header_footer', 'folder', $params{ folder });
    $utils->initialize('set_presentation_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'folder');
    }
};

subtest 'set_presentation_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_presentation_header_footer', 'storage', $params{ storage });
    $utils->initialize('set_presentation_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'storage');
    }
};

#
# set_protection test
#
subtest 'set_protection' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $utils->initialize('set_protection', '');
    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        fail("set_protection raised an exception: $@");
    }
    pass();
};

subtest 'set_protection invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_protection', 'name', $params{ name });
    $utils->initialize('set_protection', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_protection', 'name');
    }
};

subtest 'set_protection invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_protection', 'dto', $params{ dto });
    $utils->initialize('set_protection', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('set_protection', 'dto');
    }
};

subtest 'set_protection invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_protection', 'password', $params{ password });
    $utils->initialize('set_protection', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_protection', 'password');
    }
};

subtest 'set_protection invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_protection', 'folder', $params{ folder });
    $utils->initialize('set_protection', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_protection', 'folder');
    }
};

subtest 'set_protection invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_protection', 'storage', $params{ storage });
    $utils->initialize('set_protection', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_protection', 'storage');
    }
};

#
# set_protection_online test
#
subtest 'set_protection_online' => sub {
    my %params = ('document' => $utils->get_param_value('set_protection_online', 'document', 'File'), 'dto' => $utils->get_param_value('set_protection_online', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection_online', 'password', 'string'));
    $utils->initialize('set_protection_online', '');
    eval {
        my $result = $utils->{api}->set_protection_online(%params);
    };
    if ($@) {
        fail("set_protection_online raised an exception: $@");
    }
    pass();
};

subtest 'set_protection_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('set_protection_online', 'document', 'File'), 'dto' => $utils->get_param_value('set_protection_online', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('set_protection_online', 'document', $params{ document });
    $utils->initialize('set_protection_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->set_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('set_protection_online', 'document');
    }
};

subtest 'set_protection_online invalid dto' => sub {
    my %params = ('document' => $utils->get_param_value('set_protection_online', 'document', 'File'), 'dto' => $utils->get_param_value('set_protection_online', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection_online', 'password', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_protection_online', 'dto', $params{ dto });
    $utils->initialize('set_protection_online', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection_online', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('set_protection_online', 'dto');
    }
};

subtest 'set_protection_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('set_protection_online', 'document', 'File'), 'dto' => $utils->get_param_value('set_protection_online', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_protection_online', 'password', $params{ password });
    $utils->initialize('set_protection_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_protection_online', 'password');
    }
};

#
# set_sections test
#
subtest 'set_sections' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $utils->initialize('set_sections', '');
    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        fail("set_sections raised an exception: $@");
    }
    pass();
};

subtest 'set_sections invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_sections', 'name', $params{ name });
    $utils->initialize('set_sections', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_sections', 'name');
    }
};

subtest 'set_sections invalid sections' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ sections } = $utils->invalidize_param_value('set_sections', 'sections', $params{ sections });
    $utils->initialize('set_sections', 'sections', $params{ sections });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'sections', $params{ sections }, $@);
    } else {
        $utils->assert_no_error('set_sections', 'sections');
    }
};

subtest 'set_sections invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_sections', 'password', $params{ password });
    $utils->initialize('set_sections', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_sections', 'password');
    }
};

subtest 'set_sections invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_sections', 'folder', $params{ folder });
    $utils->initialize('set_sections', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_sections', 'folder');
    }
};

subtest 'set_sections invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_sections', 'storage', $params{ storage });
    $utils->initialize('set_sections', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_sections', 'storage');
    }
};

#
# set_slide_header_footer test
#
subtest 'set_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $utils->initialize('set_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        fail("set_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'set_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_slide_header_footer', 'name', $params{ name });
    $utils->initialize('set_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'name');
    }
};

subtest 'set_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_slide_header_footer', 'slide_index', $params{ slide_index });
    $utils->initialize('set_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'slide_index');
    }
};

subtest 'set_slide_header_footer invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_slide_header_footer', 'dto', $params{ dto });
    $utils->initialize('set_slide_header_footer', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'dto');
    }
};

subtest 'set_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_slide_header_footer', 'password', $params{ password });
    $utils->initialize('set_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'password');
    }
};

subtest 'set_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_slide_header_footer', 'folder', $params{ folder });
    $utils->initialize('set_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'folder');
    }
};

subtest 'set_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_slide_header_footer', 'storage', $params{ storage });
    $utils->initialize('set_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'storage');
    }
};

#
# set_slide_properties test
#
subtest 'set_slide_properties' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $utils->initialize('set_slide_properties', '');
    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        fail("set_slide_properties raised an exception: $@");
    }
    pass();
};

subtest 'set_slide_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_slide_properties', 'name', $params{ name });
    $utils->initialize('set_slide_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'name');
    }
};

subtest 'set_slide_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_slide_properties', 'dto', $params{ dto });
    $utils->initialize('set_slide_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'dto');
    }
};

subtest 'set_slide_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_slide_properties', 'password', $params{ password });
    $utils->initialize('set_slide_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'password');
    }
};

subtest 'set_slide_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_slide_properties', 'folder', $params{ folder });
    $utils->initialize('set_slide_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'folder');
    }
};

subtest 'set_slide_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_slide_properties', 'storage', $params{ storage });
    $utils->initialize('set_slide_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'storage');
    }
};

#
# set_special_slide_animation test
#
subtest 'set_special_slide_animation' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $utils->initialize('set_special_slide_animation', '');
    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        fail("set_special_slide_animation raised an exception: $@");
    }
    pass();
};

subtest 'set_special_slide_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_special_slide_animation', 'name', $params{ name });
    $utils->initialize('set_special_slide_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'name');
    }
};

subtest 'set_special_slide_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_special_slide_animation', 'slide_index', $params{ slide_index });
    $utils->initialize('set_special_slide_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'slide_index');
    }
};

subtest 'set_special_slide_animation invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('set_special_slide_animation', 'slide_type', $params{ slide_type });
    $utils->initialize('set_special_slide_animation', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'slide_type');
    }
};

subtest 'set_special_slide_animation invalid animation' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ animation } = $utils->invalidize_param_value('set_special_slide_animation', 'animation', $params{ animation });
    $utils->initialize('set_special_slide_animation', 'animation', $params{ animation });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'animation', $params{ animation }, $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'animation');
    }
};

subtest 'set_special_slide_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_special_slide_animation', 'password', $params{ password });
    $utils->initialize('set_special_slide_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'password');
    }
};

subtest 'set_special_slide_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_special_slide_animation', 'folder', $params{ folder });
    $utils->initialize('set_special_slide_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'folder');
    }
};

subtest 'set_special_slide_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_special_slide_animation', 'storage', $params{ storage });
    $utils->initialize('set_special_slide_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'storage');
    }
};

#
# set_view_properties test
#
subtest 'set_view_properties' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $utils->initialize('set_view_properties', '');
    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        fail("set_view_properties raised an exception: $@");
    }
    pass();
};

subtest 'set_view_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_view_properties', 'name', $params{ name });
    $utils->initialize('set_view_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'name');
    }
};

subtest 'set_view_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_view_properties', 'dto', $params{ dto });
    $utils->initialize('set_view_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'dto');
    }
};

subtest 'set_view_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_view_properties', 'password', $params{ password });
    $utils->initialize('set_view_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'password');
    }
};

subtest 'set_view_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_view_properties', 'folder', $params{ folder });
    $utils->initialize('set_view_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'folder');
    }
};

subtest 'set_view_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_view_properties', 'storage', $params{ storage });
    $utils->initialize('set_view_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'storage');
    }
};

#
# split test
#
subtest 'split' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $utils->initialize('split', '');
    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        fail("split raised an exception: $@");
    }
    pass();
};

subtest 'split invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('split', 'name', $params{ name });
    $utils->initialize('split', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('split', 'name');
    }
};

subtest 'split invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('split', 'options', $params{ options });
    $utils->initialize('split', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'options', $params{ options }, $@);
    } else {
        $utils->assert_no_error('split', 'options');
    }
};

subtest 'split invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('split', 'format', $params{ format });
    $utils->initialize('split', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('split', 'format');
    }
};

subtest 'split invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('split', 'width', $params{ width });
    $utils->initialize('split', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('split', 'width');
    }
};

subtest 'split invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('split', 'height', $params{ height });
    $utils->initialize('split', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('split', 'height');
    }
};

subtest 'split invalid from' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ from } = $utils->invalidize_param_value('split', 'from', $params{ from });
    $utils->initialize('split', 'from', $params{ from });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'from', $params{ from }, $@);
    } else {
        $utils->assert_no_error('split', 'from');
    }
};

subtest 'split invalid to' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ to } = $utils->invalidize_param_value('split', 'to', $params{ to });
    $utils->initialize('split', 'to', $params{ to });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'to', $params{ to }, $@);
    } else {
        $utils->assert_no_error('split', 'to');
    }
};

subtest 'split invalid dest_folder' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ dest_folder } = $utils->invalidize_param_value('split', 'dest_folder', $params{ dest_folder });
    $utils->initialize('split', 'dest_folder', $params{ dest_folder });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'dest_folder', $params{ dest_folder }, $@);
    } else {
        $utils->assert_no_error('split', 'dest_folder');
    }
};

subtest 'split invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('split', 'password', $params{ password });
    $utils->initialize('split', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('split', 'password');
    }
};

subtest 'split invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('split', 'folder', $params{ folder });
    $utils->initialize('split', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('split', 'folder');
    }
};

subtest 'split invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('split', 'storage', $params{ storage });
    $utils->initialize('split', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('split', 'storage');
    }
};

subtest 'split invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('split', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('split', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('split', 'fonts_folder');
    }
};

#
# split_and_save_online test
#
subtest 'split_and_save_online' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $utils->initialize('split_and_save_online', '');
    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        fail("split_and_save_online raised an exception: $@");
    }
    pass();
};

subtest 'split_and_save_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ document } = $utils->invalidize_param_value('split_and_save_online', 'document', $params{ document });
    $utils->initialize('split_and_save_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'document');
    }
};

subtest 'split_and_save_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('split_and_save_online', 'format', $params{ format });
    $utils->initialize('split_and_save_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'format');
    }
};

subtest 'split_and_save_online invalid dest_folder' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ dest_folder } = $utils->invalidize_param_value('split_and_save_online', 'dest_folder', $params{ dest_folder });
    $utils->initialize('split_and_save_online', 'dest_folder', $params{ dest_folder });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'dest_folder', $params{ dest_folder }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'dest_folder');
    }
};

subtest 'split_and_save_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('split_and_save_online', 'width', $params{ width });
    $utils->initialize('split_and_save_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'width');
    }
};

subtest 'split_and_save_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('split_and_save_online', 'height', $params{ height });
    $utils->initialize('split_and_save_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'height');
    }
};

subtest 'split_and_save_online invalid from' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ from } = $utils->invalidize_param_value('split_and_save_online', 'from', $params{ from });
    $utils->initialize('split_and_save_online', 'from', $params{ from });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'from', $params{ from }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'from');
    }
};

subtest 'split_and_save_online invalid to' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ to } = $utils->invalidize_param_value('split_and_save_online', 'to', $params{ to });
    $utils->initialize('split_and_save_online', 'to', $params{ to });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'to', $params{ to }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'to');
    }
};

subtest 'split_and_save_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('split_and_save_online', 'password', $params{ password });
    $utils->initialize('split_and_save_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'password');
    }
};

subtest 'split_and_save_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('split_and_save_online', 'storage', $params{ storage });
    $utils->initialize('split_and_save_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'storage');
    }
};

subtest 'split_and_save_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('split_and_save_online', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('split_and_save_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'fonts_folder');
    }
};

#
# split_online test
#
subtest 'split_online' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $utils->initialize('split_online', '');
    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        fail("split_online raised an exception: $@");
    }
    pass();
};

subtest 'split_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $params{ document } = $utils->invalidize_param_value('split_online', 'document', $params{ document });
    $utils->initialize('split_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'document', $params{ document }, $@);
    } else {
        $utils->assert_no_error('split_online', 'document');
    }
};

subtest 'split_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('split_online', 'format', $params{ format });
    $utils->initialize('split_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'format', $params{ format }, $@);
    } else {
        $utils->assert_no_error('split_online', 'format');
    }
};

subtest 'split_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('split_online', 'width', $params{ width });
    $utils->initialize('split_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'width', $params{ width }, $@);
    } else {
        $utils->assert_no_error('split_online', 'width');
    }
};

subtest 'split_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('split_online', 'height', $params{ height });
    $utils->initialize('split_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'height', $params{ height }, $@);
    } else {
        $utils->assert_no_error('split_online', 'height');
    }
};

subtest 'split_online invalid from' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $params{ from } = $utils->invalidize_param_value('split_online', 'from', $params{ from });
    $utils->initialize('split_online', 'from', $params{ from });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'from', $params{ from }, $@);
    } else {
        $utils->assert_no_error('split_online', 'from');
    }
};

subtest 'split_online invalid to' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $params{ to } = $utils->invalidize_param_value('split_online', 'to', $params{ to });
    $utils->initialize('split_online', 'to', $params{ to });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'to', $params{ to }, $@);
    } else {
        $utils->assert_no_error('split_online', 'to');
    }
};

subtest 'split_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('split_online', 'password', $params{ password });
    $utils->initialize('split_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('split_online', 'password');
    }
};

subtest 'split_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('split_online', 'storage', $params{ storage });
    $utils->initialize('split_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('split_online', 'storage');
    }
};

subtest 'split_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('split_online', 'fonts_folder', $params{ fonts_folder });
    $utils->initialize('split_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'fonts_folder', $params{ fonts_folder }, $@);
    } else {
        $utils->assert_no_error('split_online', 'fonts_folder');
    }
};

#
# storage_exists test
#
subtest 'storage_exists' => sub {
    my %params = ('storage_name' => $utils->get_param_value('storage_exists', 'storage_name', 'string'));
    $utils->initialize('storage_exists', '');
    eval {
        my $result = $utils->{api}->storage_exists(%params);
    };
    if ($@) {
        fail("storage_exists raised an exception: $@");
    }
    pass();
};

subtest 'storage_exists invalid storage_name' => sub {
    my %params = ('storage_name' => $utils->get_param_value('storage_exists', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('storage_exists', 'storage_name', $params{ storage_name });
    $utils->initialize('storage_exists', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->storage_exists(%params);
    };
    if ($@) {
        $utils->assert_error('storage_exists', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('storage_exists', 'storage_name');
    }
};

#
# update_animation_effect test
#
subtest 'update_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $utils->initialize('update_animation_effect', '');
    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        fail("update_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'update_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_animation_effect', 'name', $params{ name });
    $utils->initialize('update_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'name');
    }
};

subtest 'update_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_animation_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('update_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'slide_index');
    }
};

subtest 'update_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('update_animation_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('update_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'effect_index');
    }
};

subtest 'update_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('update_animation_effect', 'effect', $params{ effect });
    $utils->initialize('update_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'effect');
    }
};

subtest 'update_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_animation_effect', 'password', $params{ password });
    $utils->initialize('update_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'password');
    }
};

subtest 'update_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_animation_effect', 'folder', $params{ folder });
    $utils->initialize('update_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'folder');
    }
};

subtest 'update_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_animation_effect', 'storage', $params{ storage });
    $utils->initialize('update_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'storage');
    }
};

#
# update_animation_interactive_sequence_effect test
#
subtest 'update_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('update_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("update_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'update_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'name', $params{ name });
    $utils->initialize('update_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'name');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('update_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'slide_index');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });
    $utils->initialize('update_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'sequence_index');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('update_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'effect_index');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'effect', $params{ effect });
    $utils->initialize('update_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'effect');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'password', $params{ password });
    $utils->initialize('update_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'password');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'folder', $params{ folder });
    $utils->initialize('update_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'folder');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'storage', $params{ storage });
    $utils->initialize('update_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'storage');
    }
};

#
# update_chart_category test
#
subtest 'update_chart_category' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $utils->initialize('update_chart_category', '');
    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        fail("update_chart_category raised an exception: $@");
    }
    pass();
};

subtest 'update_chart_category invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_chart_category', 'name', $params{ name });
    $utils->initialize('update_chart_category', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'name');
    }
};

subtest 'update_chart_category invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_chart_category', 'slide_index', $params{ slide_index });
    $utils->initialize('update_chart_category', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'slide_index');
    }
};

subtest 'update_chart_category invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_chart_category', 'shape_index', $params{ shape_index });
    $utils->initialize('update_chart_category', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'shape_index');
    }
};

subtest 'update_chart_category invalid category_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ category_index } = $utils->invalidize_param_value('update_chart_category', 'category_index', $params{ category_index });
    $utils->initialize('update_chart_category', 'category_index', $params{ category_index });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'category_index', $params{ category_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'category_index');
    }
};

subtest 'update_chart_category invalid category' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ category } = $utils->invalidize_param_value('update_chart_category', 'category', $params{ category });
    $utils->initialize('update_chart_category', 'category', $params{ category });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'category', $params{ category }, $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'category');
    }
};

subtest 'update_chart_category invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_chart_category', 'password', $params{ password });
    $utils->initialize('update_chart_category', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'password');
    }
};

subtest 'update_chart_category invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_chart_category', 'folder', $params{ folder });
    $utils->initialize('update_chart_category', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'folder');
    }
};

subtest 'update_chart_category invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_chart_category', 'storage', $params{ storage });
    $utils->initialize('update_chart_category', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'storage');
    }
};

#
# update_chart_data_point test
#
subtest 'update_chart_data_point' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $utils->initialize('update_chart_data_point', '');
    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        fail("update_chart_data_point raised an exception: $@");
    }
    pass();
};

subtest 'update_chart_data_point invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_chart_data_point', 'name', $params{ name });
    $utils->initialize('update_chart_data_point', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'name');
    }
};

subtest 'update_chart_data_point invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_chart_data_point', 'slide_index', $params{ slide_index });
    $utils->initialize('update_chart_data_point', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'slide_index');
    }
};

subtest 'update_chart_data_point invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_chart_data_point', 'shape_index', $params{ shape_index });
    $utils->initialize('update_chart_data_point', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'shape_index');
    }
};

subtest 'update_chart_data_point invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('update_chart_data_point', 'series_index', $params{ series_index });
    $utils->initialize('update_chart_data_point', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'series_index');
    }
};

subtest 'update_chart_data_point invalid point_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ point_index } = $utils->invalidize_param_value('update_chart_data_point', 'point_index', $params{ point_index });
    $utils->initialize('update_chart_data_point', 'point_index', $params{ point_index });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'point_index', $params{ point_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'point_index');
    }
};

subtest 'update_chart_data_point invalid data_point' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ data_point } = $utils->invalidize_param_value('update_chart_data_point', 'data_point', $params{ data_point });
    $utils->initialize('update_chart_data_point', 'data_point', $params{ data_point });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'data_point', $params{ data_point }, $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'data_point');
    }
};

subtest 'update_chart_data_point invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_chart_data_point', 'password', $params{ password });
    $utils->initialize('update_chart_data_point', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'password');
    }
};

subtest 'update_chart_data_point invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_chart_data_point', 'folder', $params{ folder });
    $utils->initialize('update_chart_data_point', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'folder');
    }
};

subtest 'update_chart_data_point invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_chart_data_point', 'storage', $params{ storage });
    $utils->initialize('update_chart_data_point', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'storage');
    }
};

#
# update_chart_series test
#
subtest 'update_chart_series' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $utils->initialize('update_chart_series', '');
    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        fail("update_chart_series raised an exception: $@");
    }
    pass();
};

subtest 'update_chart_series invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_chart_series', 'name', $params{ name });
    $utils->initialize('update_chart_series', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'name');
    }
};

subtest 'update_chart_series invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_chart_series', 'slide_index', $params{ slide_index });
    $utils->initialize('update_chart_series', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'slide_index');
    }
};

subtest 'update_chart_series invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_chart_series', 'shape_index', $params{ shape_index });
    $utils->initialize('update_chart_series', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'shape_index');
    }
};

subtest 'update_chart_series invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('update_chart_series', 'series_index', $params{ series_index });
    $utils->initialize('update_chart_series', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'series_index', $params{ series_index }, $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'series_index');
    }
};

subtest 'update_chart_series invalid series' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ series } = $utils->invalidize_param_value('update_chart_series', 'series', $params{ series });
    $utils->initialize('update_chart_series', 'series', $params{ series });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'series', $params{ series }, $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'series');
    }
};

subtest 'update_chart_series invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_chart_series', 'password', $params{ password });
    $utils->initialize('update_chart_series', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'password');
    }
};

subtest 'update_chart_series invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_chart_series', 'folder', $params{ folder });
    $utils->initialize('update_chart_series', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'folder');
    }
};

subtest 'update_chart_series invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_chart_series', 'storage', $params{ storage });
    $utils->initialize('update_chart_series', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'storage');
    }
};

#
# update_layout_slide test
#
subtest 'update_layout_slide' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $utils->initialize('update_layout_slide', '');
    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        fail("update_layout_slide raised an exception: $@");
    }
    pass();
};

subtest 'update_layout_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_layout_slide', 'name', $params{ name });
    $utils->initialize('update_layout_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'name');
    }
};

subtest 'update_layout_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_layout_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('update_layout_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'slide_index');
    }
};

subtest 'update_layout_slide invalid slide_dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ slide_dto } = $utils->invalidize_param_value('update_layout_slide', 'slide_dto', $params{ slide_dto });
    $utils->initialize('update_layout_slide', 'slide_dto', $params{ slide_dto });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'slide_dto', $params{ slide_dto }, $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'slide_dto');
    }
};

subtest 'update_layout_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_layout_slide', 'password', $params{ password });
    $utils->initialize('update_layout_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'password');
    }
};

subtest 'update_layout_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_layout_slide', 'folder', $params{ folder });
    $utils->initialize('update_layout_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'folder');
    }
};

subtest 'update_layout_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_layout_slide', 'storage', $params{ storage });
    $utils->initialize('update_layout_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'storage');
    }
};

#
# update_notes_slide test
#
subtest 'update_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $utils->initialize('update_notes_slide', '');
    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        fail("update_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'update_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_notes_slide', 'name', $params{ name });
    $utils->initialize('update_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'name');
    }
};

subtest 'update_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_notes_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('update_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'slide_index');
    }
};

subtest 'update_notes_slide invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_notes_slide', 'dto', $params{ dto });
    $utils->initialize('update_notes_slide', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'dto');
    }
};

subtest 'update_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_notes_slide', 'password', $params{ password });
    $utils->initialize('update_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'password');
    }
};

subtest 'update_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_notes_slide', 'folder', $params{ folder });
    $utils->initialize('update_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'folder');
    }
};

subtest 'update_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_notes_slide', 'storage', $params{ storage });
    $utils->initialize('update_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'storage');
    }
};

#
# update_paragraph test
#
subtest 'update_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'));
    $utils->initialize('update_paragraph', '');
    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        fail("update_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'update_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_paragraph', 'name', $params{ name });
    $utils->initialize('update_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'name');
    }
};

subtest 'update_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('update_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'slide_index');
    }
};

subtest 'update_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('update_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'shape_index');
    }
};

subtest 'update_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('update_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'paragraph_index');
    }
};

subtest 'update_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_paragraph', 'dto', $params{ dto });
    $utils->initialize('update_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'dto');
    }
};

subtest 'update_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_paragraph', 'password', $params{ password });
    $utils->initialize('update_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'password');
    }
};

subtest 'update_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_paragraph', 'folder', $params{ folder });
    $utils->initialize('update_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'folder');
    }
};

subtest 'update_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_paragraph', 'storage', $params{ storage });
    $utils->initialize('update_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'storage');
    }
};

#
# update_portion test
#
subtest 'update_portion' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $utils->initialize('update_portion', '');
    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        fail("update_portion raised an exception: $@");
    }
    pass();
};

subtest 'update_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_portion', 'name', $params{ name });
    $utils->initialize('update_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_portion', 'name');
    }
};

subtest 'update_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('update_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_portion', 'slide_index');
    }
};

subtest 'update_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('update_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_portion', 'shape_index');
    }
};

subtest 'update_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('update_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('update_portion', 'paragraph_index');
    }
};

subtest 'update_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('update_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('update_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('update_portion', 'portion_index');
    }
};

subtest 'update_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_portion', 'dto', $params{ dto });
    $utils->initialize('update_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_portion', 'dto');
    }
};

subtest 'update_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_portion', 'password', $params{ password });
    $utils->initialize('update_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_portion', 'password');
    }
};

subtest 'update_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_portion', 'folder', $params{ folder });
    $utils->initialize('update_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_portion', 'folder');
    }
};

subtest 'update_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_portion', 'storage', $params{ storage });
    $utils->initialize('update_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_portion', 'storage');
    }
};

#
# update_section test
#
subtest 'update_section' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $utils->initialize('update_section', '');
    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        fail("update_section raised an exception: $@");
    }
    pass();
};

subtest 'update_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_section', 'name', $params{ name });
    $utils->initialize('update_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_section', 'name');
    }
};

subtest 'update_section invalid section_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ section_index } = $utils->invalidize_param_value('update_section', 'section_index', $params{ section_index });
    $utils->initialize('update_section', 'section_index', $params{ section_index });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'section_index', $params{ section_index }, $@);
    } else {
        $utils->assert_no_error('update_section', 'section_index');
    }
};

subtest 'update_section invalid section_name' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ section_name } = $utils->invalidize_param_value('update_section', 'section_name', $params{ section_name });
    $utils->initialize('update_section', 'section_name', $params{ section_name });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'section_name', $params{ section_name }, $@);
    } else {
        $utils->assert_no_error('update_section', 'section_name');
    }
};

subtest 'update_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_section', 'password', $params{ password });
    $utils->initialize('update_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_section', 'password');
    }
};

subtest 'update_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_section', 'folder', $params{ folder });
    $utils->initialize('update_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_section', 'folder');
    }
};

subtest 'update_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_section', 'storage', $params{ storage });
    $utils->initialize('update_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_section', 'storage');
    }
};

#
# update_shape test
#
subtest 'update_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'));
    $utils->initialize('update_shape', '');
    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        fail("update_shape raised an exception: $@");
    }
    pass();
};

subtest 'update_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_shape', 'name', $params{ name });
    $utils->initialize('update_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_shape', 'name');
    }
};

subtest 'update_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('update_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_shape', 'slide_index');
    }
};

subtest 'update_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('update_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_shape', 'shape_index');
    }
};

subtest 'update_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_shape', 'dto', $params{ dto });
    $utils->initialize('update_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_shape', 'dto');
    }
};

subtest 'update_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_shape', 'password', $params{ password });
    $utils->initialize('update_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_shape', 'password');
    }
};

subtest 'update_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_shape', 'folder', $params{ folder });
    $utils->initialize('update_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_shape', 'folder');
    }
};

subtest 'update_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_shape', 'storage', $params{ storage });
    $utils->initialize('update_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_shape', 'storage');
    }
};

#
# update_slide test
#
subtest 'update_slide' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $utils->initialize('update_slide', '');
    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        fail("update_slide raised an exception: $@");
    }
    pass();
};

subtest 'update_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_slide', 'name', $params{ name });
    $utils->initialize('update_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_slide', 'name');
    }
};

subtest 'update_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_slide', 'slide_index', $params{ slide_index });
    $utils->initialize('update_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_slide', 'slide_index');
    }
};

subtest 'update_slide invalid slide_dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ slide_dto } = $utils->invalidize_param_value('update_slide', 'slide_dto', $params{ slide_dto });
    $utils->initialize('update_slide', 'slide_dto', $params{ slide_dto });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'slide_dto', $params{ slide_dto }, $@);
    } else {
        $utils->assert_no_error('update_slide', 'slide_dto');
    }
};

subtest 'update_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_slide', 'password', $params{ password });
    $utils->initialize('update_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_slide', 'password');
    }
};

subtest 'update_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_slide', 'folder', $params{ folder });
    $utils->initialize('update_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_slide', 'folder');
    }
};

subtest 'update_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_slide', 'storage', $params{ storage });
    $utils->initialize('update_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_slide', 'storage');
    }
};

#
# update_special_slide_animation_effect test
#
subtest 'update_special_slide_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $utils->initialize('update_special_slide_animation_effect', '');
    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        fail("update_special_slide_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'name', $params{ name });
    $utils->initialize('update_special_slide_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'name');
    }
};

subtest 'update_special_slide_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('update_special_slide_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'slide_index');
    }
};

subtest 'update_special_slide_animation_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'slide_type', $params{ slide_type });
    $utils->initialize('update_special_slide_animation_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'slide_type');
    }
};

subtest 'update_special_slide_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('update_special_slide_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'effect_index');
    }
};

subtest 'update_special_slide_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'effect', $params{ effect });
    $utils->initialize('update_special_slide_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'effect');
    }
};

subtest 'update_special_slide_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'password', $params{ password });
    $utils->initialize('update_special_slide_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'password');
    }
};

subtest 'update_special_slide_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'folder', $params{ folder });
    $utils->initialize('update_special_slide_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'folder');
    }
};

subtest 'update_special_slide_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'storage', $params{ storage });
    $utils->initialize('update_special_slide_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'storage');
    }
};

#
# update_special_slide_animation_interactive_sequence_effect test
#
subtest 'update_special_slide_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("update_special_slide_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', $params{ name });
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'name');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'slide_index');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type });
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'slide_type');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'sequence_index');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'effect_index');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'effect');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', $params{ password });
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'password');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'folder');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'storage');
    }
};

#
# update_special_slide_paragraph test
#
subtest 'update_special_slide_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $utils->initialize('update_special_slide_paragraph', '');
    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        fail("update_special_slide_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_paragraph', 'name', $params{ name });
    $utils->initialize('update_special_slide_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'name');
    }
};

subtest 'update_special_slide_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('update_special_slide_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'slide_index');
    }
};

subtest 'update_special_slide_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_paragraph', 'slide_type', $params{ slide_type });
    $utils->initialize('update_special_slide_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'slide_type');
    }
};

subtest 'update_special_slide_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_special_slide_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('update_special_slide_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'shape_index');
    }
};

subtest 'update_special_slide_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('update_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'paragraph_index');
    }
};

subtest 'update_special_slide_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_special_slide_paragraph', 'dto', $params{ dto });
    $utils->initialize('update_special_slide_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'dto');
    }
};

subtest 'update_special_slide_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_paragraph', 'password', $params{ password });
    $utils->initialize('update_special_slide_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'password');
    }
};

subtest 'update_special_slide_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_paragraph', 'folder', $params{ folder });
    $utils->initialize('update_special_slide_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'folder');
    }
};

subtest 'update_special_slide_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_paragraph', 'storage', $params{ storage });
    $utils->initialize('update_special_slide_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'storage');
    }
};

#
# update_special_slide_portion test
#
subtest 'update_special_slide_portion' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $utils->initialize('update_special_slide_portion', '');
    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        fail("update_special_slide_portion raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_portion', 'name', $params{ name });
    $utils->initialize('update_special_slide_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'name');
    }
};

subtest 'update_special_slide_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('update_special_slide_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'slide_index');
    }
};

subtest 'update_special_slide_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_portion', 'slide_type', $params{ slide_type });
    $utils->initialize('update_special_slide_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'slide_type');
    }
};

subtest 'update_special_slide_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_special_slide_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('update_special_slide_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'shape_index');
    }
};

subtest 'update_special_slide_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_special_slide_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('update_special_slide_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'paragraph_index');
    }
};

subtest 'update_special_slide_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('update_special_slide_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('update_special_slide_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'portion_index');
    }
};

subtest 'update_special_slide_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_special_slide_portion', 'dto', $params{ dto });
    $utils->initialize('update_special_slide_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'dto');
    }
};

subtest 'update_special_slide_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_portion', 'password', $params{ password });
    $utils->initialize('update_special_slide_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'password');
    }
};

subtest 'update_special_slide_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_portion', 'folder', $params{ folder });
    $utils->initialize('update_special_slide_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'folder');
    }
};

subtest 'update_special_slide_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_portion', 'storage', $params{ storage });
    $utils->initialize('update_special_slide_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'storage');
    }
};

#
# update_special_slide_shape test
#
subtest 'update_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'));
    $utils->initialize('update_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        fail("update_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_shape', 'name', $params{ name });
    $utils->initialize('update_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'name');
    }
};

subtest 'update_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_shape', 'slide_index', $params{ slide_index });
    $utils->initialize('update_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'slide_index');
    }
};

subtest 'update_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_shape', 'slide_type', $params{ slide_type });
    $utils->initialize('update_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'slide_type');
    }
};

subtest 'update_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_special_slide_shape', 'shape_index', $params{ shape_index });
    $utils->initialize('update_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'shape_index');
    }
};

subtest 'update_special_slide_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_special_slide_shape', 'dto', $params{ dto });
    $utils->initialize('update_special_slide_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'dto');
    }
};

subtest 'update_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_shape', 'password', $params{ password });
    $utils->initialize('update_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'password');
    }
};

subtest 'update_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_shape', 'folder', $params{ folder });
    $utils->initialize('update_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'folder');
    }
};

subtest 'update_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_shape', 'storage', $params{ storage });
    $utils->initialize('update_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'storage');
    }
};

#
# update_special_slide_subshape test
#
subtest 'update_special_slide_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $utils->initialize('update_special_slide_subshape', '');
    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        fail("update_special_slide_subshape raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_subshape', 'name', $params{ name });
    $utils->initialize('update_special_slide_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape', 'name');
    }
};

subtest 'update_special_slide_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('update_special_slide_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape', 'slide_index');
    }
};

subtest 'update_special_slide_subshape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_subshape', 'slide_type', $params{ slide_type });
    $utils->initialize('update_special_slide_subshape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape', 'slide_type');
    }
};

subtest 'update_special_slide_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('update_special_slide_subshape', 'path', $params{ path });
    $utils->initialize('update_special_slide_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape', 'path');
    }
};

subtest 'update_special_slide_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_special_slide_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('update_special_slide_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape', 'shape_index');
    }
};

subtest 'update_special_slide_subshape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_special_slide_subshape', 'dto', $params{ dto });
    $utils->initialize('update_special_slide_subshape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape', 'dto');
    }
};

subtest 'update_special_slide_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_subshape', 'password', $params{ password });
    $utils->initialize('update_special_slide_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape', 'password');
    }
};

subtest 'update_special_slide_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_subshape', 'folder', $params{ folder });
    $utils->initialize('update_special_slide_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape', 'folder');
    }
};

subtest 'update_special_slide_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_subshape', 'storage', $params{ storage });
    $utils->initialize('update_special_slide_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape', 'storage');
    }
};

#
# update_special_slide_subshape_paragraph test
#
subtest 'update_special_slide_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('update_special_slide_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        fail("update_special_slide_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('update_special_slide_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'name');
    }
};

subtest 'update_special_slide_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('update_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'slide_index');
    }
};

subtest 'update_special_slide_subshape_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type });
    $utils->initialize('update_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'slide_type');
    }
};

subtest 'update_special_slide_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('update_special_slide_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'path');
    }
};

subtest 'update_special_slide_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('update_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'shape_index');
    }
};

subtest 'update_special_slide_subshape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('update_special_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'paragraph_index');
    }
};

subtest 'update_special_slide_subshape_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'dto', $params{ dto });
    $utils->initialize('update_special_slide_subshape_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'dto');
    }
};

subtest 'update_special_slide_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('update_special_slide_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'password');
    }
};

subtest 'update_special_slide_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('update_special_slide_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'folder');
    }
};

subtest 'update_special_slide_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('update_special_slide_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_paragraph', 'storage');
    }
};

#
# update_special_slide_subshape_portion test
#
subtest 'update_special_slide_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $utils->initialize('update_special_slide_subshape_portion', '');
    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        fail("update_special_slide_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'name', $params{ name });
    $utils->initialize('update_special_slide_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'name');
    }
};

subtest 'update_special_slide_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('update_special_slide_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'slide_index');
    }
};

subtest 'update_special_slide_subshape_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'slide_type', $params{ slide_type });
    $utils->initialize('update_special_slide_subshape_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'slide_type', $params{ slide_type }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'slide_type');
    }
};

subtest 'update_special_slide_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'path', $params{ path });
    $utils->initialize('update_special_slide_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'path');
    }
};

subtest 'update_special_slide_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('update_special_slide_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'shape_index');
    }
};

subtest 'update_special_slide_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('update_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'paragraph_index');
    }
};

subtest 'update_special_slide_subshape_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('update_special_slide_subshape_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'portion_index');
    }
};

subtest 'update_special_slide_subshape_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'dto', $params{ dto });
    $utils->initialize('update_special_slide_subshape_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'dto');
    }
};

subtest 'update_special_slide_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'password', $params{ password });
    $utils->initialize('update_special_slide_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'password');
    }
};

subtest 'update_special_slide_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('update_special_slide_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'folder');
    }
};

subtest 'update_special_slide_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_subshape_portion', 'slide_type', 'string'), 'path' => $utils->get_param_value('update_special_slide_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_subshape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('update_special_slide_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_special_slide_subshape_portion', 'storage');
    }
};

#
# update_subshape test
#
subtest 'update_subshape' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape', 'storage', 'string'));
    $utils->initialize('update_subshape', '');
    eval {
        my $result = $utils->{api}->update_subshape(%params);
    };
    if ($@) {
        fail("update_subshape raised an exception: $@");
    }
    pass();
};

subtest 'update_subshape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_subshape', 'name', $params{ name });
    $utils->initialize('update_subshape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_subshape', 'name');
    }
};

subtest 'update_subshape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_subshape', 'slide_index', $params{ slide_index });
    $utils->initialize('update_subshape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_subshape', 'slide_index');
    }
};

subtest 'update_subshape invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('update_subshape', 'path', $params{ path });
    $utils->initialize('update_subshape', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->update_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('update_subshape', 'path');
    }
};

subtest 'update_subshape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_subshape', 'shape_index', $params{ shape_index });
    $utils->initialize('update_subshape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_subshape', 'shape_index');
    }
};

subtest 'update_subshape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_subshape', 'dto', $params{ dto });
    $utils->initialize('update_subshape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_subshape', 'dto');
    }
};

subtest 'update_subshape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_subshape', 'password', $params{ password });
    $utils->initialize('update_subshape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_subshape', 'password');
    }
};

subtest 'update_subshape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_subshape', 'folder', $params{ folder });
    $utils->initialize('update_subshape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_subshape', 'folder');
    }
};

subtest 'update_subshape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_subshape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_subshape', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_subshape', 'storage', $params{ storage });
    $utils->initialize('update_subshape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_subshape(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_subshape', 'storage');
    }
};

#
# update_subshape_paragraph test
#
subtest 'update_subshape_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $utils->initialize('update_subshape_paragraph', '');
    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        fail("update_subshape_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'update_subshape_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_subshape_paragraph', 'name', $params{ name });
    $utils->initialize('update_subshape_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_paragraph', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_subshape_paragraph', 'name');
    }
};

subtest 'update_subshape_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_subshape_paragraph', 'slide_index', $params{ slide_index });
    $utils->initialize('update_subshape_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_paragraph', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_subshape_paragraph', 'slide_index');
    }
};

subtest 'update_subshape_paragraph invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('update_subshape_paragraph', 'path', $params{ path });
    $utils->initialize('update_subshape_paragraph', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_paragraph', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('update_subshape_paragraph', 'path');
    }
};

subtest 'update_subshape_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_subshape_paragraph', 'shape_index', $params{ shape_index });
    $utils->initialize('update_subshape_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_paragraph', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_subshape_paragraph', 'shape_index');
    }
};

subtest 'update_subshape_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('update_subshape_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_paragraph', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('update_subshape_paragraph', 'paragraph_index');
    }
};

subtest 'update_subshape_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_subshape_paragraph', 'dto', $params{ dto });
    $utils->initialize('update_subshape_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_paragraph', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_subshape_paragraph', 'dto');
    }
};

subtest 'update_subshape_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_subshape_paragraph', 'password', $params{ password });
    $utils->initialize('update_subshape_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_paragraph', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_subshape_paragraph', 'password');
    }
};

subtest 'update_subshape_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_subshape_paragraph', 'folder', $params{ folder });
    $utils->initialize('update_subshape_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_paragraph', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_subshape_paragraph', 'folder');
    }
};

subtest 'update_subshape_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_paragraph', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_paragraph', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_subshape_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_subshape_paragraph', 'storage', $params{ storage });
    $utils->initialize('update_subshape_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_subshape_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_paragraph', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_subshape_paragraph', 'storage');
    }
};

#
# update_subshape_portion test
#
subtest 'update_subshape_portion' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $utils->initialize('update_subshape_portion', '');
    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        fail("update_subshape_portion raised an exception: $@");
    }
    pass();
};

subtest 'update_subshape_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_subshape_portion', 'name', $params{ name });
    $utils->initialize('update_subshape_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'name', $params{ name }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'name');
    }
};

subtest 'update_subshape_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_subshape_portion', 'slide_index', $params{ slide_index });
    $utils->initialize('update_subshape_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'slide_index', $params{ slide_index }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'slide_index');
    }
};

subtest 'update_subshape_portion invalid path' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ path } = $utils->invalidize_param_value('update_subshape_portion', 'path', $params{ path });
    $utils->initialize('update_subshape_portion', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'path');
    }
};

subtest 'update_subshape_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_subshape_portion', 'shape_index', $params{ shape_index });
    $utils->initialize('update_subshape_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'shape_index', $params{ shape_index }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'shape_index');
    }
};

subtest 'update_subshape_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_subshape_portion', 'paragraph_index', $params{ paragraph_index });
    $utils->initialize('update_subshape_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'paragraph_index', $params{ paragraph_index }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'paragraph_index');
    }
};

subtest 'update_subshape_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('update_subshape_portion', 'portion_index', $params{ portion_index });
    $utils->initialize('update_subshape_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'portion_index', $params{ portion_index }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'portion_index');
    }
};

subtest 'update_subshape_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_subshape_portion', 'dto', $params{ dto });
    $utils->initialize('update_subshape_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'dto', $params{ dto }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'dto');
    }
};

subtest 'update_subshape_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_subshape_portion', 'password', $params{ password });
    $utils->initialize('update_subshape_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'password', $params{ password }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'password');
    }
};

subtest 'update_subshape_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_subshape_portion', 'folder', $params{ folder });
    $utils->initialize('update_subshape_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'folder', $params{ folder }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'folder');
    }
};

subtest 'update_subshape_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_subshape_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_subshape_portion', 'slide_index', 'int'), 'path' => $utils->get_param_value('update_subshape_portion', 'path', 'string'), 'shape_index' => $utils->get_param_value('update_subshape_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_subshape_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_subshape_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_subshape_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_subshape_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_subshape_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_subshape_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_subshape_portion', 'storage', $params{ storage });
    $utils->initialize('update_subshape_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_subshape_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_subshape_portion', 'storage', $params{ storage }, $@);
    } else {
        $utils->assert_no_error('update_subshape_portion', 'storage');
    }
};

#
# upload_file test
#
subtest 'upload_file' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $utils->initialize('upload_file', '');
    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        fail("upload_file raised an exception: $@");
    }
    pass();
};

subtest 'upload_file invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('upload_file', 'path', $params{ path });
    $utils->initialize('upload_file', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        $utils->assert_error('upload_file', 'path', $params{ path }, $@);
    } else {
        $utils->assert_no_error('upload_file', 'path');
    }
};

subtest 'upload_file invalid file' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $params{ file } = $utils->invalidize_param_value('upload_file', 'file', $params{ file });
    $utils->initialize('upload_file', 'file', $params{ file });

    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        $utils->assert_error('upload_file', 'file', $params{ file }, $@);
    } else {
        $utils->assert_no_error('upload_file', 'file');
    }
};

subtest 'upload_file invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('upload_file', 'storage_name', $params{ storage_name });
    $utils->initialize('upload_file', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        $utils->assert_error('upload_file', 'storage_name', $params{ storage_name }, $@);
    } else {
        $utils->assert_no_error('upload_file', 'storage_name');
    }
};


done_testing;