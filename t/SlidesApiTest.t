=begin comment

Copyright (c) 2019 Aspose Pty Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=end comment

=cut

use Test::More;
use Test::Exception;

use AsposeSlidesCloud::SlidesApi;
use AsposeSlidesCloud::TestUtils;

use strict;
use warnings;

my $utils = AsposeSlidesCloud::TestUtils->new();

#
# align_shapes test
#
subtest 'align_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $utils->initialize('align_shapes', '');
    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        fail("align_shapes raised an exception: $@");
    }
    pass();
};

subtest 'align_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('align_shapes', 'name', $params{ name }, 'string');
    $utils->initialize('align_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('align_shapes', 'name', 'string');
    }
};

subtest 'align_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('align_shapes', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('align_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('align_shapes', 'slide_index', 'int');
    }
};

subtest 'align_shapes invalid alignment_type' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $params{ alignment_type } = $utils->invalidize_param_value('align_shapes', 'alignment_type', $params{ alignment_type }, 'string');
    $utils->initialize('align_shapes', 'alignment_type', $params{ alignment_type });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'alignment_type', $params{ alignment_type }, 'string', $@);
    } else {
        $utils->assert_no_error('align_shapes', 'alignment_type', 'string');
    }
};

subtest 'align_shapes invalid align_to_slide' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $params{ align_to_slide } = $utils->invalidize_param_value('align_shapes', 'align_to_slide', $params{ align_to_slide }, 'boolean');
    $utils->initialize('align_shapes', 'align_to_slide', $params{ align_to_slide });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'align_to_slide', $params{ align_to_slide }, 'boolean', $@);
    } else {
        $utils->assert_no_error('align_shapes', 'align_to_slide', 'boolean');
    }
};

subtest 'align_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('align_shapes', 'shapes', $params{ shapes }, 'int[]');
    $utils->initialize('align_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'shapes', $params{ shapes }, 'int[]', $@);
    } else {
        $utils->assert_no_error('align_shapes', 'shapes', 'int[]');
    }
};

subtest 'align_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('align_shapes', 'password', $params{ password }, 'string');
    $utils->initialize('align_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('align_shapes', 'password', 'string');
    }
};

subtest 'align_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('align_shapes', 'folder', $params{ folder }, 'string');
    $utils->initialize('align_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('align_shapes', 'folder', 'string');
    }
};

subtest 'align_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('align_shapes', 'storage', $params{ storage }, 'string');
    $utils->initialize('align_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('align_shapes', 'storage', 'string');
    }
};

subtest 'align_shapes invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('align_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_shapes', 'slide_index', 'int'), 'alignment_type' => $utils->get_param_value('align_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_shapes', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('align_shapes', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('align_shapes', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->align_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_shapes', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('align_shapes', 'sub_shape', 'string');
    }
};

#
# align_special_slide_shapes test
#
subtest 'align_special_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $utils->initialize('align_special_slide_shapes', '');
    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        fail("align_special_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'align_special_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('align_special_slide_shapes', 'name', $params{ name }, 'string');
    $utils->initialize('align_special_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'name', 'string');
    }
};

subtest 'align_special_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('align_special_slide_shapes', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('align_special_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'slide_index', 'int');
    }
};

subtest 'align_special_slide_shapes invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('align_special_slide_shapes', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('align_special_slide_shapes', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'slide_type', 'string');
    }
};

subtest 'align_special_slide_shapes invalid alignment_type' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ alignment_type } = $utils->invalidize_param_value('align_special_slide_shapes', 'alignment_type', $params{ alignment_type }, 'string');
    $utils->initialize('align_special_slide_shapes', 'alignment_type', $params{ alignment_type });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'alignment_type', $params{ alignment_type }, 'string', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'alignment_type', 'string');
    }
};

subtest 'align_special_slide_shapes invalid align_to_slide' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ align_to_slide } = $utils->invalidize_param_value('align_special_slide_shapes', 'align_to_slide', $params{ align_to_slide }, 'boolean');
    $utils->initialize('align_special_slide_shapes', 'align_to_slide', $params{ align_to_slide });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'align_to_slide', $params{ align_to_slide }, 'boolean', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'align_to_slide', 'boolean');
    }
};

subtest 'align_special_slide_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('align_special_slide_shapes', 'shapes', $params{ shapes }, 'int[]');
    $utils->initialize('align_special_slide_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'shapes', $params{ shapes }, 'int[]', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'shapes', 'int[]');
    }
};

subtest 'align_special_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('align_special_slide_shapes', 'password', $params{ password }, 'string');
    $utils->initialize('align_special_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'password', 'string');
    }
};

subtest 'align_special_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('align_special_slide_shapes', 'folder', $params{ folder }, 'string');
    $utils->initialize('align_special_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'folder', 'string');
    }
};

subtest 'align_special_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('align_special_slide_shapes', 'storage', $params{ storage }, 'string');
    $utils->initialize('align_special_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'storage', 'string');
    }
};

subtest 'align_special_slide_shapes invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('align_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('align_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('align_special_slide_shapes', 'slide_type', 'string'), 'alignment_type' => $utils->get_param_value('align_special_slide_shapes', 'alignment_type', 'string'), 'align_to_slide' => $utils->get_param_value('align_special_slide_shapes', 'align_to_slide', 'boolean'), 'shapes' => $utils->get_param_value('align_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('align_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('align_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('align_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('align_special_slide_shapes', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('align_special_slide_shapes', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('align_special_slide_shapes', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->align_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('align_special_slide_shapes', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('align_special_slide_shapes', 'sub_shape', 'string');
    }
};

#
# compress_embedded_fonts test
#
subtest 'compress_embedded_fonts' => sub {
    my %params = ('name' => $utils->get_param_value('compress_embedded_fonts', 'name', 'string'), 'password' => $utils->get_param_value('compress_embedded_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('compress_embedded_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('compress_embedded_fonts', 'storage', 'string'));
    $utils->initialize('compress_embedded_fonts', '');
    eval {
        my $result = $utils->{api}->compress_embedded_fonts(%params);
    };
    if ($@) {
        fail("compress_embedded_fonts raised an exception: $@");
    }
    pass();
};

subtest 'compress_embedded_fonts invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('compress_embedded_fonts', 'name', 'string'), 'password' => $utils->get_param_value('compress_embedded_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('compress_embedded_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('compress_embedded_fonts', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('compress_embedded_fonts', 'name', $params{ name }, 'string');
    $utils->initialize('compress_embedded_fonts', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->compress_embedded_fonts(%params);
    };
    if ($@) {
        $utils->assert_error('compress_embedded_fonts', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('compress_embedded_fonts', 'name', 'string');
    }
};

subtest 'compress_embedded_fonts invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('compress_embedded_fonts', 'name', 'string'), 'password' => $utils->get_param_value('compress_embedded_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('compress_embedded_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('compress_embedded_fonts', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('compress_embedded_fonts', 'password', $params{ password }, 'string');
    $utils->initialize('compress_embedded_fonts', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->compress_embedded_fonts(%params);
    };
    if ($@) {
        $utils->assert_error('compress_embedded_fonts', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('compress_embedded_fonts', 'password', 'string');
    }
};

subtest 'compress_embedded_fonts invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('compress_embedded_fonts', 'name', 'string'), 'password' => $utils->get_param_value('compress_embedded_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('compress_embedded_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('compress_embedded_fonts', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('compress_embedded_fonts', 'folder', $params{ folder }, 'string');
    $utils->initialize('compress_embedded_fonts', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->compress_embedded_fonts(%params);
    };
    if ($@) {
        $utils->assert_error('compress_embedded_fonts', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('compress_embedded_fonts', 'folder', 'string');
    }
};

subtest 'compress_embedded_fonts invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('compress_embedded_fonts', 'name', 'string'), 'password' => $utils->get_param_value('compress_embedded_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('compress_embedded_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('compress_embedded_fonts', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('compress_embedded_fonts', 'storage', $params{ storage }, 'string');
    $utils->initialize('compress_embedded_fonts', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->compress_embedded_fonts(%params);
    };
    if ($@) {
        $utils->assert_error('compress_embedded_fonts', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('compress_embedded_fonts', 'storage', 'string');
    }
};

#
# compress_embedded_fonts_online test
#
subtest 'compress_embedded_fonts_online' => sub {
    my %params = ('document' => $utils->get_param_value('compress_embedded_fonts_online', 'document', 'File'), 'password' => $utils->get_param_value('compress_embedded_fonts_online', 'password', 'string'));
    $utils->initialize('compress_embedded_fonts_online', '');
    eval {
        my $result = $utils->{api}->compress_embedded_fonts_online(%params);
    };
    if ($@) {
        fail("compress_embedded_fonts_online raised an exception: $@");
    }
    pass();
};

subtest 'compress_embedded_fonts_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('compress_embedded_fonts_online', 'document', 'File'), 'password' => $utils->get_param_value('compress_embedded_fonts_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('compress_embedded_fonts_online', 'document', $params{ document }, 'File');
    $utils->initialize('compress_embedded_fonts_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->compress_embedded_fonts_online(%params);
    };
    if ($@) {
        $utils->assert_error('compress_embedded_fonts_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('compress_embedded_fonts_online', 'document', 'File');
    }
};

subtest 'compress_embedded_fonts_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('compress_embedded_fonts_online', 'document', 'File'), 'password' => $utils->get_param_value('compress_embedded_fonts_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('compress_embedded_fonts_online', 'password', $params{ password }, 'string');
    $utils->initialize('compress_embedded_fonts_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->compress_embedded_fonts_online(%params);
    };
    if ($@) {
        $utils->assert_error('compress_embedded_fonts_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('compress_embedded_fonts_online', 'password', 'string');
    }
};

#
# convert test
#
subtest 'convert' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $utils->initialize('convert', '');
    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        fail("convert raised an exception: $@");
    }
    pass();
};

subtest 'convert invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('convert', 'document', $params{ document }, 'File');
    $utils->initialize('convert', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('convert', 'document', 'File');
    }
};

subtest 'convert invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('convert', 'format', $params{ format }, 'string');
    $utils->initialize('convert', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('convert', 'format', 'string');
    }
};

subtest 'convert invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('convert', 'password', $params{ password }, 'string');
    $utils->initialize('convert', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('convert', 'password', 'string');
    }
};

subtest 'convert invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('convert', 'storage', $params{ storage }, 'string');
    $utils->initialize('convert', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('convert', 'storage', 'string');
    }
};

subtest 'convert invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('convert', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('convert', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('convert', 'fonts_folder', 'string');
    }
};

subtest 'convert invalid slides' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ slides } = $utils->invalidize_param_value('convert', 'slides', $params{ slides }, 'int[]');
    $utils->initialize('convert', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'slides', $params{ slides }, 'int[]', $@);
    } else {
        $utils->assert_no_error('convert', 'slides', 'int[]');
    }
};

subtest 'convert invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('convert', 'document', 'File'), 'format' => $utils->get_param_value('convert', 'format', 'string'), 'password' => $utils->get_param_value('convert', 'password', 'string'), 'storage' => $utils->get_param_value('convert', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('convert', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('convert', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->convert(%params);
    };
    if ($@) {
        $utils->assert_error('convert', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('convert', 'options', 'ExportOptions');
    }
};

#
# convert_and_save test
#
subtest 'convert_and_save' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $utils->initialize('convert_and_save', '');
    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        fail("convert_and_save raised an exception: $@");
    }
    pass();
};

subtest 'convert_and_save invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('convert_and_save', 'document', $params{ document }, 'File');
    $utils->initialize('convert_and_save', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'document', 'File');
    }
};

subtest 'convert_and_save invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('convert_and_save', 'format', $params{ format }, 'string');
    $utils->initialize('convert_and_save', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'format', 'string');
    }
};

subtest 'convert_and_save invalid out_path' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ out_path } = $utils->invalidize_param_value('convert_and_save', 'out_path', $params{ out_path }, 'string');
    $utils->initialize('convert_and_save', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'out_path', $params{ out_path }, 'string', $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'out_path', 'string');
    }
};

subtest 'convert_and_save invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('convert_and_save', 'password', $params{ password }, 'string');
    $utils->initialize('convert_and_save', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'password', 'string');
    }
};

subtest 'convert_and_save invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('convert_and_save', 'storage', $params{ storage }, 'string');
    $utils->initialize('convert_and_save', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'storage', 'string');
    }
};

subtest 'convert_and_save invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('convert_and_save', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('convert_and_save', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'fonts_folder', 'string');
    }
};

subtest 'convert_and_save invalid slides' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ slides } = $utils->invalidize_param_value('convert_and_save', 'slides', $params{ slides }, 'int[]');
    $utils->initialize('convert_and_save', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'slides', $params{ slides }, 'int[]', $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'slides', 'int[]');
    }
};

subtest 'convert_and_save invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('convert_and_save', 'document', 'File'), 'format' => $utils->get_param_value('convert_and_save', 'format', 'string'), 'out_path' => $utils->get_param_value('convert_and_save', 'out_path', 'string'), 'password' => $utils->get_param_value('convert_and_save', 'password', 'string'), 'storage' => $utils->get_param_value('convert_and_save', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('convert_and_save', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('convert_and_save', 'slides', 'int[]'), 'options' => $utils->get_param_value('convert_and_save', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('convert_and_save', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('convert_and_save', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->convert_and_save(%params);
    };
    if ($@) {
        $utils->assert_error('convert_and_save', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('convert_and_save', 'options', 'ExportOptions');
    }
};

#
# copy_file test
#
subtest 'copy_file' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $utils->initialize('copy_file', '');
    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        fail("copy_file raised an exception: $@");
    }
    pass();
};

subtest 'copy_file invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('copy_file', 'src_path', $params{ src_path }, 'string');
    $utils->initialize('copy_file', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'src_path', $params{ src_path }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_file', 'src_path', 'string');
    }
};

subtest 'copy_file invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('copy_file', 'dest_path', $params{ dest_path }, 'string');
    $utils->initialize('copy_file', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'dest_path', $params{ dest_path }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_file', 'dest_path', 'string');
    }
};

subtest 'copy_file invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('copy_file', 'src_storage_name', $params{ src_storage_name }, 'string');
    $utils->initialize('copy_file', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'src_storage_name', $params{ src_storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_file', 'src_storage_name', 'string');
    }
};

subtest 'copy_file invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('copy_file', 'dest_storage_name', $params{ dest_storage_name }, 'string');
    $utils->initialize('copy_file', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'dest_storage_name', $params{ dest_storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_file', 'dest_storage_name', 'string');
    }
};

subtest 'copy_file invalid version_id' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('copy_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('copy_file', 'version_id', $params{ version_id }, 'string');
    $utils->initialize('copy_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->copy_file(%params);
    };
    if ($@) {
        $utils->assert_error('copy_file', 'version_id', $params{ version_id }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_file', 'version_id', 'string');
    }
};

#
# copy_folder test
#
subtest 'copy_folder' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $utils->initialize('copy_folder', '');
    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        fail("copy_folder raised an exception: $@");
    }
    pass();
};

subtest 'copy_folder invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('copy_folder', 'src_path', $params{ src_path }, 'string');
    $utils->initialize('copy_folder', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'src_path', $params{ src_path }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_folder', 'src_path', 'string');
    }
};

subtest 'copy_folder invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('copy_folder', 'dest_path', $params{ dest_path }, 'string');
    $utils->initialize('copy_folder', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'dest_path', $params{ dest_path }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_folder', 'dest_path', 'string');
    }
};

subtest 'copy_folder invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('copy_folder', 'src_storage_name', $params{ src_storage_name }, 'string');
    $utils->initialize('copy_folder', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'src_storage_name', $params{ src_storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_folder', 'src_storage_name', 'string');
    }
};

subtest 'copy_folder invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('copy_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('copy_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('copy_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('copy_folder', 'dest_storage_name', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('copy_folder', 'dest_storage_name', $params{ dest_storage_name }, 'string');
    $utils->initialize('copy_folder', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->copy_folder(%params);
    };
    if ($@) {
        $utils->assert_error('copy_folder', 'dest_storage_name', $params{ dest_storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_folder', 'dest_storage_name', 'string');
    }
};

#
# copy_layout_slide test
#
subtest 'copy_layout_slide' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $utils->initialize('copy_layout_slide', '');
    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        fail("copy_layout_slide raised an exception: $@");
    }
    pass();
};

subtest 'copy_layout_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('copy_layout_slide', 'name', $params{ name }, 'string');
    $utils->initialize('copy_layout_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'name', 'string');
    }
};

subtest 'copy_layout_slide invalid clone_from' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ clone_from } = $utils->invalidize_param_value('copy_layout_slide', 'clone_from', $params{ clone_from }, 'string');
    $utils->initialize('copy_layout_slide', 'clone_from', $params{ clone_from });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'clone_from', $params{ clone_from }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'clone_from', 'string');
    }
};

subtest 'copy_layout_slide invalid clone_from_position' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ clone_from_position } = $utils->invalidize_param_value('copy_layout_slide', 'clone_from_position', $params{ clone_from_position }, 'int');
    $utils->initialize('copy_layout_slide', 'clone_from_position', $params{ clone_from_position });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'clone_from_position', $params{ clone_from_position }, 'int', $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'clone_from_position', 'int');
    }
};

subtest 'copy_layout_slide invalid clone_from_password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ clone_from_password } = $utils->invalidize_param_value('copy_layout_slide', 'clone_from_password', $params{ clone_from_password }, 'string');
    $utils->initialize('copy_layout_slide', 'clone_from_password', $params{ clone_from_password });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'clone_from_password', $params{ clone_from_password }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'clone_from_password', 'string');
    }
};

subtest 'copy_layout_slide invalid clone_from_storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ clone_from_storage } = $utils->invalidize_param_value('copy_layout_slide', 'clone_from_storage', $params{ clone_from_storage }, 'string');
    $utils->initialize('copy_layout_slide', 'clone_from_storage', $params{ clone_from_storage });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'clone_from_storage', $params{ clone_from_storage }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'clone_from_storage', 'string');
    }
};

subtest 'copy_layout_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('copy_layout_slide', 'password', $params{ password }, 'string');
    $utils->initialize('copy_layout_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'password', 'string');
    }
};

subtest 'copy_layout_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('copy_layout_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('copy_layout_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'folder', 'string');
    }
};

subtest 'copy_layout_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_layout_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_layout_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_layout_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_layout_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_layout_slide', 'clone_from_storage', 'string'), 'password' => $utils->get_param_value('copy_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_layout_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('copy_layout_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('copy_layout_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->copy_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_layout_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_layout_slide', 'storage', 'string');
    }
};

#
# copy_master_slide test
#
subtest 'copy_master_slide' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $utils->initialize('copy_master_slide', '');
    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        fail("copy_master_slide raised an exception: $@");
    }
    pass();
};

subtest 'copy_master_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('copy_master_slide', 'name', $params{ name }, 'string');
    $utils->initialize('copy_master_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'name', 'string');
    }
};

subtest 'copy_master_slide invalid clone_from' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ clone_from } = $utils->invalidize_param_value('copy_master_slide', 'clone_from', $params{ clone_from }, 'string');
    $utils->initialize('copy_master_slide', 'clone_from', $params{ clone_from });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'clone_from', $params{ clone_from }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'clone_from', 'string');
    }
};

subtest 'copy_master_slide invalid clone_from_position' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ clone_from_position } = $utils->invalidize_param_value('copy_master_slide', 'clone_from_position', $params{ clone_from_position }, 'int');
    $utils->initialize('copy_master_slide', 'clone_from_position', $params{ clone_from_position });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'clone_from_position', $params{ clone_from_position }, 'int', $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'clone_from_position', 'int');
    }
};

subtest 'copy_master_slide invalid clone_from_password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ clone_from_password } = $utils->invalidize_param_value('copy_master_slide', 'clone_from_password', $params{ clone_from_password }, 'string');
    $utils->initialize('copy_master_slide', 'clone_from_password', $params{ clone_from_password });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'clone_from_password', $params{ clone_from_password }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'clone_from_password', 'string');
    }
};

subtest 'copy_master_slide invalid clone_from_storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ clone_from_storage } = $utils->invalidize_param_value('copy_master_slide', 'clone_from_storage', $params{ clone_from_storage }, 'string');
    $utils->initialize('copy_master_slide', 'clone_from_storage', $params{ clone_from_storage });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'clone_from_storage', $params{ clone_from_storage }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'clone_from_storage', 'string');
    }
};

subtest 'copy_master_slide invalid apply_to_all' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ apply_to_all } = $utils->invalidize_param_value('copy_master_slide', 'apply_to_all', $params{ apply_to_all }, 'boolean');
    $utils->initialize('copy_master_slide', 'apply_to_all', $params{ apply_to_all });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'apply_to_all', $params{ apply_to_all }, 'boolean', $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'apply_to_all', 'boolean');
    }
};

subtest 'copy_master_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('copy_master_slide', 'password', $params{ password }, 'string');
    $utils->initialize('copy_master_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'password', 'string');
    }
};

subtest 'copy_master_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('copy_master_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('copy_master_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'folder', 'string');
    }
};

subtest 'copy_master_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_master_slide', 'name', 'string'), 'clone_from' => $utils->get_param_value('copy_master_slide', 'clone_from', 'string'), 'clone_from_position' => $utils->get_param_value('copy_master_slide', 'clone_from_position', 'int'), 'clone_from_password' => $utils->get_param_value('copy_master_slide', 'clone_from_password', 'string'), 'clone_from_storage' => $utils->get_param_value('copy_master_slide', 'clone_from_storage', 'string'), 'apply_to_all' => $utils->get_param_value('copy_master_slide', 'apply_to_all', 'boolean'), 'password' => $utils->get_param_value('copy_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_master_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('copy_master_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('copy_master_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->copy_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_master_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_master_slide', 'storage', 'string');
    }
};

#
# copy_slide test
#
subtest 'copy_slide' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $utils->initialize('copy_slide', '');
    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        fail("copy_slide raised an exception: $@");
    }
    pass();
};

subtest 'copy_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('copy_slide', 'name', $params{ name }, 'string');
    $utils->initialize('copy_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_slide', 'name', 'string');
    }
};

subtest 'copy_slide invalid slide_to_copy' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ slide_to_copy } = $utils->invalidize_param_value('copy_slide', 'slide_to_copy', $params{ slide_to_copy }, 'int');
    $utils->initialize('copy_slide', 'slide_to_copy', $params{ slide_to_copy });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'slide_to_copy', $params{ slide_to_copy }, 'int', $@);
    } else {
        $utils->assert_no_error('copy_slide', 'slide_to_copy', 'int');
    }
};

subtest 'copy_slide invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('copy_slide', 'position', $params{ position }, 'int');
    $utils->initialize('copy_slide', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('copy_slide', 'position', 'int');
    }
};

subtest 'copy_slide invalid source' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ source } = $utils->invalidize_param_value('copy_slide', 'source', $params{ source }, 'string');
    $utils->initialize('copy_slide', 'source', $params{ source });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'source', $params{ source }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_slide', 'source', 'string');
    }
};

subtest 'copy_slide invalid source_password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ source_password } = $utils->invalidize_param_value('copy_slide', 'source_password', $params{ source_password }, 'string');
    $utils->initialize('copy_slide', 'source_password', $params{ source_password });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'source_password', $params{ source_password }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_slide', 'source_password', 'string');
    }
};

subtest 'copy_slide invalid source_storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ source_storage } = $utils->invalidize_param_value('copy_slide', 'source_storage', $params{ source_storage }, 'string');
    $utils->initialize('copy_slide', 'source_storage', $params{ source_storage });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'source_storage', $params{ source_storage }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_slide', 'source_storage', 'string');
    }
};

subtest 'copy_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('copy_slide', 'password', $params{ password }, 'string');
    $utils->initialize('copy_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_slide', 'password', 'string');
    }
};

subtest 'copy_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('copy_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('copy_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_slide', 'folder', 'string');
    }
};

subtest 'copy_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('copy_slide', 'name', 'string'), 'slide_to_copy' => $utils->get_param_value('copy_slide', 'slide_to_copy', 'int'), 'position' => $utils->get_param_value('copy_slide', 'position', 'int'), 'source' => $utils->get_param_value('copy_slide', 'source', 'string'), 'source_password' => $utils->get_param_value('copy_slide', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('copy_slide', 'source_storage', 'string'), 'password' => $utils->get_param_value('copy_slide', 'password', 'string'), 'folder' => $utils->get_param_value('copy_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('copy_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('copy_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('copy_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->copy_slide(%params);
    };
    if ($@) {
        $utils->assert_error('copy_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('copy_slide', 'storage', 'string');
    }
};

#
# create_animation_effect test
#
subtest 'create_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $utils->initialize('create_animation_effect', '');
    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        fail("create_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'create_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_animation_effect', 'name', $params{ name }, 'string');
    $utils->initialize('create_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'name', 'string');
    }
};

subtest 'create_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_animation_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'slide_index', 'int');
    }
};

subtest 'create_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('create_animation_effect', 'effect', $params{ effect }, 'Effect');
    $utils->initialize('create_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'effect', $params{ effect }, 'Effect', $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'effect', 'Effect');
    }
};

subtest 'create_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_animation_effect', 'password', $params{ password }, 'string');
    $utils->initialize('create_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'password', 'string');
    }
};

subtest 'create_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_animation_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'folder', 'string');
    }
};

subtest 'create_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_effect', 'slide_index', 'int'), 'effect' => $utils->get_param_value('create_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_animation_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_effect', 'storage', 'string');
    }
};

#
# create_animation_interactive_sequence test
#
subtest 'create_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('create_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("create_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'create_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'name', $params{ name }, 'string');
    $utils->initialize('create_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'name', 'string');
    }
};

subtest 'create_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'slide_index', 'int');
    }
};

subtest 'create_animation_interactive_sequence invalid sequence' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'sequence', $params{ sequence }, 'InteractiveSequence');
    $utils->initialize('create_animation_interactive_sequence', 'sequence', $params{ sequence });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'sequence', $params{ sequence }, 'InteractiveSequence', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence');
    }
};

subtest 'create_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'password', $params{ password }, 'string');
    $utils->initialize('create_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'password', 'string');
    }
};

subtest 'create_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'folder', 'string');
    }
};

subtest 'create_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence', 'slide_index', 'int'), 'sequence' => $utils->get_param_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_animation_interactive_sequence', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence', 'storage', 'string');
    }
};

#
# create_animation_interactive_sequence_effect test
#
subtest 'create_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('create_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("create_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'create_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'name', $params{ name }, 'string');
    $utils->initialize('create_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'name', 'string');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'slide_index', 'int');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int');
    $utils->initialize('create_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'sequence_index', 'int');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'effect', $params{ effect }, 'Effect');
    $utils->initialize('create_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'effect', $params{ effect }, 'Effect', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'effect', 'Effect');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'password', $params{ password }, 'string');
    $utils->initialize('create_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'password', 'string');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'folder', 'string');
    }
};

subtest 'create_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_animation_interactive_sequence_effect', 'storage', 'string');
    }
};

#
# create_chart_category test
#
subtest 'create_chart_category' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $utils->initialize('create_chart_category', '');
    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        fail("create_chart_category raised an exception: $@");
    }
    pass();
};

subtest 'create_chart_category invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_chart_category', 'name', $params{ name }, 'string');
    $utils->initialize('create_chart_category', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'name', 'string');
    }
};

subtest 'create_chart_category invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_chart_category', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_chart_category', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'slide_index', 'int');
    }
};

subtest 'create_chart_category invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_chart_category', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_chart_category', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'shape_index', 'int');
    }
};

subtest 'create_chart_category invalid category' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ category } = $utils->invalidize_param_value('create_chart_category', 'category', $params{ category }, 'ChartCategory');
    $utils->initialize('create_chart_category', 'category', $params{ category });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'category', $params{ category }, 'ChartCategory', $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'category', 'ChartCategory');
    }
};

subtest 'create_chart_category invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_chart_category', 'password', $params{ password }, 'string');
    $utils->initialize('create_chart_category', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'password', 'string');
    }
};

subtest 'create_chart_category invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_chart_category', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_chart_category', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'folder', 'string');
    }
};

subtest 'create_chart_category invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_category', 'shape_index', 'int'), 'category' => $utils->get_param_value('create_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('create_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_category', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_chart_category', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_chart_category', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_category', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_category', 'storage', 'string');
    }
};

#
# create_chart_data_point test
#
subtest 'create_chart_data_point' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $utils->initialize('create_chart_data_point', '');
    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        fail("create_chart_data_point raised an exception: $@");
    }
    pass();
};

subtest 'create_chart_data_point invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_chart_data_point', 'name', $params{ name }, 'string');
    $utils->initialize('create_chart_data_point', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'name', 'string');
    }
};

subtest 'create_chart_data_point invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_chart_data_point', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_chart_data_point', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'slide_index', 'int');
    }
};

subtest 'create_chart_data_point invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_chart_data_point', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_chart_data_point', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'shape_index', 'int');
    }
};

subtest 'create_chart_data_point invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('create_chart_data_point', 'series_index', $params{ series_index }, 'int');
    $utils->initialize('create_chart_data_point', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'series_index', $params{ series_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'series_index', 'int');
    }
};

subtest 'create_chart_data_point invalid data_point' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ data_point } = $utils->invalidize_param_value('create_chart_data_point', 'data_point', $params{ data_point }, 'DataPoint');
    $utils->initialize('create_chart_data_point', 'data_point', $params{ data_point });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'data_point', $params{ data_point }, 'DataPoint', $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'data_point', 'DataPoint');
    }
};

subtest 'create_chart_data_point invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_chart_data_point', 'password', $params{ password }, 'string');
    $utils->initialize('create_chart_data_point', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'password', 'string');
    }
};

subtest 'create_chart_data_point invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_chart_data_point', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_chart_data_point', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'folder', 'string');
    }
};

subtest 'create_chart_data_point invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('create_chart_data_point', 'series_index', 'int'), 'data_point' => $utils->get_param_value('create_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('create_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_data_point', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_chart_data_point', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_chart_data_point', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_data_point', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_data_point', 'storage', 'string');
    }
};

#
# create_chart_series test
#
subtest 'create_chart_series' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $utils->initialize('create_chart_series', '');
    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        fail("create_chart_series raised an exception: $@");
    }
    pass();
};

subtest 'create_chart_series invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_chart_series', 'name', $params{ name }, 'string');
    $utils->initialize('create_chart_series', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'name', 'string');
    }
};

subtest 'create_chart_series invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_chart_series', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_chart_series', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'slide_index', 'int');
    }
};

subtest 'create_chart_series invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_chart_series', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_chart_series', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'shape_index', 'int');
    }
};

subtest 'create_chart_series invalid series' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ series } = $utils->invalidize_param_value('create_chart_series', 'series', $params{ series }, 'Series');
    $utils->initialize('create_chart_series', 'series', $params{ series });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'series', $params{ series }, 'Series', $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'series', 'Series');
    }
};

subtest 'create_chart_series invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_chart_series', 'password', $params{ password }, 'string');
    $utils->initialize('create_chart_series', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'password', 'string');
    }
};

subtest 'create_chart_series invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_chart_series', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_chart_series', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'folder', 'string');
    }
};

subtest 'create_chart_series invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_chart_series', 'shape_index', 'int'), 'series' => $utils->get_param_value('create_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('create_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('create_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('create_chart_series', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_chart_series', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_chart_series', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('create_chart_series', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_chart_series', 'storage', 'string');
    }
};

#
# create_comment test
#
subtest 'create_comment' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $utils->initialize('create_comment', '');
    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        fail("create_comment raised an exception: $@");
    }
    pass();
};

subtest 'create_comment invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_comment', 'name', $params{ name }, 'string');
    $utils->initialize('create_comment', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_comment', 'name', 'string');
    }
};

subtest 'create_comment invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_comment', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_comment', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_comment', 'slide_index', 'int');
    }
};

subtest 'create_comment invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_comment', 'dto', $params{ dto }, 'SlideCommentBase');
    $utils->initialize('create_comment', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'dto', $params{ dto }, 'SlideCommentBase', $@);
    } else {
        $utils->assert_no_error('create_comment', 'dto', 'SlideCommentBase');
    }
};

subtest 'create_comment invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_comment', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_comment', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_comment', 'shape_index', 'int');
    }
};

subtest 'create_comment invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_comment', 'password', $params{ password }, 'string');
    $utils->initialize('create_comment', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_comment', 'password', 'string');
    }
};

subtest 'create_comment invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_comment', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_comment', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_comment', 'folder', 'string');
    }
};

subtest 'create_comment invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_comment', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_comment', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment', 'password', 'string'), 'folder' => $utils->get_param_value('create_comment', 'folder', 'string'), 'storage' => $utils->get_param_value('create_comment', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_comment', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_comment', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_comment(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_comment', 'storage', 'string');
    }
};

#
# create_comment_online test
#
subtest 'create_comment_online' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment_online', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $utils->initialize('create_comment_online', '');
    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        fail("create_comment_online raised an exception: $@");
    }
    pass();
};

subtest 'create_comment_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment_online', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('create_comment_online', 'document', $params{ document }, 'File');
    $utils->initialize('create_comment_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('create_comment_online', 'document', 'File');
    }
};

subtest 'create_comment_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment_online', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_comment_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_comment_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_comment_online', 'slide_index', 'int');
    }
};

subtest 'create_comment_online invalid dto' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment_online', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_comment_online', 'dto', $params{ dto }, 'SlideCommentBase');
    $utils->initialize('create_comment_online', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment_online', 'dto', $params{ dto }, 'SlideCommentBase', $@);
    } else {
        $utils->assert_no_error('create_comment_online', 'dto', 'SlideCommentBase');
    }
};

subtest 'create_comment_online invalid shape_index' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment_online', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_comment_online', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_comment_online', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment_online', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_comment_online', 'shape_index', 'int');
    }
};

subtest 'create_comment_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('create_comment_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('create_comment_online', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_comment_online', 'dto', 'SlideCommentBase'), 'shape_index' => $utils->get_param_value('create_comment_online', 'shape_index', 'int'), 'password' => $utils->get_param_value('create_comment_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_comment_online', 'password', $params{ password }, 'string');
    $utils->initialize('create_comment_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_comment_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_comment_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_comment_online', 'password', 'string');
    }
};

#
# create_folder test
#
subtest 'create_folder' => sub {
    my %params = ('path' => $utils->get_param_value('create_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('create_folder', 'storage_name', 'string'));
    $utils->initialize('create_folder', '');
    eval {
        my $result = $utils->{api}->create_folder(%params);
    };
    if ($@) {
        fail("create_folder raised an exception: $@");
    }
    pass();
};

subtest 'create_folder invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('create_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('create_folder', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('create_folder', 'path', $params{ path }, 'string');
    $utils->initialize('create_folder', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->create_folder(%params);
    };
    if ($@) {
        $utils->assert_error('create_folder', 'path', $params{ path }, 'string', $@);
    } else {
        $utils->assert_no_error('create_folder', 'path', 'string');
    }
};

subtest 'create_folder invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('create_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('create_folder', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('create_folder', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('create_folder', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->create_folder(%params);
    };
    if ($@) {
        $utils->assert_error('create_folder', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_folder', 'storage_name', 'string');
    }
};

#
# create_image_watermark test
#
subtest 'create_image_watermark' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $utils->initialize('create_image_watermark', '');
    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        fail("create_image_watermark raised an exception: $@");
    }
    pass();
};

subtest 'create_image_watermark invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_image_watermark', 'name', $params{ name }, 'string');
    $utils->initialize('create_image_watermark', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'name', 'string');
    }
};

subtest 'create_image_watermark invalid image' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ image } = $utils->invalidize_param_value('create_image_watermark', 'image', $params{ image }, 'File');
    $utils->initialize('create_image_watermark', 'image', $params{ image });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'image', $params{ image }, 'File', $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'image', 'File');
    }
};

subtest 'create_image_watermark invalid picture_frame' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ picture_frame } = $utils->invalidize_param_value('create_image_watermark', 'picture_frame', $params{ picture_frame }, 'PictureFrame');
    $utils->initialize('create_image_watermark', 'picture_frame', $params{ picture_frame });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'picture_frame', $params{ picture_frame }, 'PictureFrame', $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'picture_frame', 'PictureFrame');
    }
};

subtest 'create_image_watermark invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_image_watermark', 'password', $params{ password }, 'string');
    $utils->initialize('create_image_watermark', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'password', 'string');
    }
};

subtest 'create_image_watermark invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_image_watermark', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_image_watermark', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'folder', 'string');
    }
};

subtest 'create_image_watermark invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_image_watermark', 'name', 'string'), 'image' => $utils->get_param_value('create_image_watermark', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_image_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_image_watermark', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_image_watermark', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_image_watermark', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_image_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_image_watermark', 'storage', 'string');
    }
};

#
# create_image_watermark_online test
#
subtest 'create_image_watermark_online' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $utils->initialize('create_image_watermark_online', '');
    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        fail("create_image_watermark_online raised an exception: $@");
    }
    pass();
};

subtest 'create_image_watermark_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('create_image_watermark_online', 'document', $params{ document }, 'File');
    $utils->initialize('create_image_watermark_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('create_image_watermark_online', 'document', 'File');
    }
};

subtest 'create_image_watermark_online invalid image' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $params{ image } = $utils->invalidize_param_value('create_image_watermark_online', 'image', $params{ image }, 'File');
    $utils->initialize('create_image_watermark_online', 'image', $params{ image });

    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark_online', 'image', $params{ image }, 'File', $@);
    } else {
        $utils->assert_no_error('create_image_watermark_online', 'image', 'File');
    }
};

subtest 'create_image_watermark_online invalid picture_frame' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $params{ picture_frame } = $utils->invalidize_param_value('create_image_watermark_online', 'picture_frame', $params{ picture_frame }, 'PictureFrame');
    $utils->initialize('create_image_watermark_online', 'picture_frame', $params{ picture_frame });

    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark_online', 'picture_frame', $params{ picture_frame }, 'PictureFrame', $@);
    } else {
        $utils->assert_no_error('create_image_watermark_online', 'picture_frame', 'PictureFrame');
    }
};

subtest 'create_image_watermark_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('create_image_watermark_online', 'document', 'File'), 'image' => $utils->get_param_value('create_image_watermark_online', 'image', 'File'), 'picture_frame' => $utils->get_param_value('create_image_watermark_online', 'picture_frame', 'PictureFrame'), 'password' => $utils->get_param_value('create_image_watermark_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_image_watermark_online', 'password', $params{ password }, 'string');
    $utils->initialize('create_image_watermark_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_image_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_image_watermark_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_image_watermark_online', 'password', 'string');
    }
};

#
# create_notes_slide test
#
subtest 'create_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $utils->initialize('create_notes_slide', '');
    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        fail("create_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'create_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_notes_slide', 'name', $params{ name }, 'string');
    $utils->initialize('create_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'name', 'string');
    }
};

subtest 'create_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_notes_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'slide_index', 'int');
    }
};

subtest 'create_notes_slide invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_notes_slide', 'dto', $params{ dto }, 'NotesSlide');
    $utils->initialize('create_notes_slide', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'dto', $params{ dto }, 'NotesSlide', $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'dto', 'NotesSlide');
    }
};

subtest 'create_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_notes_slide', 'password', $params{ password }, 'string');
    $utils->initialize('create_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'password', 'string');
    }
};

subtest 'create_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_notes_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'folder', 'string');
    }
};

subtest 'create_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('create_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_notes_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_notes_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_notes_slide', 'storage', 'string');
    }
};

#
# create_paragraph test
#
subtest 'create_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $utils->initialize('create_paragraph', '');
    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        fail("create_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'create_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('create_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'name', 'string');
    }
};

subtest 'create_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'slide_index', 'int');
    }
};

subtest 'create_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'shape_index', 'int');
    }
};

subtest 'create_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_paragraph', 'dto', $params{ dto }, 'Paragraph');
    $utils->initialize('create_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'dto', $params{ dto }, 'Paragraph', $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'dto', 'Paragraph');
    }
};

subtest 'create_paragraph invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_paragraph', 'position', $params{ position }, 'int');
    $utils->initialize('create_paragraph', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'position', 'int');
    }
};

subtest 'create_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('create_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'password', 'string');
    }
};

subtest 'create_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'folder', 'string');
    }
};

subtest 'create_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'storage', 'string');
    }
};

subtest 'create_paragraph invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_paragraph', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('create_paragraph', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('create_paragraph', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->create_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_paragraph', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('create_paragraph', 'sub_shape', 'string');
    }
};

#
# create_portion test
#
subtest 'create_portion' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $utils->initialize('create_portion', '');
    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        fail("create_portion raised an exception: $@");
    }
    pass();
};

subtest 'create_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_portion', 'name', $params{ name }, 'string');
    $utils->initialize('create_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_portion', 'name', 'string');
    }
};

subtest 'create_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_portion', 'slide_index', 'int');
    }
};

subtest 'create_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_portion', 'shape_index', 'int');
    }
};

subtest 'create_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('create_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('create_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_portion', 'paragraph_index', 'int');
    }
};

subtest 'create_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_portion', 'dto', $params{ dto }, 'Portion');
    $utils->initialize('create_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'dto', $params{ dto }, 'Portion', $@);
    } else {
        $utils->assert_no_error('create_portion', 'dto', 'Portion');
    }
};

subtest 'create_portion invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_portion', 'position', $params{ position }, 'int');
    $utils->initialize('create_portion', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('create_portion', 'position', 'int');
    }
};

subtest 'create_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_portion', 'password', $params{ password }, 'string');
    $utils->initialize('create_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_portion', 'password', 'string');
    }
};

subtest 'create_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_portion', 'folder', 'string');
    }
};

subtest 'create_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_portion', 'storage', 'string');
    }
};

subtest 'create_portion invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_portion', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('create_portion', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('create_portion', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->create_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_portion', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('create_portion', 'sub_shape', 'string');
    }
};

#
# create_presentation test
#
subtest 'create_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $utils->initialize('create_presentation', '');
    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        fail("create_presentation raised an exception: $@");
    }
    pass();
};

subtest 'create_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_presentation', 'name', $params{ name }, 'string');
    $utils->initialize('create_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation', 'name', 'string');
    }
};

subtest 'create_presentation invalid data' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ data } = $utils->invalidize_param_value('create_presentation', 'data', $params{ data }, 'File');
    $utils->initialize('create_presentation', 'data', $params{ data });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'data', $params{ data }, 'File', $@);
    } else {
        $utils->assert_no_error('create_presentation', 'data', 'File');
    }
};

subtest 'create_presentation invalid input_password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ input_password } = $utils->invalidize_param_value('create_presentation', 'input_password', $params{ input_password }, 'string');
    $utils->initialize('create_presentation', 'input_password', $params{ input_password });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'input_password', $params{ input_password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation', 'input_password', 'string');
    }
};

subtest 'create_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_presentation', 'password', $params{ password }, 'string');
    $utils->initialize('create_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation', 'password', 'string');
    }
};

subtest 'create_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_presentation', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation', 'folder', 'string');
    }
};

subtest 'create_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation', 'name', 'string'), 'data' => $utils->get_param_value('create_presentation', 'data', 'File'), 'input_password' => $utils->get_param_value('create_presentation', 'input_password', 'string'), 'password' => $utils->get_param_value('create_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_presentation', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation', 'storage', 'string');
    }
};

#
# create_presentation_from_source test
#
subtest 'create_presentation_from_source' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $utils->initialize('create_presentation_from_source', '');
    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        fail("create_presentation_from_source raised an exception: $@");
    }
    pass();
};

subtest 'create_presentation_from_source invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_presentation_from_source', 'name', $params{ name }, 'string');
    $utils->initialize('create_presentation_from_source', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'name', 'string');
    }
};

subtest 'create_presentation_from_source invalid source_path' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ source_path } = $utils->invalidize_param_value('create_presentation_from_source', 'source_path', $params{ source_path }, 'string');
    $utils->initialize('create_presentation_from_source', 'source_path', $params{ source_path });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'source_path', $params{ source_path }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'source_path', 'string');
    }
};

subtest 'create_presentation_from_source invalid source_password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ source_password } = $utils->invalidize_param_value('create_presentation_from_source', 'source_password', $params{ source_password }, 'string');
    $utils->initialize('create_presentation_from_source', 'source_password', $params{ source_password });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'source_password', $params{ source_password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'source_password', 'string');
    }
};

subtest 'create_presentation_from_source invalid source_storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ source_storage } = $utils->invalidize_param_value('create_presentation_from_source', 'source_storage', $params{ source_storage }, 'string');
    $utils->initialize('create_presentation_from_source', 'source_storage', $params{ source_storage });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'source_storage', $params{ source_storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'source_storage', 'string');
    }
};

subtest 'create_presentation_from_source invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_presentation_from_source', 'password', $params{ password }, 'string');
    $utils->initialize('create_presentation_from_source', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'password', 'string');
    }
};

subtest 'create_presentation_from_source invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_presentation_from_source', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_presentation_from_source', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'folder', 'string');
    }
};

subtest 'create_presentation_from_source invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_source', 'name', 'string'), 'source_path' => $utils->get_param_value('create_presentation_from_source', 'source_path', 'string'), 'source_password' => $utils->get_param_value('create_presentation_from_source', 'source_password', 'string'), 'source_storage' => $utils->get_param_value('create_presentation_from_source', 'source_storage', 'string'), 'password' => $utils->get_param_value('create_presentation_from_source', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_source', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_source', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_presentation_from_source', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_presentation_from_source', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_presentation_from_source(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_source', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_source', 'storage', 'string');
    }
};

#
# create_presentation_from_template test
#
subtest 'create_presentation_from_template' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $utils->initialize('create_presentation_from_template', '');
    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        fail("create_presentation_from_template raised an exception: $@");
    }
    pass();
};

subtest 'create_presentation_from_template invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_presentation_from_template', 'name', $params{ name }, 'string');
    $utils->initialize('create_presentation_from_template', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'name', 'string');
    }
};

subtest 'create_presentation_from_template invalid template_path' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ template_path } = $utils->invalidize_param_value('create_presentation_from_template', 'template_path', $params{ template_path }, 'string');
    $utils->initialize('create_presentation_from_template', 'template_path', $params{ template_path });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'template_path', $params{ template_path }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'template_path', 'string');
    }
};

subtest 'create_presentation_from_template invalid data' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ data } = $utils->invalidize_param_value('create_presentation_from_template', 'data', $params{ data }, 'string');
    $utils->initialize('create_presentation_from_template', 'data', $params{ data });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'data', $params{ data }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'data', 'string');
    }
};

subtest 'create_presentation_from_template invalid template_password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ template_password } = $utils->invalidize_param_value('create_presentation_from_template', 'template_password', $params{ template_password }, 'string');
    $utils->initialize('create_presentation_from_template', 'template_password', $params{ template_password });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'template_password', $params{ template_password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'template_password', 'string');
    }
};

subtest 'create_presentation_from_template invalid template_storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ template_storage } = $utils->invalidize_param_value('create_presentation_from_template', 'template_storage', $params{ template_storage }, 'string');
    $utils->initialize('create_presentation_from_template', 'template_storage', $params{ template_storage });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'template_storage', $params{ template_storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'template_storage', 'string');
    }
};

subtest 'create_presentation_from_template invalid is_image_data_embedded' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ is_image_data_embedded } = $utils->invalidize_param_value('create_presentation_from_template', 'is_image_data_embedded', $params{ is_image_data_embedded }, 'boolean');
    $utils->initialize('create_presentation_from_template', 'is_image_data_embedded', $params{ is_image_data_embedded });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'is_image_data_embedded', $params{ is_image_data_embedded }, 'boolean', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'is_image_data_embedded', 'boolean');
    }
};

subtest 'create_presentation_from_template invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_presentation_from_template', 'password', $params{ password }, 'string');
    $utils->initialize('create_presentation_from_template', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'password', 'string');
    }
};

subtest 'create_presentation_from_template invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_presentation_from_template', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_presentation_from_template', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'folder', 'string');
    }
};

subtest 'create_presentation_from_template invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_presentation_from_template', 'name', 'string'), 'template_path' => $utils->get_param_value('create_presentation_from_template', 'template_path', 'string'), 'data' => $utils->get_param_value('create_presentation_from_template', 'data', 'string'), 'template_password' => $utils->get_param_value('create_presentation_from_template', 'template_password', 'string'), 'template_storage' => $utils->get_param_value('create_presentation_from_template', 'template_storage', 'string'), 'is_image_data_embedded' => $utils->get_param_value('create_presentation_from_template', 'is_image_data_embedded', 'boolean'), 'password' => $utils->get_param_value('create_presentation_from_template', 'password', 'string'), 'folder' => $utils->get_param_value('create_presentation_from_template', 'folder', 'string'), 'storage' => $utils->get_param_value('create_presentation_from_template', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_presentation_from_template', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_presentation_from_template', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_presentation_from_template(%params);
    };
    if ($@) {
        $utils->assert_error('create_presentation_from_template', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_presentation_from_template', 'storage', 'string');
    }
};

#
# create_section test
#
subtest 'create_section' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $utils->initialize('create_section', '');
    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        fail("create_section raised an exception: $@");
    }
    pass();
};

subtest 'create_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_section', 'name', $params{ name }, 'string');
    $utils->initialize('create_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_section', 'name', 'string');
    }
};

subtest 'create_section invalid section_name' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ section_name } = $utils->invalidize_param_value('create_section', 'section_name', $params{ section_name }, 'string');
    $utils->initialize('create_section', 'section_name', $params{ section_name });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'section_name', $params{ section_name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_section', 'section_name', 'string');
    }
};

subtest 'create_section invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_section', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_section', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_section', 'slide_index', 'int');
    }
};

subtest 'create_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_section', 'password', $params{ password }, 'string');
    $utils->initialize('create_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_section', 'password', 'string');
    }
};

subtest 'create_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_section', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_section', 'folder', 'string');
    }
};

subtest 'create_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_section', 'name', 'string'), 'section_name' => $utils->get_param_value('create_section', 'section_name', 'string'), 'slide_index' => $utils->get_param_value('create_section', 'slide_index', 'int'), 'password' => $utils->get_param_value('create_section', 'password', 'string'), 'folder' => $utils->get_param_value('create_section', 'folder', 'string'), 'storage' => $utils->get_param_value('create_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_section', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_section(%params);
    };
    if ($@) {
        $utils->assert_error('create_section', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_section', 'storage', 'string');
    }
};

#
# create_shape test
#
subtest 'create_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $utils->initialize('create_shape', '');
    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        fail("create_shape raised an exception: $@");
    }
    pass();
};

subtest 'create_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_shape', 'name', $params{ name }, 'string');
    $utils->initialize('create_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_shape', 'name', 'string');
    }
};

subtest 'create_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_shape', 'slide_index', 'int');
    }
};

subtest 'create_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_shape', 'dto', $params{ dto }, 'ShapeBase');
    $utils->initialize('create_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'dto', $params{ dto }, 'ShapeBase', $@);
    } else {
        $utils->assert_no_error('create_shape', 'dto', 'ShapeBase');
    }
};

subtest 'create_shape invalid shape_to_clone' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $params{ shape_to_clone } = $utils->invalidize_param_value('create_shape', 'shape_to_clone', $params{ shape_to_clone }, 'int');
    $utils->initialize('create_shape', 'shape_to_clone', $params{ shape_to_clone });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'shape_to_clone', $params{ shape_to_clone }, 'int', $@);
    } else {
        $utils->assert_no_error('create_shape', 'shape_to_clone', 'int');
    }
};

subtest 'create_shape invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_shape', 'position', $params{ position }, 'int');
    $utils->initialize('create_shape', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('create_shape', 'position', 'int');
    }
};

subtest 'create_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_shape', 'password', $params{ password }, 'string');
    $utils->initialize('create_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_shape', 'password', 'string');
    }
};

subtest 'create_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_shape', 'folder', 'string');
    }
};

subtest 'create_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_shape', 'storage', 'string');
    }
};

subtest 'create_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_shape', 'slide_index', 'int'), 'dto' => $utils->get_param_value('create_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('create_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('create_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->create_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('create_shape', 'sub_shape', 'string');
    }
};

#
# create_slide test
#
subtest 'create_slide' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $utils->initialize('create_slide', '');
    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        fail("create_slide raised an exception: $@");
    }
    pass();
};

subtest 'create_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_slide', 'name', $params{ name }, 'string');
    $utils->initialize('create_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_slide', 'name', 'string');
    }
};

subtest 'create_slide invalid layout_alias' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ layout_alias } = $utils->invalidize_param_value('create_slide', 'layout_alias', $params{ layout_alias }, 'string');
    $utils->initialize('create_slide', 'layout_alias', $params{ layout_alias });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'layout_alias', $params{ layout_alias }, 'string', $@);
    } else {
        $utils->assert_no_error('create_slide', 'layout_alias', 'string');
    }
};

subtest 'create_slide invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_slide', 'position', $params{ position }, 'int');
    $utils->initialize('create_slide', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('create_slide', 'position', 'int');
    }
};

subtest 'create_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_slide', 'password', $params{ password }, 'string');
    $utils->initialize('create_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_slide', 'password', 'string');
    }
};

subtest 'create_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_slide', 'folder', 'string');
    }
};

subtest 'create_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_slide', 'name', 'string'), 'layout_alias' => $utils->get_param_value('create_slide', 'layout_alias', 'string'), 'position' => $utils->get_param_value('create_slide', 'position', 'int'), 'password' => $utils->get_param_value('create_slide', 'password', 'string'), 'folder' => $utils->get_param_value('create_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('create_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_slide(%params);
    };
    if ($@) {
        $utils->assert_error('create_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_slide', 'storage', 'string');
    }
};

#
# create_smart_art_node test
#
subtest 'create_smart_art_node' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $utils->initialize('create_smart_art_node', '');
    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        fail("create_smart_art_node raised an exception: $@");
    }
    pass();
};

subtest 'create_smart_art_node invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_smart_art_node', 'name', $params{ name }, 'string');
    $utils->initialize('create_smart_art_node', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('create_smart_art_node', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_smart_art_node', 'name', 'string');
    }
};

subtest 'create_smart_art_node invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_smart_art_node', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_smart_art_node', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('create_smart_art_node', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_smart_art_node', 'slide_index', 'int');
    }
};

subtest 'create_smart_art_node invalid smart_art_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $params{ smart_art_index } = $utils->invalidize_param_value('create_smart_art_node', 'smart_art_index', $params{ smart_art_index }, 'int');
    $utils->initialize('create_smart_art_node', 'smart_art_index', $params{ smart_art_index });

    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('create_smart_art_node', 'smart_art_index', $params{ smart_art_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_smart_art_node', 'smart_art_index', 'int');
    }
};

subtest 'create_smart_art_node invalid sub_node' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $params{ sub_node } = $utils->invalidize_param_value('create_smart_art_node', 'sub_node', $params{ sub_node }, 'string');
    $utils->initialize('create_smart_art_node', 'sub_node', $params{ sub_node });

    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('create_smart_art_node', 'sub_node', $params{ sub_node }, 'string', $@);
    } else {
        $utils->assert_no_error('create_smart_art_node', 'sub_node', 'string');
    }
};

subtest 'create_smart_art_node invalid text' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $params{ text } = $utils->invalidize_param_value('create_smart_art_node', 'text', $params{ text }, 'string');
    $utils->initialize('create_smart_art_node', 'text', $params{ text });

    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('create_smart_art_node', 'text', $params{ text }, 'string', $@);
    } else {
        $utils->assert_no_error('create_smart_art_node', 'text', 'string');
    }
};

subtest 'create_smart_art_node invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_smart_art_node', 'position', $params{ position }, 'int');
    $utils->initialize('create_smart_art_node', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('create_smart_art_node', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('create_smart_art_node', 'position', 'int');
    }
};

subtest 'create_smart_art_node invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_smart_art_node', 'password', $params{ password }, 'string');
    $utils->initialize('create_smart_art_node', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('create_smart_art_node', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_smart_art_node', 'password', 'string');
    }
};

subtest 'create_smart_art_node invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_smart_art_node', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_smart_art_node', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('create_smart_art_node', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_smart_art_node', 'folder', 'string');
    }
};

subtest 'create_smart_art_node invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('create_smart_art_node', 'smart_art_index', 'int'), 'sub_node' => $utils->get_param_value('create_smart_art_node', 'sub_node', 'string'), 'text' => $utils->get_param_value('create_smart_art_node', 'text', 'string'), 'position' => $utils->get_param_value('create_smart_art_node', 'position', 'int'), 'password' => $utils->get_param_value('create_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('create_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('create_smart_art_node', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_smart_art_node', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_smart_art_node', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('create_smart_art_node', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_smart_art_node', 'storage', 'string');
    }
};

#
# create_special_slide_animation_effect test
#
subtest 'create_special_slide_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $utils->initialize('create_special_slide_animation_effect', '');
    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        fail("create_special_slide_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'name', $params{ name }, 'string');
    $utils->initialize('create_special_slide_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'name', 'string');
    }
};

subtest 'create_special_slide_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_special_slide_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'slide_index', 'int');
    }
};

subtest 'create_special_slide_animation_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('create_special_slide_animation_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'slide_type', 'string');
    }
};

subtest 'create_special_slide_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'effect', $params{ effect }, 'Effect');
    $utils->initialize('create_special_slide_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'effect', $params{ effect }, 'Effect', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'effect', 'Effect');
    }
};

subtest 'create_special_slide_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'password', $params{ password }, 'string');
    $utils->initialize('create_special_slide_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'password', 'string');
    }
};

subtest 'create_special_slide_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_special_slide_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'folder', 'string');
    }
};

subtest 'create_special_slide_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_effect', 'slide_type', 'string'), 'effect' => $utils->get_param_value('create_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_animation_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_special_slide_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_effect', 'storage', 'string');
    }
};

#
# create_special_slide_animation_interactive_sequence test
#
subtest 'create_special_slide_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('create_special_slide_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("create_special_slide_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'name', $params{ name }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'name', 'string');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'slide_index', 'int');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'slide_type', 'string');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid sequence' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'sequence', $params{ sequence }, 'InteractiveSequence');
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'sequence', $params{ sequence });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'sequence', $params{ sequence }, 'InteractiveSequence', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'password', $params{ password }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'password', 'string');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'folder', 'string');
    }
};

subtest 'create_special_slide_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence', 'storage', 'string');
    }
};

#
# create_special_slide_animation_interactive_sequence_effect test
#
subtest 'create_special_slide_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("create_special_slide_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', $params{ name }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'name', 'string');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int');
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect }, 'Effect');
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect }, 'Effect', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', $params{ password }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'password', 'string');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string');
    }
};

subtest 'create_special_slide_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_animation_interactive_sequence_effect', 'storage', 'string');
    }
};

#
# create_special_slide_paragraph test
#
subtest 'create_special_slide_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $utils->initialize('create_special_slide_paragraph', '');
    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        fail("create_special_slide_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('create_special_slide_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'name', 'string');
    }
};

subtest 'create_special_slide_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_special_slide_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'slide_index', 'int');
    }
};

subtest 'create_special_slide_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_paragraph', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('create_special_slide_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'slide_type', 'string');
    }
};

subtest 'create_special_slide_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_special_slide_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_special_slide_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'shape_index', 'int');
    }
};

subtest 'create_special_slide_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_special_slide_paragraph', 'dto', $params{ dto }, 'Paragraph');
    $utils->initialize('create_special_slide_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'dto', $params{ dto }, 'Paragraph', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'dto', 'Paragraph');
    }
};

subtest 'create_special_slide_paragraph invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_special_slide_paragraph', 'position', $params{ position }, 'int');
    $utils->initialize('create_special_slide_paragraph', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'position', 'int');
    }
};

subtest 'create_special_slide_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('create_special_slide_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'password', 'string');
    }
};

subtest 'create_special_slide_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_special_slide_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'folder', 'string');
    }
};

subtest 'create_special_slide_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_special_slide_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'storage', 'string');
    }
};

subtest 'create_special_slide_paragraph invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_paragraph', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_paragraph', 'dto', 'Paragraph'), 'position' => $utils->get_param_value('create_special_slide_paragraph', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('create_special_slide_paragraph', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('create_special_slide_paragraph', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->create_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_paragraph', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_paragraph', 'sub_shape', 'string');
    }
};

#
# create_special_slide_portion test
#
subtest 'create_special_slide_portion' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $utils->initialize('create_special_slide_portion', '');
    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        fail("create_special_slide_portion raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_portion', 'name', $params{ name }, 'string');
    $utils->initialize('create_special_slide_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'name', 'string');
    }
};

subtest 'create_special_slide_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_special_slide_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'slide_index', 'int');
    }
};

subtest 'create_special_slide_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_portion', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('create_special_slide_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'slide_type', 'string');
    }
};

subtest 'create_special_slide_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_special_slide_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_special_slide_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'shape_index', 'int');
    }
};

subtest 'create_special_slide_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('create_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('create_special_slide_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'paragraph_index', 'int');
    }
};

subtest 'create_special_slide_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_special_slide_portion', 'dto', $params{ dto }, 'Portion');
    $utils->initialize('create_special_slide_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'dto', $params{ dto }, 'Portion', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'dto', 'Portion');
    }
};

subtest 'create_special_slide_portion invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_special_slide_portion', 'position', $params{ position }, 'int');
    $utils->initialize('create_special_slide_portion', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'position', 'int');
    }
};

subtest 'create_special_slide_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_portion', 'password', $params{ password }, 'string');
    $utils->initialize('create_special_slide_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'password', 'string');
    }
};

subtest 'create_special_slide_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_special_slide_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'folder', 'string');
    }
};

subtest 'create_special_slide_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_special_slide_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'storage', 'string');
    }
};

subtest 'create_special_slide_portion invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('create_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_special_slide_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_special_slide_portion', 'dto', 'Portion'), 'position' => $utils->get_param_value('create_special_slide_portion', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_portion', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('create_special_slide_portion', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('create_special_slide_portion', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->create_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_portion', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_portion', 'sub_shape', 'string');
    }
};

#
# create_special_slide_shape test
#
subtest 'create_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $utils->initialize('create_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        fail("create_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'create_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_special_slide_shape', 'name', $params{ name }, 'string');
    $utils->initialize('create_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'name', 'string');
    }
};

subtest 'create_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_special_slide_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'slide_index', 'int');
    }
};

subtest 'create_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('create_special_slide_shape', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('create_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'slide_type', 'string');
    }
};

subtest 'create_special_slide_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_special_slide_shape', 'dto', $params{ dto }, 'ShapeBase');
    $utils->initialize('create_special_slide_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'dto', $params{ dto }, 'ShapeBase', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'dto', 'ShapeBase');
    }
};

subtest 'create_special_slide_shape invalid shape_to_clone' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ shape_to_clone } = $utils->invalidize_param_value('create_special_slide_shape', 'shape_to_clone', $params{ shape_to_clone }, 'int');
    $utils->initialize('create_special_slide_shape', 'shape_to_clone', $params{ shape_to_clone });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'shape_to_clone', $params{ shape_to_clone }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'shape_to_clone', 'int');
    }
};

subtest 'create_special_slide_shape invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_special_slide_shape', 'position', $params{ position }, 'int');
    $utils->initialize('create_special_slide_shape', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'position', 'int');
    }
};

subtest 'create_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_special_slide_shape', 'password', $params{ password }, 'string');
    $utils->initialize('create_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'password', 'string');
    }
};

subtest 'create_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_special_slide_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'folder', 'string');
    }
};

subtest 'create_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_special_slide_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'storage', 'string');
    }
};

subtest 'create_special_slide_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('create_special_slide_shape', 'slide_type', 'string'), 'dto' => $utils->get_param_value('create_special_slide_shape', 'dto', 'ShapeBase'), 'shape_to_clone' => $utils->get_param_value('create_special_slide_shape', 'shape_to_clone', 'int'), 'position' => $utils->get_param_value('create_special_slide_shape', 'position', 'int'), 'password' => $utils->get_param_value('create_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('create_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('create_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('create_special_slide_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('create_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('create_special_slide_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->create_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('create_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('create_special_slide_shape', 'sub_shape', 'string');
    }
};

#
# create_table_cell_paragraph test
#
subtest 'create_table_cell_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $utils->initialize('create_table_cell_paragraph', '');
    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        fail("create_table_cell_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'create_table_cell_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_table_cell_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('create_table_cell_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_cell_paragraph', 'name', 'string');
    }
};

subtest 'create_table_cell_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_table_cell_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_table_cell_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_cell_paragraph', 'slide_index', 'int');
    }
};

subtest 'create_table_cell_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_table_cell_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_table_cell_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_cell_paragraph', 'shape_index', 'int');
    }
};

subtest 'create_table_cell_paragraph invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('create_table_cell_paragraph', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('create_table_cell_paragraph', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_paragraph', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_cell_paragraph', 'row_index', 'int');
    }
};

subtest 'create_table_cell_paragraph invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('create_table_cell_paragraph', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('create_table_cell_paragraph', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_paragraph', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_cell_paragraph', 'cell_index', 'int');
    }
};

subtest 'create_table_cell_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_table_cell_paragraph', 'dto', $params{ dto }, 'Paragraph');
    $utils->initialize('create_table_cell_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_paragraph', 'dto', $params{ dto }, 'Paragraph', $@);
    } else {
        $utils->assert_no_error('create_table_cell_paragraph', 'dto', 'Paragraph');
    }
};

subtest 'create_table_cell_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_table_cell_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('create_table_cell_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_cell_paragraph', 'password', 'string');
    }
};

subtest 'create_table_cell_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_table_cell_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_table_cell_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_cell_paragraph', 'folder', 'string');
    }
};

subtest 'create_table_cell_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_paragraph', 'cell_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('create_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_table_cell_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_table_cell_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_cell_paragraph', 'storage', 'string');
    }
};

#
# create_table_cell_portion test
#
subtest 'create_table_cell_portion' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $utils->initialize('create_table_cell_portion', '');
    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        fail("create_table_cell_portion raised an exception: $@");
    }
    pass();
};

subtest 'create_table_cell_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_table_cell_portion', 'name', $params{ name }, 'string');
    $utils->initialize('create_table_cell_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'name', 'string');
    }
};

subtest 'create_table_cell_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_table_cell_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_table_cell_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'slide_index', 'int');
    }
};

subtest 'create_table_cell_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_table_cell_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_table_cell_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'shape_index', 'int');
    }
};

subtest 'create_table_cell_portion invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('create_table_cell_portion', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('create_table_cell_portion', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'row_index', 'int');
    }
};

subtest 'create_table_cell_portion invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('create_table_cell_portion', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('create_table_cell_portion', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'cell_index', 'int');
    }
};

subtest 'create_table_cell_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('create_table_cell_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('create_table_cell_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'paragraph_index', 'int');
    }
};

subtest 'create_table_cell_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_table_cell_portion', 'dto', $params{ dto }, 'Portion');
    $utils->initialize('create_table_cell_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'dto', $params{ dto }, 'Portion', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'dto', 'Portion');
    }
};

subtest 'create_table_cell_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_table_cell_portion', 'password', $params{ password }, 'string');
    $utils->initialize('create_table_cell_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'password', 'string');
    }
};

subtest 'create_table_cell_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_table_cell_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_table_cell_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'folder', 'string');
    }
};

subtest 'create_table_cell_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('create_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('create_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('create_table_cell_portion', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('create_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('create_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_cell_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_table_cell_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_table_cell_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_cell_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_cell_portion', 'storage', 'string');
    }
};

#
# create_table_row test
#
subtest 'create_table_row' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_row', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_table_row', 'dto', 'TableRow'), 'position' => $utils->get_param_value('create_table_row', 'position', 'int'), 'password' => $utils->get_param_value('create_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_row', 'storage', 'string'));
    $utils->initialize('create_table_row', '');
    eval {
        my $result = $utils->{api}->create_table_row(%params);
    };
    if ($@) {
        fail("create_table_row raised an exception: $@");
    }
    pass();
};

subtest 'create_table_row invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_row', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_table_row', 'dto', 'TableRow'), 'position' => $utils->get_param_value('create_table_row', 'position', 'int'), 'password' => $utils->get_param_value('create_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_row', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_table_row', 'name', $params{ name }, 'string');
    $utils->initialize('create_table_row', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_row', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_row', 'name', 'string');
    }
};

subtest 'create_table_row invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_row', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_table_row', 'dto', 'TableRow'), 'position' => $utils->get_param_value('create_table_row', 'position', 'int'), 'password' => $utils->get_param_value('create_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_row', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('create_table_row', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('create_table_row', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->create_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_row', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_row', 'slide_index', 'int');
    }
};

subtest 'create_table_row invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_row', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_table_row', 'dto', 'TableRow'), 'position' => $utils->get_param_value('create_table_row', 'position', 'int'), 'password' => $utils->get_param_value('create_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_row', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('create_table_row', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('create_table_row', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->create_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_row', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_row', 'shape_index', 'int');
    }
};

subtest 'create_table_row invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_row', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_table_row', 'dto', 'TableRow'), 'position' => $utils->get_param_value('create_table_row', 'position', 'int'), 'password' => $utils->get_param_value('create_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_row', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('create_table_row', 'dto', $params{ dto }, 'TableRow');
    $utils->initialize('create_table_row', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->create_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_row', 'dto', $params{ dto }, 'TableRow', $@);
    } else {
        $utils->assert_no_error('create_table_row', 'dto', 'TableRow');
    }
};

subtest 'create_table_row invalid position' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_row', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_table_row', 'dto', 'TableRow'), 'position' => $utils->get_param_value('create_table_row', 'position', 'int'), 'password' => $utils->get_param_value('create_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_row', 'storage', 'string'));
    $params{ position } = $utils->invalidize_param_value('create_table_row', 'position', $params{ position }, 'int');
    $utils->initialize('create_table_row', 'position', $params{ position });

    eval {
        my $result = $utils->{api}->create_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_row', 'position', $params{ position }, 'int', $@);
    } else {
        $utils->assert_no_error('create_table_row', 'position', 'int');
    }
};

subtest 'create_table_row invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_row', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_table_row', 'dto', 'TableRow'), 'position' => $utils->get_param_value('create_table_row', 'position', 'int'), 'password' => $utils->get_param_value('create_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_row', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_table_row', 'password', $params{ password }, 'string');
    $utils->initialize('create_table_row', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_row', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_row', 'password', 'string');
    }
};

subtest 'create_table_row invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_row', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_table_row', 'dto', 'TableRow'), 'position' => $utils->get_param_value('create_table_row', 'position', 'int'), 'password' => $utils->get_param_value('create_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_row', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_table_row', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_table_row', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_row', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_row', 'folder', 'string');
    }
};

subtest 'create_table_row invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('create_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('create_table_row', 'shape_index', 'int'), 'dto' => $utils->get_param_value('create_table_row', 'dto', 'TableRow'), 'position' => $utils->get_param_value('create_table_row', 'position', 'int'), 'password' => $utils->get_param_value('create_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('create_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('create_table_row', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_table_row', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_table_row', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('create_table_row', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_table_row', 'storage', 'string');
    }
};

#
# create_vba_module test
#
subtest 'create_vba_module' => sub {
    my %params = ('name' => $utils->get_param_value('create_vba_module', 'name', 'string'), 'module_dto' => $utils->get_param_value('create_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('create_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('create_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('create_vba_module', 'storage', 'string'));
    $utils->initialize('create_vba_module', '');
    eval {
        my $result = $utils->{api}->create_vba_module(%params);
    };
    if ($@) {
        fail("create_vba_module raised an exception: $@");
    }
    pass();
};

subtest 'create_vba_module invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_vba_module', 'name', 'string'), 'module_dto' => $utils->get_param_value('create_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('create_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('create_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('create_vba_module', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_vba_module', 'name', $params{ name }, 'string');
    $utils->initialize('create_vba_module', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('create_vba_module', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_vba_module', 'name', 'string');
    }
};

subtest 'create_vba_module invalid module_dto' => sub {
    my %params = ('name' => $utils->get_param_value('create_vba_module', 'name', 'string'), 'module_dto' => $utils->get_param_value('create_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('create_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('create_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('create_vba_module', 'storage', 'string'));
    $params{ module_dto } = $utils->invalidize_param_value('create_vba_module', 'module_dto', $params{ module_dto }, 'VbaModule');
    $utils->initialize('create_vba_module', 'module_dto', $params{ module_dto });

    eval {
        my $result = $utils->{api}->create_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('create_vba_module', 'module_dto', $params{ module_dto }, 'VbaModule', $@);
    } else {
        $utils->assert_no_error('create_vba_module', 'module_dto', 'VbaModule');
    }
};

subtest 'create_vba_module invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_vba_module', 'name', 'string'), 'module_dto' => $utils->get_param_value('create_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('create_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('create_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('create_vba_module', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_vba_module', 'password', $params{ password }, 'string');
    $utils->initialize('create_vba_module', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('create_vba_module', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_vba_module', 'password', 'string');
    }
};

subtest 'create_vba_module invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_vba_module', 'name', 'string'), 'module_dto' => $utils->get_param_value('create_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('create_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('create_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('create_vba_module', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_vba_module', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_vba_module', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('create_vba_module', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_vba_module', 'folder', 'string');
    }
};

subtest 'create_vba_module invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_vba_module', 'name', 'string'), 'module_dto' => $utils->get_param_value('create_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('create_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('create_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('create_vba_module', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_vba_module', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_vba_module', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('create_vba_module', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_vba_module', 'storage', 'string');
    }
};

#
# create_watermark test
#
subtest 'create_watermark' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $utils->initialize('create_watermark', '');
    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        fail("create_watermark raised an exception: $@");
    }
    pass();
};

subtest 'create_watermark invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('create_watermark', 'name', $params{ name }, 'string');
    $utils->initialize('create_watermark', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark', 'name', 'string');
    }
};

subtest 'create_watermark invalid shape' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ shape } = $utils->invalidize_param_value('create_watermark', 'shape', $params{ shape }, 'Shape');
    $utils->initialize('create_watermark', 'shape', $params{ shape });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'shape', $params{ shape }, 'Shape', $@);
    } else {
        $utils->assert_no_error('create_watermark', 'shape', 'Shape');
    }
};

subtest 'create_watermark invalid font_height' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ font_height } = $utils->invalidize_param_value('create_watermark', 'font_height', $params{ font_height }, 'double');
    $utils->initialize('create_watermark', 'font_height', $params{ font_height });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'font_height', $params{ font_height }, 'double', $@);
    } else {
        $utils->assert_no_error('create_watermark', 'font_height', 'double');
    }
};

subtest 'create_watermark invalid text' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ text } = $utils->invalidize_param_value('create_watermark', 'text', $params{ text }, 'string');
    $utils->initialize('create_watermark', 'text', $params{ text });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'text', $params{ text }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark', 'text', 'string');
    }
};

subtest 'create_watermark invalid font_name' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ font_name } = $utils->invalidize_param_value('create_watermark', 'font_name', $params{ font_name }, 'string');
    $utils->initialize('create_watermark', 'font_name', $params{ font_name });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'font_name', $params{ font_name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark', 'font_name', 'string');
    }
};

subtest 'create_watermark invalid font_color' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ font_color } = $utils->invalidize_param_value('create_watermark', 'font_color', $params{ font_color }, 'string');
    $utils->initialize('create_watermark', 'font_color', $params{ font_color });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'font_color', $params{ font_color }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark', 'font_color', 'string');
    }
};

subtest 'create_watermark invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_watermark', 'password', $params{ password }, 'string');
    $utils->initialize('create_watermark', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark', 'password', 'string');
    }
};

subtest 'create_watermark invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('create_watermark', 'folder', $params{ folder }, 'string');
    $utils->initialize('create_watermark', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark', 'folder', 'string');
    }
};

subtest 'create_watermark invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('create_watermark', 'name', 'string'), 'shape' => $utils->get_param_value('create_watermark', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('create_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('create_watermark', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('create_watermark', 'storage', $params{ storage }, 'string');
    $utils->initialize('create_watermark', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->create_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark', 'storage', 'string');
    }
};

#
# create_watermark_online test
#
subtest 'create_watermark_online' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $utils->initialize('create_watermark_online', '');
    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        fail("create_watermark_online raised an exception: $@");
    }
    pass();
};

subtest 'create_watermark_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('create_watermark_online', 'document', $params{ document }, 'File');
    $utils->initialize('create_watermark_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'document', 'File');
    }
};

subtest 'create_watermark_online invalid shape' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ shape } = $utils->invalidize_param_value('create_watermark_online', 'shape', $params{ shape }, 'Shape');
    $utils->initialize('create_watermark_online', 'shape', $params{ shape });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'shape', $params{ shape }, 'Shape', $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'shape', 'Shape');
    }
};

subtest 'create_watermark_online invalid font_height' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ font_height } = $utils->invalidize_param_value('create_watermark_online', 'font_height', $params{ font_height }, 'double');
    $utils->initialize('create_watermark_online', 'font_height', $params{ font_height });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'font_height', $params{ font_height }, 'double', $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'font_height', 'double');
    }
};

subtest 'create_watermark_online invalid text' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ text } = $utils->invalidize_param_value('create_watermark_online', 'text', $params{ text }, 'string');
    $utils->initialize('create_watermark_online', 'text', $params{ text });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'text', $params{ text }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'text', 'string');
    }
};

subtest 'create_watermark_online invalid font_name' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ font_name } = $utils->invalidize_param_value('create_watermark_online', 'font_name', $params{ font_name }, 'string');
    $utils->initialize('create_watermark_online', 'font_name', $params{ font_name });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'font_name', $params{ font_name }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'font_name', 'string');
    }
};

subtest 'create_watermark_online invalid font_color' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ font_color } = $utils->invalidize_param_value('create_watermark_online', 'font_color', $params{ font_color }, 'string');
    $utils->initialize('create_watermark_online', 'font_color', $params{ font_color });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'font_color', $params{ font_color }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'font_color', 'string');
    }
};

subtest 'create_watermark_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('create_watermark_online', 'document', 'File'), 'shape' => $utils->get_param_value('create_watermark_online', 'shape', 'Shape'), 'font_height' => $utils->get_param_value('create_watermark_online', 'font_height', 'double'), 'text' => $utils->get_param_value('create_watermark_online', 'text', 'string'), 'font_name' => $utils->get_param_value('create_watermark_online', 'font_name', 'string'), 'font_color' => $utils->get_param_value('create_watermark_online', 'font_color', 'string'), 'password' => $utils->get_param_value('create_watermark_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('create_watermark_online', 'password', $params{ password }, 'string');
    $utils->initialize('create_watermark_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->create_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('create_watermark_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('create_watermark_online', 'password', 'string');
    }
};

#
# delete_animation test
#
subtest 'delete_animation' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $utils->initialize('delete_animation', '');
    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        fail("delete_animation raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation', 'name', $params{ name }, 'string');
    $utils->initialize('delete_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation', 'name', 'string');
    }
};

subtest 'delete_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation', 'slide_index', 'int');
    }
};

subtest 'delete_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation', 'password', $params{ password }, 'string');
    $utils->initialize('delete_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation', 'password', 'string');
    }
};

subtest 'delete_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation', 'folder', 'string');
    }
};

subtest 'delete_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation', 'storage', 'string');
    }
};

#
# delete_animation_effect test
#
subtest 'delete_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $utils->initialize('delete_animation_effect', '');
    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        fail("delete_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_effect', 'name', $params{ name }, 'string');
    $utils->initialize('delete_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'name', 'string');
    }
};

subtest 'delete_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'slide_index', 'int');
    }
};

subtest 'delete_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_animation_effect', 'effect_index', $params{ effect_index }, 'int');
    $utils->initialize('delete_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'effect_index', $params{ effect_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'effect_index', 'int');
    }
};

subtest 'delete_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_effect', 'password', $params{ password }, 'string');
    $utils->initialize('delete_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'password', 'string');
    }
};

subtest 'delete_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'folder', 'string');
    }
};

subtest 'delete_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_effect', 'storage', 'string');
    }
};

#
# delete_animation_interactive_sequence test
#
subtest 'delete_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('delete_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("delete_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'name', $params{ name }, 'string');
    $utils->initialize('delete_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'name', 'string');
    }
};

subtest 'delete_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'slide_index', 'int');
    }
};

subtest 'delete_animation_interactive_sequence invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'sequence_index', $params{ sequence_index }, 'int');
    $utils->initialize('delete_animation_interactive_sequence', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'sequence_index', $params{ sequence_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'sequence_index', 'int');
    }
};

subtest 'delete_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'password', $params{ password }, 'string');
    $utils->initialize('delete_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'password', 'string');
    }
};

subtest 'delete_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'folder', 'string');
    }
};

subtest 'delete_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_interactive_sequence', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence', 'storage', 'string');
    }
};

#
# delete_animation_interactive_sequence_effect test
#
subtest 'delete_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('delete_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("delete_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'name', $params{ name }, 'string');
    $utils->initialize('delete_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'name', 'string');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'slide_index', 'int');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int');
    $utils->initialize('delete_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'sequence_index', 'int');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, 'int');
    $utils->initialize('delete_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'effect_index', 'int');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'password', $params{ password }, 'string');
    $utils->initialize('delete_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'password', 'string');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'folder', 'string');
    }
};

subtest 'delete_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequence_effect', 'storage', 'string');
    }
};

#
# delete_animation_interactive_sequences test
#
subtest 'delete_animation_interactive_sequences' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $utils->initialize('delete_animation_interactive_sequences', '');
    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        fail("delete_animation_interactive_sequences raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_interactive_sequences invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'name', $params{ name }, 'string');
    $utils->initialize('delete_animation_interactive_sequences', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'name', 'string');
    }
};

subtest 'delete_animation_interactive_sequences invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_animation_interactive_sequences', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'slide_index', 'int');
    }
};

subtest 'delete_animation_interactive_sequences invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'password', $params{ password }, 'string');
    $utils->initialize('delete_animation_interactive_sequences', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'password', 'string');
    }
};

subtest 'delete_animation_interactive_sequences invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_animation_interactive_sequences', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'folder', 'string');
    }
};

subtest 'delete_animation_interactive_sequences invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_interactive_sequences', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_interactive_sequences', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_interactive_sequences', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_animation_interactive_sequences', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_interactive_sequences', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_interactive_sequences', 'storage', 'string');
    }
};

#
# delete_animation_main_sequence test
#
subtest 'delete_animation_main_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $utils->initialize('delete_animation_main_sequence', '');
    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        fail("delete_animation_main_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_animation_main_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_animation_main_sequence', 'name', $params{ name }, 'string');
    $utils->initialize('delete_animation_main_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'name', 'string');
    }
};

subtest 'delete_animation_main_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_animation_main_sequence', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_animation_main_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'slide_index', 'int');
    }
};

subtest 'delete_animation_main_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_animation_main_sequence', 'password', $params{ password }, 'string');
    $utils->initialize('delete_animation_main_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'password', 'string');
    }
};

subtest 'delete_animation_main_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_animation_main_sequence', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_animation_main_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'folder', 'string');
    }
};

subtest 'delete_animation_main_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_animation_main_sequence', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_animation_main_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_animation_main_sequence', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_animation_main_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_animation_main_sequence', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_animation_main_sequence', 'storage', 'string');
    }
};

#
# delete_background test
#
subtest 'delete_background' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $utils->initialize('delete_background', '');
    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        fail("delete_background raised an exception: $@");
    }
    pass();
};

subtest 'delete_background invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_background', 'name', $params{ name }, 'string');
    $utils->initialize('delete_background', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_background', 'name', 'string');
    }
};

subtest 'delete_background invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_background', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_background', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_background', 'slide_index', 'int');
    }
};

subtest 'delete_background invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_background', 'password', $params{ password }, 'string');
    $utils->initialize('delete_background', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_background', 'password', 'string');
    }
};

subtest 'delete_background invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_background', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_background', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_background', 'folder', 'string');
    }
};

subtest 'delete_background invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_background', 'password', 'string'), 'folder' => $utils->get_param_value('delete_background', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_background', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_background', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_background', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_background(%params);
    };
    if ($@) {
        $utils->assert_error('delete_background', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_background', 'storage', 'string');
    }
};

#
# delete_chart_category test
#
subtest 'delete_chart_category' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $utils->initialize('delete_chart_category', '');
    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        fail("delete_chart_category raised an exception: $@");
    }
    pass();
};

subtest 'delete_chart_category invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_chart_category', 'name', $params{ name }, 'string');
    $utils->initialize('delete_chart_category', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'name', 'string');
    }
};

subtest 'delete_chart_category invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_chart_category', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_chart_category', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'slide_index', 'int');
    }
};

subtest 'delete_chart_category invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_chart_category', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_chart_category', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'shape_index', 'int');
    }
};

subtest 'delete_chart_category invalid category_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ category_index } = $utils->invalidize_param_value('delete_chart_category', 'category_index', $params{ category_index }, 'int');
    $utils->initialize('delete_chart_category', 'category_index', $params{ category_index });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'category_index', $params{ category_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'category_index', 'int');
    }
};

subtest 'delete_chart_category invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_chart_category', 'password', $params{ password }, 'string');
    $utils->initialize('delete_chart_category', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'password', 'string');
    }
};

subtest 'delete_chart_category invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_chart_category', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_chart_category', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'folder', 'string');
    }
};

subtest 'delete_chart_category invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('delete_chart_category', 'category_index', 'int'), 'password' => $utils->get_param_value('delete_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_category', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_chart_category', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_chart_category', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_category', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_category', 'storage', 'string');
    }
};

#
# delete_chart_data_point test
#
subtest 'delete_chart_data_point' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $utils->initialize('delete_chart_data_point', '');
    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        fail("delete_chart_data_point raised an exception: $@");
    }
    pass();
};

subtest 'delete_chart_data_point invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_chart_data_point', 'name', $params{ name }, 'string');
    $utils->initialize('delete_chart_data_point', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'name', 'string');
    }
};

subtest 'delete_chart_data_point invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_chart_data_point', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_chart_data_point', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'slide_index', 'int');
    }
};

subtest 'delete_chart_data_point invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_chart_data_point', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_chart_data_point', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'shape_index', 'int');
    }
};

subtest 'delete_chart_data_point invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('delete_chart_data_point', 'series_index', $params{ series_index }, 'int');
    $utils->initialize('delete_chart_data_point', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'series_index', $params{ series_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'series_index', 'int');
    }
};

subtest 'delete_chart_data_point invalid point_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ point_index } = $utils->invalidize_param_value('delete_chart_data_point', 'point_index', $params{ point_index }, 'int');
    $utils->initialize('delete_chart_data_point', 'point_index', $params{ point_index });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'point_index', $params{ point_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'point_index', 'int');
    }
};

subtest 'delete_chart_data_point invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_chart_data_point', 'password', $params{ password }, 'string');
    $utils->initialize('delete_chart_data_point', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'password', 'string');
    }
};

subtest 'delete_chart_data_point invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_chart_data_point', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_chart_data_point', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'folder', 'string');
    }
};

subtest 'delete_chart_data_point invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('delete_chart_data_point', 'point_index', 'int'), 'password' => $utils->get_param_value('delete_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_data_point', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_chart_data_point', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_chart_data_point', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_data_point', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_data_point', 'storage', 'string');
    }
};

#
# delete_chart_series test
#
subtest 'delete_chart_series' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $utils->initialize('delete_chart_series', '');
    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        fail("delete_chart_series raised an exception: $@");
    }
    pass();
};

subtest 'delete_chart_series invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_chart_series', 'name', $params{ name }, 'string');
    $utils->initialize('delete_chart_series', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'name', 'string');
    }
};

subtest 'delete_chart_series invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_chart_series', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_chart_series', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'slide_index', 'int');
    }
};

subtest 'delete_chart_series invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_chart_series', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_chart_series', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'shape_index', 'int');
    }
};

subtest 'delete_chart_series invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('delete_chart_series', 'series_index', $params{ series_index }, 'int');
    $utils->initialize('delete_chart_series', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'series_index', $params{ series_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'series_index', 'int');
    }
};

subtest 'delete_chart_series invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_chart_series', 'password', $params{ password }, 'string');
    $utils->initialize('delete_chart_series', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'password', 'string');
    }
};

subtest 'delete_chart_series invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_chart_series', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_chart_series', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'folder', 'string');
    }
};

subtest 'delete_chart_series invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('delete_chart_series', 'series_index', 'int'), 'password' => $utils->get_param_value('delete_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('delete_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_chart_series', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_chart_series', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_chart_series', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('delete_chart_series', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_chart_series', 'storage', 'string');
    }
};

#
# delete_comments test
#
subtest 'delete_comments' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $utils->initialize('delete_comments', '');
    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        fail("delete_comments raised an exception: $@");
    }
    pass();
};

subtest 'delete_comments invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_comments', 'name', $params{ name }, 'string');
    $utils->initialize('delete_comments', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_comments', 'name', 'string');
    }
};

subtest 'delete_comments invalid author' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ author } = $utils->invalidize_param_value('delete_comments', 'author', $params{ author }, 'string');
    $utils->initialize('delete_comments', 'author', $params{ author });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'author', $params{ author }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_comments', 'author', 'string');
    }
};

subtest 'delete_comments invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_comments', 'password', $params{ password }, 'string');
    $utils->initialize('delete_comments', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_comments', 'password', 'string');
    }
};

subtest 'delete_comments invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_comments', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_comments', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_comments', 'folder', 'string');
    }
};

subtest 'delete_comments invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_comments', 'name', 'string'), 'author' => $utils->get_param_value('delete_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_comments', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_comments', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_comments', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_comments', 'storage', 'string');
    }
};

#
# delete_comments_online test
#
subtest 'delete_comments_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_comments_online', 'document', 'File'), 'author' => $utils->get_param_value('delete_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments_online', 'password', 'string'));
    $utils->initialize('delete_comments_online', '');
    eval {
        my $result = $utils->{api}->delete_comments_online(%params);
    };
    if ($@) {
        fail("delete_comments_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_comments_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_comments_online', 'document', 'File'), 'author' => $utils->get_param_value('delete_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_comments_online', 'document', $params{ document }, 'File');
    $utils->initialize('delete_comments_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('delete_comments_online', 'document', 'File');
    }
};

subtest 'delete_comments_online invalid author' => sub {
    my %params = ('document' => $utils->get_param_value('delete_comments_online', 'document', 'File'), 'author' => $utils->get_param_value('delete_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments_online', 'password', 'string'));
    $params{ author } = $utils->invalidize_param_value('delete_comments_online', 'author', $params{ author }, 'string');
    $utils->initialize('delete_comments_online', 'author', $params{ author });

    eval {
        my $result = $utils->{api}->delete_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments_online', 'author', $params{ author }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_comments_online', 'author', 'string');
    }
};

subtest 'delete_comments_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_comments_online', 'document', 'File'), 'author' => $utils->get_param_value('delete_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_comments_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_comments_online', 'password', $params{ password }, 'string');
    $utils->initialize('delete_comments_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_comments_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_comments_online', 'password', 'string');
    }
};

#
# delete_document_properties test
#
subtest 'delete_document_properties' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $utils->initialize('delete_document_properties', '');
    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        fail("delete_document_properties raised an exception: $@");
    }
    pass();
};

subtest 'delete_document_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_document_properties', 'name', $params{ name }, 'string');
    $utils->initialize('delete_document_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_document_properties', 'name', 'string');
    }
};

subtest 'delete_document_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_document_properties', 'password', $params{ password }, 'string');
    $utils->initialize('delete_document_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_document_properties', 'password', 'string');
    }
};

subtest 'delete_document_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_document_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_document_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_document_properties', 'folder', 'string');
    }
};

subtest 'delete_document_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('delete_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_document_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_document_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_document_properties', 'storage', 'string');
    }
};

#
# delete_document_property test
#
subtest 'delete_document_property' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $utils->initialize('delete_document_property', '');
    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        fail("delete_document_property raised an exception: $@");
    }
    pass();
};

subtest 'delete_document_property invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_document_property', 'name', $params{ name }, 'string');
    $utils->initialize('delete_document_property', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'name', 'string');
    }
};

subtest 'delete_document_property invalid property_name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ property_name } = $utils->invalidize_param_value('delete_document_property', 'property_name', $params{ property_name }, 'string');
    $utils->initialize('delete_document_property', 'property_name', $params{ property_name });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'property_name', $params{ property_name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'property_name', 'string');
    }
};

subtest 'delete_document_property invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_document_property', 'password', $params{ password }, 'string');
    $utils->initialize('delete_document_property', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'password', 'string');
    }
};

subtest 'delete_document_property invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_document_property', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_document_property', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'folder', 'string');
    }
};

subtest 'delete_document_property invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('delete_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('delete_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('delete_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_document_property', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_document_property', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_document_property', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('delete_document_property', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_document_property', 'storage', 'string');
    }
};

#
# delete_embedded_font test
#
subtest 'delete_embedded_font' => sub {
    my %params = ('name' => $utils->get_param_value('delete_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('delete_embedded_font', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('delete_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_embedded_font', 'storage', 'string'));
    $utils->initialize('delete_embedded_font', '');
    eval {
        my $result = $utils->{api}->delete_embedded_font(%params);
    };
    if ($@) {
        fail("delete_embedded_font raised an exception: $@");
    }
    pass();
};

subtest 'delete_embedded_font invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('delete_embedded_font', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('delete_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_embedded_font', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_embedded_font', 'name', $params{ name }, 'string');
    $utils->initialize('delete_embedded_font', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('delete_embedded_font', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_embedded_font', 'name', 'string');
    }
};

subtest 'delete_embedded_font invalid font_name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('delete_embedded_font', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('delete_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_embedded_font', 'storage', 'string'));
    $params{ font_name } = $utils->invalidize_param_value('delete_embedded_font', 'font_name', $params{ font_name }, 'string');
    $utils->initialize('delete_embedded_font', 'font_name', $params{ font_name });

    eval {
        my $result = $utils->{api}->delete_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('delete_embedded_font', 'font_name', $params{ font_name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_embedded_font', 'font_name', 'string');
    }
};

subtest 'delete_embedded_font invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('delete_embedded_font', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('delete_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_embedded_font', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_embedded_font', 'password', $params{ password }, 'string');
    $utils->initialize('delete_embedded_font', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('delete_embedded_font', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_embedded_font', 'password', 'string');
    }
};

subtest 'delete_embedded_font invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('delete_embedded_font', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('delete_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_embedded_font', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_embedded_font', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_embedded_font', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('delete_embedded_font', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_embedded_font', 'folder', 'string');
    }
};

subtest 'delete_embedded_font invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('delete_embedded_font', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('delete_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_embedded_font', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_embedded_font', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_embedded_font', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('delete_embedded_font', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_embedded_font', 'storage', 'string');
    }
};

#
# delete_embedded_font_online test
#
subtest 'delete_embedded_font_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('delete_embedded_font_online', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font_online', 'password', 'string'));
    $utils->initialize('delete_embedded_font_online', '');
    eval {
        my $result = $utils->{api}->delete_embedded_font_online(%params);
    };
    if ($@) {
        fail("delete_embedded_font_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_embedded_font_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('delete_embedded_font_online', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_embedded_font_online', 'document', $params{ document }, 'File');
    $utils->initialize('delete_embedded_font_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_embedded_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_embedded_font_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('delete_embedded_font_online', 'document', 'File');
    }
};

subtest 'delete_embedded_font_online invalid font_name' => sub {
    my %params = ('document' => $utils->get_param_value('delete_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('delete_embedded_font_online', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font_online', 'password', 'string'));
    $params{ font_name } = $utils->invalidize_param_value('delete_embedded_font_online', 'font_name', $params{ font_name }, 'string');
    $utils->initialize('delete_embedded_font_online', 'font_name', $params{ font_name });

    eval {
        my $result = $utils->{api}->delete_embedded_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_embedded_font_online', 'font_name', $params{ font_name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_embedded_font_online', 'font_name', 'string');
    }
};

subtest 'delete_embedded_font_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('delete_embedded_font_online', 'font_name', 'string'), 'password' => $utils->get_param_value('delete_embedded_font_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_embedded_font_online', 'password', $params{ password }, 'string');
    $utils->initialize('delete_embedded_font_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_embedded_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_embedded_font_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_embedded_font_online', 'password', 'string');
    }
};

#
# delete_file test
#
subtest 'delete_file' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $utils->initialize('delete_file', '');
    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        fail("delete_file raised an exception: $@");
    }
    pass();
};

subtest 'delete_file invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $params{ path } = $utils->invalidize_param_value('delete_file', 'path', $params{ path }, 'string');
    $utils->initialize('delete_file', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        $utils->assert_error('delete_file', 'path', $params{ path }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_file', 'path', 'string');
    }
};

subtest 'delete_file invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('delete_file', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('delete_file', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        $utils->assert_error('delete_file', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_file', 'storage_name', 'string');
    }
};

subtest 'delete_file invalid version_id' => sub {
    my %params = ('path' => $utils->get_param_value('delete_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('delete_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('delete_file', 'version_id', $params{ version_id }, 'string');
    $utils->initialize('delete_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->delete_file(%params);
    };
    if ($@) {
        $utils->assert_error('delete_file', 'version_id', $params{ version_id }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_file', 'version_id', 'string');
    }
};

#
# delete_folder test
#
subtest 'delete_folder' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $utils->initialize('delete_folder', '');
    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        fail("delete_folder raised an exception: $@");
    }
    pass();
};

subtest 'delete_folder invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $params{ path } = $utils->invalidize_param_value('delete_folder', 'path', $params{ path }, 'string');
    $utils->initialize('delete_folder', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        $utils->assert_error('delete_folder', 'path', $params{ path }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_folder', 'path', 'string');
    }
};

subtest 'delete_folder invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $params{ storage_name } = $utils->invalidize_param_value('delete_folder', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('delete_folder', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        $utils->assert_error('delete_folder', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_folder', 'storage_name', 'string');
    }
};

subtest 'delete_folder invalid recursive' => sub {
    my %params = ('path' => $utils->get_param_value('delete_folder', 'path', 'string'), 'storage_name' => $utils->get_param_value('delete_folder', 'storage_name', 'string'), 'recursive' => $utils->get_param_value('delete_folder', 'recursive', 'boolean'));
    $params{ recursive } = $utils->invalidize_param_value('delete_folder', 'recursive', $params{ recursive }, 'boolean');
    $utils->initialize('delete_folder', 'recursive', $params{ recursive });

    eval {
        my $result = $utils->{api}->delete_folder(%params);
    };
    if ($@) {
        $utils->assert_error('delete_folder', 'recursive', $params{ recursive }, 'boolean', $@);
    } else {
        $utils->assert_no_error('delete_folder', 'recursive', 'boolean');
    }
};

#
# delete_notes_slide test
#
subtest 'delete_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $utils->initialize('delete_notes_slide', '');
    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        fail("delete_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'delete_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_notes_slide', 'name', $params{ name }, 'string');
    $utils->initialize('delete_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'name', 'string');
    }
};

subtest 'delete_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_notes_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'slide_index', 'int');
    }
};

subtest 'delete_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_notes_slide', 'password', $params{ password }, 'string');
    $utils->initialize('delete_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'password', 'string');
    }
};

subtest 'delete_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_notes_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'folder', 'string');
    }
};

subtest 'delete_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_notes_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_notes_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_notes_slide', 'storage', 'string');
    }
};

#
# delete_paragraph test
#
subtest 'delete_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraph', 'sub_shape', 'string'));
    $utils->initialize('delete_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        fail("delete_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraph', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('delete_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'name', 'string');
    }
};

subtest 'delete_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraph', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'slide_index', 'int');
    }
};

subtest 'delete_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraph', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'shape_index', 'int');
    }
};

subtest 'delete_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraph', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('delete_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'paragraph_index', 'int');
    }
};

subtest 'delete_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraph', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('delete_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'password', 'string');
    }
};

subtest 'delete_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraph', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'folder', 'string');
    }
};

subtest 'delete_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraph', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'storage', 'string');
    }
};

subtest 'delete_paragraph invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraph', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_paragraph', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_paragraph', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraph', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraph', 'sub_shape', 'string');
    }
};

#
# delete_paragraphs test
#
subtest 'delete_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraphs', 'sub_shape', 'string'));
    $utils->initialize('delete_paragraphs', '');
    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        fail("delete_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'delete_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraphs', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_paragraphs', 'name', $params{ name }, 'string');
    $utils->initialize('delete_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'name', 'string');
    }
};

subtest 'delete_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraphs', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_paragraphs', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'slide_index', 'int');
    }
};

subtest 'delete_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraphs', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_paragraphs', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'shape_index', 'int');
    }
};

subtest 'delete_paragraphs invalid paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraphs', 'sub_shape', 'string'));
    $params{ paragraphs } = $utils->invalidize_param_value('delete_paragraphs', 'paragraphs', $params{ paragraphs }, 'int[]');
    $utils->initialize('delete_paragraphs', 'paragraphs', $params{ paragraphs });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'paragraphs', $params{ paragraphs }, 'int[]', $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'paragraphs', 'int[]');
    }
};

subtest 'delete_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraphs', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_paragraphs', 'password', $params{ password }, 'string');
    $utils->initialize('delete_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'password', 'string');
    }
};

subtest 'delete_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraphs', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_paragraphs', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'folder', 'string');
    }
};

subtest 'delete_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraphs', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_paragraphs', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'storage', 'string');
    }
};

subtest 'delete_paragraphs invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_paragraphs', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_paragraphs', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_paragraphs', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_paragraphs', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_paragraphs', 'sub_shape', 'string');
    }
};

#
# delete_portion test
#
subtest 'delete_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $utils->initialize('delete_portion', '');
    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        fail("delete_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_portion', 'name', $params{ name }, 'string');
    $utils->initialize('delete_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portion', 'name', 'string');
    }
};

subtest 'delete_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_portion', 'slide_index', 'int');
    }
};

subtest 'delete_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_portion', 'shape_index', 'int');
    }
};

subtest 'delete_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('delete_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_portion', 'paragraph_index', 'int');
    }
};

subtest 'delete_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_portion', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('delete_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_portion', 'portion_index', 'int');
    }
};

subtest 'delete_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_portion', 'password', $params{ password }, 'string');
    $utils->initialize('delete_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portion', 'password', 'string');
    }
};

subtest 'delete_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portion', 'folder', 'string');
    }
};

subtest 'delete_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portion', 'storage', 'string');
    }
};

subtest 'delete_portion invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portion', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_portion', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_portion', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portion', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portion', 'sub_shape', 'string');
    }
};

#
# delete_portions test
#
subtest 'delete_portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $utils->initialize('delete_portions', '');
    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        fail("delete_portions raised an exception: $@");
    }
    pass();
};

subtest 'delete_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_portions', 'name', $params{ name }, 'string');
    $utils->initialize('delete_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portions', 'name', 'string');
    }
};

subtest 'delete_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_portions', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_portions', 'slide_index', 'int');
    }
};

subtest 'delete_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_portions', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_portions', 'shape_index', 'int');
    }
};

subtest 'delete_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_portions', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('delete_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_portions', 'paragraph_index', 'int');
    }
};

subtest 'delete_portions invalid portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $params{ portions } = $utils->invalidize_param_value('delete_portions', 'portions', $params{ portions }, 'int[]');
    $utils->initialize('delete_portions', 'portions', $params{ portions });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'portions', $params{ portions }, 'int[]', $@);
    } else {
        $utils->assert_no_error('delete_portions', 'portions', 'int[]');
    }
};

subtest 'delete_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_portions', 'password', $params{ password }, 'string');
    $utils->initialize('delete_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portions', 'password', 'string');
    }
};

subtest 'delete_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_portions', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portions', 'folder', 'string');
    }
};

subtest 'delete_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_portions', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portions', 'storage', 'string');
    }
};

subtest 'delete_portions invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_portions', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_portions', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_portions', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_portions', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_portions', 'sub_shape', 'string');
    }
};

#
# delete_protection test
#
subtest 'delete_protection' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $utils->initialize('delete_protection', '');
    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        fail("delete_protection raised an exception: $@");
    }
    pass();
};

subtest 'delete_protection invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_protection', 'name', $params{ name }, 'string');
    $utils->initialize('delete_protection', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_protection', 'name', 'string');
    }
};

subtest 'delete_protection invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_protection', 'password', $params{ password }, 'string');
    $utils->initialize('delete_protection', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_protection', 'password', 'string');
    }
};

subtest 'delete_protection invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_protection', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_protection', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_protection', 'folder', 'string');
    }
};

subtest 'delete_protection invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_protection', 'name', 'string'), 'password' => $utils->get_param_value('delete_protection', 'password', 'string'), 'folder' => $utils->get_param_value('delete_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_protection', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_protection', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_protection', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_protection(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_protection', 'storage', 'string');
    }
};

#
# delete_protection_online test
#
subtest 'delete_protection_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_protection_online', 'document', 'File'), 'password' => $utils->get_param_value('delete_protection_online', 'password', 'string'));
    $utils->initialize('delete_protection_online', '');
    eval {
        my $result = $utils->{api}->delete_protection_online(%params);
    };
    if ($@) {
        fail("delete_protection_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_protection_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_protection_online', 'document', 'File'), 'password' => $utils->get_param_value('delete_protection_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_protection_online', 'document', $params{ document }, 'File');
    $utils->initialize('delete_protection_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('delete_protection_online', 'document', 'File');
    }
};

subtest 'delete_protection_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_protection_online', 'document', 'File'), 'password' => $utils->get_param_value('delete_protection_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_protection_online', 'password', $params{ password }, 'string');
    $utils->initialize('delete_protection_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_protection_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_protection_online', 'password', 'string');
    }
};

#
# delete_section test
#
subtest 'delete_section' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $utils->initialize('delete_section', '');
    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        fail("delete_section raised an exception: $@");
    }
    pass();
};

subtest 'delete_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_section', 'name', $params{ name }, 'string');
    $utils->initialize('delete_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_section', 'name', 'string');
    }
};

subtest 'delete_section invalid section_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ section_index } = $utils->invalidize_param_value('delete_section', 'section_index', $params{ section_index }, 'int');
    $utils->initialize('delete_section', 'section_index', $params{ section_index });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'section_index', $params{ section_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_section', 'section_index', 'int');
    }
};

subtest 'delete_section invalid with_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ with_slides } = $utils->invalidize_param_value('delete_section', 'with_slides', $params{ with_slides }, 'boolean');
    $utils->initialize('delete_section', 'with_slides', $params{ with_slides });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'with_slides', $params{ with_slides }, 'boolean', $@);
    } else {
        $utils->assert_no_error('delete_section', 'with_slides', 'boolean');
    }
};

subtest 'delete_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_section', 'password', $params{ password }, 'string');
    $utils->initialize('delete_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_section', 'password', 'string');
    }
};

subtest 'delete_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_section', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_section', 'folder', 'string');
    }
};

subtest 'delete_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_section', 'name', 'string'), 'section_index' => $utils->get_param_value('delete_section', 'section_index', 'int'), 'with_slides' => $utils->get_param_value('delete_section', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_section', 'password', 'string'), 'folder' => $utils->get_param_value('delete_section', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_section', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_section(%params);
    };
    if ($@) {
        $utils->assert_error('delete_section', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_section', 'storage', 'string');
    }
};

#
# delete_sections test
#
subtest 'delete_sections' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'int[]'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $utils->initialize('delete_sections', '');
    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        fail("delete_sections raised an exception: $@");
    }
    pass();
};

subtest 'delete_sections invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'int[]'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_sections', 'name', $params{ name }, 'string');
    $utils->initialize('delete_sections', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_sections', 'name', 'string');
    }
};

subtest 'delete_sections invalid sections' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'int[]'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ sections } = $utils->invalidize_param_value('delete_sections', 'sections', $params{ sections }, 'int[]');
    $utils->initialize('delete_sections', 'sections', $params{ sections });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'sections', $params{ sections }, 'int[]', $@);
    } else {
        $utils->assert_no_error('delete_sections', 'sections', 'int[]');
    }
};

subtest 'delete_sections invalid with_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'int[]'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ with_slides } = $utils->invalidize_param_value('delete_sections', 'with_slides', $params{ with_slides }, 'boolean');
    $utils->initialize('delete_sections', 'with_slides', $params{ with_slides });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'with_slides', $params{ with_slides }, 'boolean', $@);
    } else {
        $utils->assert_no_error('delete_sections', 'with_slides', 'boolean');
    }
};

subtest 'delete_sections invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'int[]'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_sections', 'password', $params{ password }, 'string');
    $utils->initialize('delete_sections', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_sections', 'password', 'string');
    }
};

subtest 'delete_sections invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'int[]'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_sections', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_sections', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_sections', 'folder', 'string');
    }
};

subtest 'delete_sections invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_sections', 'name', 'string'), 'sections' => $utils->get_param_value('delete_sections', 'sections', 'int[]'), 'with_slides' => $utils->get_param_value('delete_sections', 'with_slides', 'boolean'), 'password' => $utils->get_param_value('delete_sections', 'password', 'string'), 'folder' => $utils->get_param_value('delete_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_sections', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_sections', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_sections', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_sections(%params);
    };
    if ($@) {
        $utils->assert_error('delete_sections', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_sections', 'storage', 'string');
    }
};

#
# delete_shape test
#
subtest 'delete_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shape', 'sub_shape', 'string'));
    $utils->initialize('delete_shape', '');
    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        fail("delete_shape raised an exception: $@");
    }
    pass();
};

subtest 'delete_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_shape', 'name', $params{ name }, 'string');
    $utils->initialize('delete_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shape', 'name', 'string');
    }
};

subtest 'delete_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_shape', 'slide_index', 'int');
    }
};

subtest 'delete_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_shape', 'shape_index', 'int');
    }
};

subtest 'delete_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_shape', 'password', $params{ password }, 'string');
    $utils->initialize('delete_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shape', 'password', 'string');
    }
};

subtest 'delete_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shape', 'folder', 'string');
    }
};

subtest 'delete_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shape', 'storage', 'string');
    }
};

subtest 'delete_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shape', 'sub_shape', 'string');
    }
};

#
# delete_shapes test
#
subtest 'delete_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shapes', 'sub_shape', 'string'));
    $utils->initialize('delete_shapes', '');
    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        fail("delete_shapes raised an exception: $@");
    }
    pass();
};

subtest 'delete_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shapes', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_shapes', 'name', $params{ name }, 'string');
    $utils->initialize('delete_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'name', 'string');
    }
};

subtest 'delete_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shapes', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_shapes', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'slide_index', 'int');
    }
};

subtest 'delete_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shapes', 'sub_shape', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('delete_shapes', 'shapes', $params{ shapes }, 'int[]');
    $utils->initialize('delete_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'shapes', $params{ shapes }, 'int[]', $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'shapes', 'int[]');
    }
};

subtest 'delete_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shapes', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_shapes', 'password', $params{ password }, 'string');
    $utils->initialize('delete_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'password', 'string');
    }
};

subtest 'delete_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shapes', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_shapes', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'folder', 'string');
    }
};

subtest 'delete_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shapes', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_shapes', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'storage', 'string');
    }
};

subtest 'delete_shapes invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_shapes', 'slide_index', 'int'), 'shapes' => $utils->get_param_value('delete_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_shapes', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_shapes', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_shapes', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_shapes', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_shapes', 'sub_shape', 'string');
    }
};

#
# delete_slide test
#
subtest 'delete_slide' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $utils->initialize('delete_slide', '');
    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        fail("delete_slide raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide', 'name', $params{ name }, 'string');
    $utils->initialize('delete_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide', 'name', 'string');
    }
};

subtest 'delete_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_slide', 'slide_index', 'int');
    }
};

subtest 'delete_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide', 'password', $params{ password }, 'string');
    $utils->initialize('delete_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide', 'password', 'string');
    }
};

subtest 'delete_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide', 'folder', 'string');
    }
};

subtest 'delete_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('delete_slide', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide', 'storage', 'string');
    }
};

#
# delete_slide_comments test
#
subtest 'delete_slide_comments' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $utils->initialize('delete_slide_comments', '');
    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        fail("delete_slide_comments raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_comments invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slide_comments', 'name', $params{ name }, 'string');
    $utils->initialize('delete_slide_comments', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'name', 'string');
    }
};

subtest 'delete_slide_comments invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_comments', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_slide_comments', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'slide_index', 'int');
    }
};

subtest 'delete_slide_comments invalid author' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ author } = $utils->invalidize_param_value('delete_slide_comments', 'author', $params{ author }, 'string');
    $utils->initialize('delete_slide_comments', 'author', $params{ author });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'author', $params{ author }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'author', 'string');
    }
};

subtest 'delete_slide_comments invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_comments', 'password', $params{ password }, 'string');
    $utils->initialize('delete_slide_comments', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'password', 'string');
    }
};

subtest 'delete_slide_comments invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slide_comments', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_slide_comments', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'folder', 'string');
    }
};

subtest 'delete_slide_comments invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_slide_comments', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slide_comments', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slide_comments', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_slide_comments', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments', 'storage', 'string');
    }
};

#
# delete_slide_comments_online test
#
subtest 'delete_slide_comments_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $utils->initialize('delete_slide_comments_online', '');
    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        fail("delete_slide_comments_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_slide_comments_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_slide_comments_online', 'document', $params{ document }, 'File');
    $utils->initialize('delete_slide_comments_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments_online', 'document', 'File');
    }
};

subtest 'delete_slide_comments_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_slide_comments_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_slide_comments_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments_online', 'slide_index', 'int');
    }
};

subtest 'delete_slide_comments_online invalid author' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $params{ author } = $utils->invalidize_param_value('delete_slide_comments_online', 'author', $params{ author }, 'string');
    $utils->initialize('delete_slide_comments_online', 'author', $params{ author });

    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments_online', 'author', $params{ author }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments_online', 'author', 'string');
    }
};

subtest 'delete_slide_comments_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_slide_comments_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('delete_slide_comments_online', 'slide_index', 'int'), 'author' => $utils->get_param_value('delete_slide_comments_online', 'author', 'string'), 'password' => $utils->get_param_value('delete_slide_comments_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slide_comments_online', 'password', $params{ password }, 'string');
    $utils->initialize('delete_slide_comments_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slide_comments_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slide_comments_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slide_comments_online', 'password', 'string');
    }
};

#
# delete_slides test
#
subtest 'delete_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'int[]'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $utils->initialize('delete_slides', '');
    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        fail("delete_slides raised an exception: $@");
    }
    pass();
};

subtest 'delete_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'int[]'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_slides', 'name', $params{ name }, 'string');
    $utils->initialize('delete_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slides', 'name', 'string');
    }
};

subtest 'delete_slides invalid slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'int[]'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ slides } = $utils->invalidize_param_value('delete_slides', 'slides', $params{ slides }, 'int[]');
    $utils->initialize('delete_slides', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'slides', $params{ slides }, 'int[]', $@);
    } else {
        $utils->assert_no_error('delete_slides', 'slides', 'int[]');
    }
};

subtest 'delete_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'int[]'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_slides', 'password', $params{ password }, 'string');
    $utils->initialize('delete_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slides', 'password', 'string');
    }
};

subtest 'delete_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'int[]'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_slides', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slides', 'folder', 'string');
    }
};

subtest 'delete_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_slides', 'name', 'string'), 'slides' => $utils->get_param_value('delete_slides', 'slides', 'int[]'), 'password' => $utils->get_param_value('delete_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_slides', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_slides', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_slides', 'storage', 'string');
    }
};

#
# delete_smart_art_node test
#
subtest 'delete_smart_art_node' => sub {
    my %params = ('name' => $utils->get_param_value('delete_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('delete_smart_art_node', 'smart_art_index', 'int'), 'node_index' => $utils->get_param_value('delete_smart_art_node', 'node_index', 'int'), 'sub_node' => $utils->get_param_value('delete_smart_art_node', 'sub_node', 'string'), 'password' => $utils->get_param_value('delete_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('delete_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_smart_art_node', 'storage', 'string'));
    $utils->initialize('delete_smart_art_node', '');
    eval {
        my $result = $utils->{api}->delete_smart_art_node(%params);
    };
    if ($@) {
        fail("delete_smart_art_node raised an exception: $@");
    }
    pass();
};

subtest 'delete_smart_art_node invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('delete_smart_art_node', 'smart_art_index', 'int'), 'node_index' => $utils->get_param_value('delete_smart_art_node', 'node_index', 'int'), 'sub_node' => $utils->get_param_value('delete_smart_art_node', 'sub_node', 'string'), 'password' => $utils->get_param_value('delete_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('delete_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_smart_art_node', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_smart_art_node', 'name', $params{ name }, 'string');
    $utils->initialize('delete_smart_art_node', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('delete_smart_art_node', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_smart_art_node', 'name', 'string');
    }
};

subtest 'delete_smart_art_node invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('delete_smart_art_node', 'smart_art_index', 'int'), 'node_index' => $utils->get_param_value('delete_smart_art_node', 'node_index', 'int'), 'sub_node' => $utils->get_param_value('delete_smart_art_node', 'sub_node', 'string'), 'password' => $utils->get_param_value('delete_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('delete_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_smart_art_node', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_smart_art_node', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_smart_art_node', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('delete_smart_art_node', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_smart_art_node', 'slide_index', 'int');
    }
};

subtest 'delete_smart_art_node invalid smart_art_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('delete_smart_art_node', 'smart_art_index', 'int'), 'node_index' => $utils->get_param_value('delete_smart_art_node', 'node_index', 'int'), 'sub_node' => $utils->get_param_value('delete_smart_art_node', 'sub_node', 'string'), 'password' => $utils->get_param_value('delete_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('delete_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_smart_art_node', 'storage', 'string'));
    $params{ smart_art_index } = $utils->invalidize_param_value('delete_smart_art_node', 'smart_art_index', $params{ smart_art_index }, 'int');
    $utils->initialize('delete_smart_art_node', 'smart_art_index', $params{ smart_art_index });

    eval {
        my $result = $utils->{api}->delete_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('delete_smart_art_node', 'smart_art_index', $params{ smart_art_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_smart_art_node', 'smart_art_index', 'int');
    }
};

subtest 'delete_smart_art_node invalid node_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('delete_smart_art_node', 'smart_art_index', 'int'), 'node_index' => $utils->get_param_value('delete_smart_art_node', 'node_index', 'int'), 'sub_node' => $utils->get_param_value('delete_smart_art_node', 'sub_node', 'string'), 'password' => $utils->get_param_value('delete_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('delete_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_smart_art_node', 'storage', 'string'));
    $params{ node_index } = $utils->invalidize_param_value('delete_smart_art_node', 'node_index', $params{ node_index }, 'int');
    $utils->initialize('delete_smart_art_node', 'node_index', $params{ node_index });

    eval {
        my $result = $utils->{api}->delete_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('delete_smart_art_node', 'node_index', $params{ node_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_smart_art_node', 'node_index', 'int');
    }
};

subtest 'delete_smart_art_node invalid sub_node' => sub {
    my %params = ('name' => $utils->get_param_value('delete_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('delete_smart_art_node', 'smart_art_index', 'int'), 'node_index' => $utils->get_param_value('delete_smart_art_node', 'node_index', 'int'), 'sub_node' => $utils->get_param_value('delete_smart_art_node', 'sub_node', 'string'), 'password' => $utils->get_param_value('delete_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('delete_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_smart_art_node', 'storage', 'string'));
    $params{ sub_node } = $utils->invalidize_param_value('delete_smart_art_node', 'sub_node', $params{ sub_node }, 'string');
    $utils->initialize('delete_smart_art_node', 'sub_node', $params{ sub_node });

    eval {
        my $result = $utils->{api}->delete_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('delete_smart_art_node', 'sub_node', $params{ sub_node }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_smart_art_node', 'sub_node', 'string');
    }
};

subtest 'delete_smart_art_node invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('delete_smart_art_node', 'smart_art_index', 'int'), 'node_index' => $utils->get_param_value('delete_smart_art_node', 'node_index', 'int'), 'sub_node' => $utils->get_param_value('delete_smart_art_node', 'sub_node', 'string'), 'password' => $utils->get_param_value('delete_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('delete_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_smart_art_node', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_smart_art_node', 'password', $params{ password }, 'string');
    $utils->initialize('delete_smart_art_node', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('delete_smart_art_node', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_smart_art_node', 'password', 'string');
    }
};

subtest 'delete_smart_art_node invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('delete_smart_art_node', 'smart_art_index', 'int'), 'node_index' => $utils->get_param_value('delete_smart_art_node', 'node_index', 'int'), 'sub_node' => $utils->get_param_value('delete_smart_art_node', 'sub_node', 'string'), 'password' => $utils->get_param_value('delete_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('delete_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_smart_art_node', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_smart_art_node', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_smart_art_node', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('delete_smart_art_node', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_smart_art_node', 'folder', 'string');
    }
};

subtest 'delete_smart_art_node invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_smart_art_node', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_smart_art_node', 'slide_index', 'int'), 'smart_art_index' => $utils->get_param_value('delete_smart_art_node', 'smart_art_index', 'int'), 'node_index' => $utils->get_param_value('delete_smart_art_node', 'node_index', 'int'), 'sub_node' => $utils->get_param_value('delete_smart_art_node', 'sub_node', 'string'), 'password' => $utils->get_param_value('delete_smart_art_node', 'password', 'string'), 'folder' => $utils->get_param_value('delete_smart_art_node', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_smart_art_node', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_smart_art_node', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_smart_art_node', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_smart_art_node(%params);
    };
    if ($@) {
        $utils->assert_error('delete_smart_art_node', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_smart_art_node', 'storage', 'string');
    }
};

#
# delete_special_slide_animation test
#
subtest 'delete_special_slide_animation' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'name', 'string');
    }
};

subtest 'delete_special_slide_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_animation invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_animation', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'password', 'string');
    }
};

subtest 'delete_special_slide_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'folder', 'string');
    }
};

subtest 'delete_special_slide_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation', 'storage', 'string');
    }
};

#
# delete_special_slide_animation_effect test
#
subtest 'delete_special_slide_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_effect', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'name', 'string');
    }
};

subtest 'delete_special_slide_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_animation_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_animation_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'effect_index', $params{ effect_index }, 'int');
    $utils->initialize('delete_special_slide_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'effect_index', $params{ effect_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'effect_index', 'int');
    }
};

subtest 'delete_special_slide_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'password', 'string');
    }
};

subtest 'delete_special_slide_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'folder', 'string');
    }
};

subtest 'delete_special_slide_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_effect', 'storage', 'string');
    }
};

#
# delete_special_slide_animation_interactive_sequence test
#
subtest 'delete_special_slide_animation_interactive_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_interactive_sequence', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_interactive_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_interactive_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'name', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', $params{ sequence_index }, 'int');
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'sequence_index', $params{ sequence_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'password', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'folder', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence', 'storage', 'string');
    }
};

#
# delete_special_slide_animation_interactive_sequence_effect test
#
subtest 'delete_special_slide_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int');
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, 'int');
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'string');
    }
};

#
# delete_special_slide_animation_interactive_sequences test
#
subtest 'delete_special_slide_animation_interactive_sequences' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_interactive_sequences', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_interactive_sequences raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_interactive_sequences invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'name', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'password', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'folder', 'string');
    }
};

subtest 'delete_special_slide_animation_interactive_sequences invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_interactive_sequences', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_interactive_sequences', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_animation_interactive_sequences', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_interactive_sequences(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_interactive_sequences', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_interactive_sequences', 'storage', 'string');
    }
};

#
# delete_special_slide_animation_main_sequence test
#
subtest 'delete_special_slide_animation_main_sequence' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $utils->initialize('delete_special_slide_animation_main_sequence', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        fail("delete_special_slide_animation_main_sequence raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_animation_main_sequence invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_animation_main_sequence', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'name', 'string');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_animation_main_sequence', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_animation_main_sequence', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_animation_main_sequence', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'password', 'string');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_animation_main_sequence', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'folder', 'string');
    }
};

subtest 'delete_special_slide_animation_main_sequence invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'slide_type', 'string'), 'password' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_animation_main_sequence', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_animation_main_sequence', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_animation_main_sequence', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_animation_main_sequence(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_animation_main_sequence', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_animation_main_sequence', 'storage', 'string');
    }
};

#
# delete_special_slide_paragraph test
#
subtest 'delete_special_slide_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $utils->initialize('delete_special_slide_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        fail("delete_special_slide_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'name', 'string');
    }
};

subtest 'delete_special_slide_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_special_slide_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'shape_index', 'int');
    }
};

subtest 'delete_special_slide_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('delete_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'paragraph_index', 'int');
    }
};

subtest 'delete_special_slide_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'password', 'string');
    }
};

subtest 'delete_special_slide_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'folder', 'string');
    }
};

subtest 'delete_special_slide_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'storage', 'string');
    }
};

subtest 'delete_special_slide_paragraph invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_special_slide_paragraph', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_special_slide_paragraph', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraph', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraph', 'sub_shape', 'string');
    }
};

#
# delete_special_slide_paragraphs test
#
subtest 'delete_special_slide_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $utils->initialize('delete_special_slide_paragraphs', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        fail("delete_special_slide_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'name', 'string');
    }
};

subtest 'delete_special_slide_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_paragraphs invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_paragraphs', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_special_slide_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'shape_index', 'int');
    }
};

subtest 'delete_special_slide_paragraphs invalid paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ paragraphs } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'paragraphs', $params{ paragraphs }, 'int[]');
    $utils->initialize('delete_special_slide_paragraphs', 'paragraphs', $params{ paragraphs });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'paragraphs', $params{ paragraphs }, 'int[]', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'paragraphs', 'int[]');
    }
};

subtest 'delete_special_slide_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'password', 'string');
    }
};

subtest 'delete_special_slide_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'folder', 'string');
    }
};

subtest 'delete_special_slide_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'storage', 'string');
    }
};

subtest 'delete_special_slide_paragraphs invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_paragraphs', 'shape_index', 'int'), 'paragraphs' => $utils->get_param_value('delete_special_slide_paragraphs', 'paragraphs', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_special_slide_paragraphs', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_special_slide_paragraphs', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_paragraphs', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_paragraphs', 'sub_shape', 'string');
    }
};

#
# delete_special_slide_portion test
#
subtest 'delete_special_slide_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $utils->initialize('delete_special_slide_portion', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        fail("delete_special_slide_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_portion', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'name', 'string');
    }
};

subtest 'delete_special_slide_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_portion', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_special_slide_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'shape_index', 'int');
    }
};

subtest 'delete_special_slide_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('delete_special_slide_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'paragraph_index', 'int');
    }
};

subtest 'delete_special_slide_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_special_slide_portion', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('delete_special_slide_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'portion_index', 'int');
    }
};

subtest 'delete_special_slide_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_portion', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'password', 'string');
    }
};

subtest 'delete_special_slide_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'folder', 'string');
    }
};

subtest 'delete_special_slide_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'storage', 'string');
    }
};

subtest 'delete_special_slide_portion invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portion', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_special_slide_portion', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_special_slide_portion', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portion', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portion', 'sub_shape', 'string');
    }
};

#
# delete_special_slide_portions test
#
subtest 'delete_special_slide_portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $utils->initialize('delete_special_slide_portions', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        fail("delete_special_slide_portions raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_portions', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'name', 'string');
    }
};

subtest 'delete_special_slide_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_portions', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_portions invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_portions', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_portions', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_portions', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_special_slide_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'shape_index', 'int');
    }
};

subtest 'delete_special_slide_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_special_slide_portions', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('delete_special_slide_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'paragraph_index', 'int');
    }
};

subtest 'delete_special_slide_portions invalid portions' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ portions } = $utils->invalidize_param_value('delete_special_slide_portions', 'portions', $params{ portions }, 'int[]');
    $utils->initialize('delete_special_slide_portions', 'portions', $params{ portions });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'portions', $params{ portions }, 'int[]', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'portions', 'int[]');
    }
};

subtest 'delete_special_slide_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_portions', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'password', 'string');
    }
};

subtest 'delete_special_slide_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_portions', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'folder', 'string');
    }
};

subtest 'delete_special_slide_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_portions', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'storage', 'string');
    }
};

subtest 'delete_special_slide_portions invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_special_slide_portions', 'paragraph_index', 'int'), 'portions' => $utils->get_param_value('delete_special_slide_portions', 'portions', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_portions', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_special_slide_portions', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_special_slide_portions', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_portions', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_portions', 'sub_shape', 'string');
    }
};

#
# delete_special_slide_shape test
#
subtest 'delete_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shape', 'sub_shape', 'string'));
    $utils->initialize('delete_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        fail("delete_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_shape', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'name', 'string');
    }
};

subtest 'delete_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_shape', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_special_slide_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'shape_index', 'int');
    }
};

subtest 'delete_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_shape', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'password', 'string');
    }
};

subtest 'delete_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'folder', 'string');
    }
};

subtest 'delete_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'storage', 'string');
    }
};

subtest 'delete_special_slide_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('delete_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('delete_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_special_slide_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shape', 'sub_shape', 'string');
    }
};

#
# delete_special_slide_shapes test
#
subtest 'delete_special_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shapes', 'sub_shape', 'string'));
    $utils->initialize('delete_special_slide_shapes', '');
    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        fail("delete_special_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'delete_special_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shapes', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_special_slide_shapes', 'name', $params{ name }, 'string');
    $utils->initialize('delete_special_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'name', 'string');
    }
};

subtest 'delete_special_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shapes', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_special_slide_shapes', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_special_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'slide_index', 'int');
    }
};

subtest 'delete_special_slide_shapes invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shapes', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('delete_special_slide_shapes', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('delete_special_slide_shapes', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'slide_type', 'string');
    }
};

subtest 'delete_special_slide_shapes invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shapes', 'sub_shape', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('delete_special_slide_shapes', 'shapes', $params{ shapes }, 'int[]');
    $utils->initialize('delete_special_slide_shapes', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'shapes', $params{ shapes }, 'int[]', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'shapes', 'int[]');
    }
};

subtest 'delete_special_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shapes', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_special_slide_shapes', 'password', $params{ password }, 'string');
    $utils->initialize('delete_special_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'password', 'string');
    }
};

subtest 'delete_special_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shapes', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_special_slide_shapes', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_special_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'folder', 'string');
    }
};

subtest 'delete_special_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shapes', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_special_slide_shapes', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_special_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'storage', 'string');
    }
};

subtest 'delete_special_slide_shapes invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('delete_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('delete_special_slide_shapes', 'slide_type', 'string'), 'shapes' => $utils->get_param_value('delete_special_slide_shapes', 'shapes', 'int[]'), 'password' => $utils->get_param_value('delete_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('delete_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('delete_special_slide_shapes', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('delete_special_slide_shapes', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('delete_special_slide_shapes', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->delete_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('delete_special_slide_shapes', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_special_slide_shapes', 'sub_shape', 'string');
    }
};

#
# delete_table_cell_paragraph test
#
subtest 'delete_table_cell_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $utils->initialize('delete_table_cell_paragraph', '');
    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        fail("delete_table_cell_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'delete_table_cell_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_table_cell_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('delete_table_cell_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_paragraph', 'name', 'string');
    }
};

subtest 'delete_table_cell_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_table_cell_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_table_cell_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_paragraph', 'slide_index', 'int');
    }
};

subtest 'delete_table_cell_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_table_cell_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_table_cell_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_paragraph', 'shape_index', 'int');
    }
};

subtest 'delete_table_cell_paragraph invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('delete_table_cell_paragraph', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('delete_table_cell_paragraph', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_paragraph', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_paragraph', 'row_index', 'int');
    }
};

subtest 'delete_table_cell_paragraph invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('delete_table_cell_paragraph', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('delete_table_cell_paragraph', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_paragraph', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_paragraph', 'cell_index', 'int');
    }
};

subtest 'delete_table_cell_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_table_cell_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('delete_table_cell_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_paragraph', 'paragraph_index', 'int');
    }
};

subtest 'delete_table_cell_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_table_cell_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('delete_table_cell_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_paragraph', 'password', 'string');
    }
};

subtest 'delete_table_cell_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_table_cell_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_table_cell_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_paragraph', 'folder', 'string');
    }
};

subtest 'delete_table_cell_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_table_cell_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_table_cell_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_paragraph', 'storage', 'string');
    }
};

#
# delete_table_cell_portion test
#
subtest 'delete_table_cell_portion' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $utils->initialize('delete_table_cell_portion', '');
    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        fail("delete_table_cell_portion raised an exception: $@");
    }
    pass();
};

subtest 'delete_table_cell_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_table_cell_portion', 'name', $params{ name }, 'string');
    $utils->initialize('delete_table_cell_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'name', 'string');
    }
};

subtest 'delete_table_cell_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_table_cell_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_table_cell_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'slide_index', 'int');
    }
};

subtest 'delete_table_cell_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_table_cell_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_table_cell_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'shape_index', 'int');
    }
};

subtest 'delete_table_cell_portion invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('delete_table_cell_portion', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('delete_table_cell_portion', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'row_index', 'int');
    }
};

subtest 'delete_table_cell_portion invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('delete_table_cell_portion', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('delete_table_cell_portion', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'cell_index', 'int');
    }
};

subtest 'delete_table_cell_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('delete_table_cell_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('delete_table_cell_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'paragraph_index', 'int');
    }
};

subtest 'delete_table_cell_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('delete_table_cell_portion', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('delete_table_cell_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'portion_index', 'int');
    }
};

subtest 'delete_table_cell_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_table_cell_portion', 'password', $params{ password }, 'string');
    $utils->initialize('delete_table_cell_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'password', 'string');
    }
};

subtest 'delete_table_cell_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_table_cell_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_table_cell_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'folder', 'string');
    }
};

subtest 'delete_table_cell_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('delete_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('delete_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('delete_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('delete_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_cell_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_table_cell_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_table_cell_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_cell_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_cell_portion', 'storage', 'string');
    }
};

#
# delete_table_row test
#
subtest 'delete_table_row' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_row', 'row_index', 'int'), 'with_attached_rows' => $utils->get_param_value('delete_table_row', 'with_attached_rows', 'boolean'), 'password' => $utils->get_param_value('delete_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_row', 'storage', 'string'));
    $utils->initialize('delete_table_row', '');
    eval {
        my $result = $utils->{api}->delete_table_row(%params);
    };
    if ($@) {
        fail("delete_table_row raised an exception: $@");
    }
    pass();
};

subtest 'delete_table_row invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_row', 'row_index', 'int'), 'with_attached_rows' => $utils->get_param_value('delete_table_row', 'with_attached_rows', 'boolean'), 'password' => $utils->get_param_value('delete_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_row', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_table_row', 'name', $params{ name }, 'string');
    $utils->initialize('delete_table_row', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_row', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_row', 'name', 'string');
    }
};

subtest 'delete_table_row invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_row', 'row_index', 'int'), 'with_attached_rows' => $utils->get_param_value('delete_table_row', 'with_attached_rows', 'boolean'), 'password' => $utils->get_param_value('delete_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_row', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('delete_table_row', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('delete_table_row', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->delete_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_row', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_row', 'slide_index', 'int');
    }
};

subtest 'delete_table_row invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_row', 'row_index', 'int'), 'with_attached_rows' => $utils->get_param_value('delete_table_row', 'with_attached_rows', 'boolean'), 'password' => $utils->get_param_value('delete_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_row', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('delete_table_row', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('delete_table_row', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->delete_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_row', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_row', 'shape_index', 'int');
    }
};

subtest 'delete_table_row invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_row', 'row_index', 'int'), 'with_attached_rows' => $utils->get_param_value('delete_table_row', 'with_attached_rows', 'boolean'), 'password' => $utils->get_param_value('delete_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_row', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('delete_table_row', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('delete_table_row', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->delete_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_row', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_table_row', 'row_index', 'int');
    }
};

subtest 'delete_table_row invalid with_attached_rows' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_row', 'row_index', 'int'), 'with_attached_rows' => $utils->get_param_value('delete_table_row', 'with_attached_rows', 'boolean'), 'password' => $utils->get_param_value('delete_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_row', 'storage', 'string'));
    $params{ with_attached_rows } = $utils->invalidize_param_value('delete_table_row', 'with_attached_rows', $params{ with_attached_rows }, 'boolean');
    $utils->initialize('delete_table_row', 'with_attached_rows', $params{ with_attached_rows });

    eval {
        my $result = $utils->{api}->delete_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_row', 'with_attached_rows', $params{ with_attached_rows }, 'boolean', $@);
    } else {
        $utils->assert_no_error('delete_table_row', 'with_attached_rows', 'boolean');
    }
};

subtest 'delete_table_row invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_row', 'row_index', 'int'), 'with_attached_rows' => $utils->get_param_value('delete_table_row', 'with_attached_rows', 'boolean'), 'password' => $utils->get_param_value('delete_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_row', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_table_row', 'password', $params{ password }, 'string');
    $utils->initialize('delete_table_row', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_row', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_row', 'password', 'string');
    }
};

subtest 'delete_table_row invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_row', 'row_index', 'int'), 'with_attached_rows' => $utils->get_param_value('delete_table_row', 'with_attached_rows', 'boolean'), 'password' => $utils->get_param_value('delete_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_row', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_table_row', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_table_row', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_row', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_row', 'folder', 'string');
    }
};

subtest 'delete_table_row invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('delete_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('delete_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('delete_table_row', 'row_index', 'int'), 'with_attached_rows' => $utils->get_param_value('delete_table_row', 'with_attached_rows', 'boolean'), 'password' => $utils->get_param_value('delete_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('delete_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_table_row', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_table_row', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_table_row', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('delete_table_row', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_table_row', 'storage', 'string');
    }
};

#
# delete_unused_layout_slides test
#
subtest 'delete_unused_layout_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('delete_unused_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_layout_slides', 'storage', 'string'));
    $utils->initialize('delete_unused_layout_slides', '');
    eval {
        my $result = $utils->{api}->delete_unused_layout_slides(%params);
    };
    if ($@) {
        fail("delete_unused_layout_slides raised an exception: $@");
    }
    pass();
};

subtest 'delete_unused_layout_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('delete_unused_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_layout_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_unused_layout_slides', 'name', $params{ name }, 'string');
    $utils->initialize('delete_unused_layout_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_unused_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_layout_slides', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_layout_slides', 'name', 'string');
    }
};

subtest 'delete_unused_layout_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('delete_unused_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_layout_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_unused_layout_slides', 'password', $params{ password }, 'string');
    $utils->initialize('delete_unused_layout_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_unused_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_layout_slides', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_layout_slides', 'password', 'string');
    }
};

subtest 'delete_unused_layout_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('delete_unused_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_layout_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_unused_layout_slides', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_unused_layout_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_unused_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_layout_slides', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_layout_slides', 'folder', 'string');
    }
};

subtest 'delete_unused_layout_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('delete_unused_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_layout_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_unused_layout_slides', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_unused_layout_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_unused_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_layout_slides', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_layout_slides', 'storage', 'string');
    }
};

#
# delete_unused_layout_slides_online test
#
subtest 'delete_unused_layout_slides_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_unused_layout_slides_online', 'document', 'File'), 'password' => $utils->get_param_value('delete_unused_layout_slides_online', 'password', 'string'));
    $utils->initialize('delete_unused_layout_slides_online', '');
    eval {
        my $result = $utils->{api}->delete_unused_layout_slides_online(%params);
    };
    if ($@) {
        fail("delete_unused_layout_slides_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_unused_layout_slides_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_unused_layout_slides_online', 'document', 'File'), 'password' => $utils->get_param_value('delete_unused_layout_slides_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_unused_layout_slides_online', 'document', $params{ document }, 'File');
    $utils->initialize('delete_unused_layout_slides_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_unused_layout_slides_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_layout_slides_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('delete_unused_layout_slides_online', 'document', 'File');
    }
};

subtest 'delete_unused_layout_slides_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_unused_layout_slides_online', 'document', 'File'), 'password' => $utils->get_param_value('delete_unused_layout_slides_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_unused_layout_slides_online', 'password', $params{ password }, 'string');
    $utils->initialize('delete_unused_layout_slides_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_unused_layout_slides_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_layout_slides_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_layout_slides_online', 'password', 'string');
    }
};

#
# delete_unused_master_slides test
#
subtest 'delete_unused_master_slides' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_master_slides', 'name', 'string'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_master_slides', 'storage', 'string'));
    $utils->initialize('delete_unused_master_slides', '');
    eval {
        my $result = $utils->{api}->delete_unused_master_slides(%params);
    };
    if ($@) {
        fail("delete_unused_master_slides raised an exception: $@");
    }
    pass();
};

subtest 'delete_unused_master_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_master_slides', 'name', 'string'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_master_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_unused_master_slides', 'name', $params{ name }, 'string');
    $utils->initialize('delete_unused_master_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_unused_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_master_slides', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_master_slides', 'name', 'string');
    }
};

subtest 'delete_unused_master_slides invalid ignore_preserve_field' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_master_slides', 'name', 'string'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_master_slides', 'storage', 'string'));
    $params{ ignore_preserve_field } = $utils->invalidize_param_value('delete_unused_master_slides', 'ignore_preserve_field', $params{ ignore_preserve_field }, 'boolean');
    $utils->initialize('delete_unused_master_slides', 'ignore_preserve_field', $params{ ignore_preserve_field });

    eval {
        my $result = $utils->{api}->delete_unused_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_master_slides', 'ignore_preserve_field', $params{ ignore_preserve_field }, 'boolean', $@);
    } else {
        $utils->assert_no_error('delete_unused_master_slides', 'ignore_preserve_field', 'boolean');
    }
};

subtest 'delete_unused_master_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_master_slides', 'name', 'string'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_master_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_unused_master_slides', 'password', $params{ password }, 'string');
    $utils->initialize('delete_unused_master_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_unused_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_master_slides', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_master_slides', 'password', 'string');
    }
};

subtest 'delete_unused_master_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_master_slides', 'name', 'string'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_master_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_unused_master_slides', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_unused_master_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_unused_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_master_slides', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_master_slides', 'folder', 'string');
    }
};

subtest 'delete_unused_master_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_unused_master_slides', 'name', 'string'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('delete_unused_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_unused_master_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_unused_master_slides', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_unused_master_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_unused_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_master_slides', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_master_slides', 'storage', 'string');
    }
};

#
# delete_unused_master_slides_online test
#
subtest 'delete_unused_master_slides_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_unused_master_slides_online', 'document', 'File'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides_online', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides_online', 'password', 'string'));
    $utils->initialize('delete_unused_master_slides_online', '');
    eval {
        my $result = $utils->{api}->delete_unused_master_slides_online(%params);
    };
    if ($@) {
        fail("delete_unused_master_slides_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_unused_master_slides_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_unused_master_slides_online', 'document', 'File'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides_online', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_unused_master_slides_online', 'document', $params{ document }, 'File');
    $utils->initialize('delete_unused_master_slides_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_unused_master_slides_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_master_slides_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('delete_unused_master_slides_online', 'document', 'File');
    }
};

subtest 'delete_unused_master_slides_online invalid ignore_preserve_field' => sub {
    my %params = ('document' => $utils->get_param_value('delete_unused_master_slides_online', 'document', 'File'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides_online', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides_online', 'password', 'string'));
    $params{ ignore_preserve_field } = $utils->invalidize_param_value('delete_unused_master_slides_online', 'ignore_preserve_field', $params{ ignore_preserve_field }, 'boolean');
    $utils->initialize('delete_unused_master_slides_online', 'ignore_preserve_field', $params{ ignore_preserve_field });

    eval {
        my $result = $utils->{api}->delete_unused_master_slides_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_master_slides_online', 'ignore_preserve_field', $params{ ignore_preserve_field }, 'boolean', $@);
    } else {
        $utils->assert_no_error('delete_unused_master_slides_online', 'ignore_preserve_field', 'boolean');
    }
};

subtest 'delete_unused_master_slides_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_unused_master_slides_online', 'document', 'File'), 'ignore_preserve_field' => $utils->get_param_value('delete_unused_master_slides_online', 'ignore_preserve_field', 'boolean'), 'password' => $utils->get_param_value('delete_unused_master_slides_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_unused_master_slides_online', 'password', $params{ password }, 'string');
    $utils->initialize('delete_unused_master_slides_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_unused_master_slides_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_unused_master_slides_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_unused_master_slides_online', 'password', 'string');
    }
};

#
# delete_vba_module test
#
subtest 'delete_vba_module' => sub {
    my %params = ('name' => $utils->get_param_value('delete_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('delete_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('delete_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('delete_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_vba_module', 'storage', 'string'));
    $utils->initialize('delete_vba_module', '');
    eval {
        my $result = $utils->{api}->delete_vba_module(%params);
    };
    if ($@) {
        fail("delete_vba_module raised an exception: $@");
    }
    pass();
};

subtest 'delete_vba_module invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('delete_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('delete_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('delete_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_vba_module', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_vba_module', 'name', $params{ name }, 'string');
    $utils->initialize('delete_vba_module', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('delete_vba_module', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_vba_module', 'name', 'string');
    }
};

subtest 'delete_vba_module invalid module_index' => sub {
    my %params = ('name' => $utils->get_param_value('delete_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('delete_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('delete_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('delete_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_vba_module', 'storage', 'string'));
    $params{ module_index } = $utils->invalidize_param_value('delete_vba_module', 'module_index', $params{ module_index }, 'int');
    $utils->initialize('delete_vba_module', 'module_index', $params{ module_index });

    eval {
        my $result = $utils->{api}->delete_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('delete_vba_module', 'module_index', $params{ module_index }, 'int', $@);
    } else {
        $utils->assert_no_error('delete_vba_module', 'module_index', 'int');
    }
};

subtest 'delete_vba_module invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('delete_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('delete_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('delete_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_vba_module', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_vba_module', 'password', $params{ password }, 'string');
    $utils->initialize('delete_vba_module', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('delete_vba_module', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_vba_module', 'password', 'string');
    }
};

subtest 'delete_vba_module invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('delete_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('delete_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('delete_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_vba_module', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_vba_module', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_vba_module', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('delete_vba_module', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_vba_module', 'folder', 'string');
    }
};

subtest 'delete_vba_module invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('delete_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('delete_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('delete_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_vba_module', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_vba_module', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_vba_module', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('delete_vba_module', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_vba_module', 'storage', 'string');
    }
};

#
# delete_watermark test
#
subtest 'delete_watermark' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $utils->initialize('delete_watermark', '');
    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        fail("delete_watermark raised an exception: $@");
    }
    pass();
};

subtest 'delete_watermark invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('delete_watermark', 'name', $params{ name }, 'string');
    $utils->initialize('delete_watermark', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'name', 'string');
    }
};

subtest 'delete_watermark invalid shape_name' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ shape_name } = $utils->invalidize_param_value('delete_watermark', 'shape_name', $params{ shape_name }, 'string');
    $utils->initialize('delete_watermark', 'shape_name', $params{ shape_name });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'shape_name', $params{ shape_name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'shape_name', 'string');
    }
};

subtest 'delete_watermark invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_watermark', 'password', $params{ password }, 'string');
    $utils->initialize('delete_watermark', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'password', 'string');
    }
};

subtest 'delete_watermark invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('delete_watermark', 'folder', $params{ folder }, 'string');
    $utils->initialize('delete_watermark', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'folder', 'string');
    }
};

subtest 'delete_watermark invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('delete_watermark', 'name', 'string'), 'shape_name' => $utils->get_param_value('delete_watermark', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark', 'password', 'string'), 'folder' => $utils->get_param_value('delete_watermark', 'folder', 'string'), 'storage' => $utils->get_param_value('delete_watermark', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('delete_watermark', 'storage', $params{ storage }, 'string');
    $utils->initialize('delete_watermark', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->delete_watermark(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_watermark', 'storage', 'string');
    }
};

#
# delete_watermark_online test
#
subtest 'delete_watermark_online' => sub {
    my %params = ('document' => $utils->get_param_value('delete_watermark_online', 'document', 'File'), 'shape_name' => $utils->get_param_value('delete_watermark_online', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark_online', 'password', 'string'));
    $utils->initialize('delete_watermark_online', '');
    eval {
        my $result = $utils->{api}->delete_watermark_online(%params);
    };
    if ($@) {
        fail("delete_watermark_online raised an exception: $@");
    }
    pass();
};

subtest 'delete_watermark_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('delete_watermark_online', 'document', 'File'), 'shape_name' => $utils->get_param_value('delete_watermark_online', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('delete_watermark_online', 'document', $params{ document }, 'File');
    $utils->initialize('delete_watermark_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->delete_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('delete_watermark_online', 'document', 'File');
    }
};

subtest 'delete_watermark_online invalid shape_name' => sub {
    my %params = ('document' => $utils->get_param_value('delete_watermark_online', 'document', 'File'), 'shape_name' => $utils->get_param_value('delete_watermark_online', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark_online', 'password', 'string'));
    $params{ shape_name } = $utils->invalidize_param_value('delete_watermark_online', 'shape_name', $params{ shape_name }, 'string');
    $utils->initialize('delete_watermark_online', 'shape_name', $params{ shape_name });

    eval {
        my $result = $utils->{api}->delete_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark_online', 'shape_name', $params{ shape_name }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_watermark_online', 'shape_name', 'string');
    }
};

subtest 'delete_watermark_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('delete_watermark_online', 'document', 'File'), 'shape_name' => $utils->get_param_value('delete_watermark_online', 'shape_name', 'string'), 'password' => $utils->get_param_value('delete_watermark_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('delete_watermark_online', 'password', $params{ password }, 'string');
    $utils->initialize('delete_watermark_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->delete_watermark_online(%params);
    };
    if ($@) {
        $utils->assert_error('delete_watermark_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('delete_watermark_online', 'password', 'string');
    }
};

#
# download_file test
#
subtest 'download_file' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $utils->initialize('download_file', '');
    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        fail("download_file raised an exception: $@");
    }
    pass();
};

subtest 'download_file invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $params{ path } = $utils->invalidize_param_value('download_file', 'path', $params{ path }, 'string');
    $utils->initialize('download_file', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        $utils->assert_error('download_file', 'path', $params{ path }, 'string', $@);
    } else {
        $utils->assert_no_error('download_file', 'path', 'string');
    }
};

subtest 'download_file invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('download_file', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('download_file', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        $utils->assert_error('download_file', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_file', 'storage_name', 'string');
    }
};

subtest 'download_file invalid version_id' => sub {
    my %params = ('path' => $utils->get_param_value('download_file', 'path', 'string'), 'storage_name' => $utils->get_param_value('download_file', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('download_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('download_file', 'version_id', $params{ version_id }, 'string');
    $utils->initialize('download_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->download_file(%params);
    };
    if ($@) {
        $utils->assert_error('download_file', 'version_id', $params{ version_id }, 'string', $@);
    } else {
        $utils->assert_no_error('download_file', 'version_id', 'string');
    }
};

#
# download_image test
#
subtest 'download_image' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $utils->initialize('download_image', '');
    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        fail("download_image raised an exception: $@");
    }
    pass();
};

subtest 'download_image invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_image', 'name', $params{ name }, 'string');
    $utils->initialize('download_image', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image', 'name', 'string');
    }
};

subtest 'download_image invalid index' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ index } = $utils->invalidize_param_value('download_image', 'index', $params{ index }, 'int');
    $utils->initialize('download_image', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'index', $params{ index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_image', 'index', 'int');
    }
};

subtest 'download_image invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_image', 'format', $params{ format }, 'string');
    $utils->initialize('download_image', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image', 'format', 'string');
    }
};

subtest 'download_image invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_image', 'password', $params{ password }, 'string');
    $utils->initialize('download_image', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image', 'password', 'string');
    }
};

subtest 'download_image invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_image', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_image', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image', 'folder', 'string');
    }
};

subtest 'download_image invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_image', 'name', 'string'), 'index' => $utils->get_param_value('download_image', 'index', 'int'), 'format' => $utils->get_param_value('download_image', 'format', 'string'), 'password' => $utils->get_param_value('download_image', 'password', 'string'), 'folder' => $utils->get_param_value('download_image', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_image', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_image', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_image(%params);
    };
    if ($@) {
        $utils->assert_error('download_image', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image', 'storage', 'string');
    }
};

#
# download_image_default_format test
#
subtest 'download_image_default_format' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $utils->initialize('download_image_default_format', '');
    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        fail("download_image_default_format raised an exception: $@");
    }
    pass();
};

subtest 'download_image_default_format invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_image_default_format', 'name', $params{ name }, 'string');
    $utils->initialize('download_image_default_format', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'name', 'string');
    }
};

subtest 'download_image_default_format invalid index' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ index } = $utils->invalidize_param_value('download_image_default_format', 'index', $params{ index }, 'int');
    $utils->initialize('download_image_default_format', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'index', $params{ index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'index', 'int');
    }
};

subtest 'download_image_default_format invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_image_default_format', 'password', $params{ password }, 'string');
    $utils->initialize('download_image_default_format', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'password', 'string');
    }
};

subtest 'download_image_default_format invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_image_default_format', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_image_default_format', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'folder', 'string');
    }
};

subtest 'download_image_default_format invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_image_default_format', 'name', 'string'), 'index' => $utils->get_param_value('download_image_default_format', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_image_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_image_default_format', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_image_default_format', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_image_default_format', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_image_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image_default_format', 'storage', 'string');
    }
};

#
# download_image_default_format_online test
#
subtest 'download_image_default_format_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_default_format_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_default_format_online', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format_online', 'password', 'string'));
    $utils->initialize('download_image_default_format_online', '');
    eval {
        my $result = $utils->{api}->download_image_default_format_online(%params);
    };
    if ($@) {
        fail("download_image_default_format_online raised an exception: $@");
    }
    pass();
};

subtest 'download_image_default_format_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_default_format_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_default_format_online', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_image_default_format_online', 'document', $params{ document }, 'File');
    $utils->initialize('download_image_default_format_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_image_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('download_image_default_format_online', 'document', 'File');
    }
};

subtest 'download_image_default_format_online invalid index' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_default_format_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_default_format_online', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format_online', 'password', 'string'));
    $params{ index } = $utils->invalidize_param_value('download_image_default_format_online', 'index', $params{ index }, 'int');
    $utils->initialize('download_image_default_format_online', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->download_image_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format_online', 'index', $params{ index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_image_default_format_online', 'index', 'int');
    }
};

subtest 'download_image_default_format_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_default_format_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_default_format_online', 'index', 'int'), 'password' => $utils->get_param_value('download_image_default_format_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_image_default_format_online', 'password', $params{ password }, 'string');
    $utils->initialize('download_image_default_format_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_image_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_default_format_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image_default_format_online', 'password', 'string');
    }
};

#
# download_image_online test
#
subtest 'download_image_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $utils->initialize('download_image_online', '');
    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        fail("download_image_online raised an exception: $@");
    }
    pass();
};

subtest 'download_image_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_image_online', 'document', $params{ document }, 'File');
    $utils->initialize('download_image_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('download_image_online', 'document', 'File');
    }
};

subtest 'download_image_online invalid index' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $params{ index } = $utils->invalidize_param_value('download_image_online', 'index', $params{ index }, 'int');
    $utils->initialize('download_image_online', 'index', $params{ index });

    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_online', 'index', $params{ index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_image_online', 'index', 'int');
    }
};

subtest 'download_image_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_image_online', 'format', $params{ format }, 'string');
    $utils->initialize('download_image_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_online', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image_online', 'format', 'string');
    }
};

subtest 'download_image_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_image_online', 'document', 'File'), 'index' => $utils->get_param_value('download_image_online', 'index', 'int'), 'format' => $utils->get_param_value('download_image_online', 'format', 'string'), 'password' => $utils->get_param_value('download_image_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_image_online', 'password', $params{ password }, 'string');
    $utils->initialize('download_image_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_image_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_image_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_image_online', 'password', 'string');
    }
};

#
# download_images test
#
subtest 'download_images' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $utils->initialize('download_images', '');
    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        fail("download_images raised an exception: $@");
    }
    pass();
};

subtest 'download_images invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_images', 'name', $params{ name }, 'string');
    $utils->initialize('download_images', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images', 'name', 'string');
    }
};

subtest 'download_images invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_images', 'format', $params{ format }, 'string');
    $utils->initialize('download_images', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images', 'format', 'string');
    }
};

subtest 'download_images invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_images', 'password', $params{ password }, 'string');
    $utils->initialize('download_images', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images', 'password', 'string');
    }
};

subtest 'download_images invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_images', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_images', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images', 'folder', 'string');
    }
};

subtest 'download_images invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_images', 'name', 'string'), 'format' => $utils->get_param_value('download_images', 'format', 'string'), 'password' => $utils->get_param_value('download_images', 'password', 'string'), 'folder' => $utils->get_param_value('download_images', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_images', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_images', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_images(%params);
    };
    if ($@) {
        $utils->assert_error('download_images', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images', 'storage', 'string');
    }
};

#
# download_images_default_format test
#
subtest 'download_images_default_format' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $utils->initialize('download_images_default_format', '');
    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        fail("download_images_default_format raised an exception: $@");
    }
    pass();
};

subtest 'download_images_default_format invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_images_default_format', 'name', $params{ name }, 'string');
    $utils->initialize('download_images_default_format', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images_default_format', 'name', 'string');
    }
};

subtest 'download_images_default_format invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_images_default_format', 'password', $params{ password }, 'string');
    $utils->initialize('download_images_default_format', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images_default_format', 'password', 'string');
    }
};

subtest 'download_images_default_format invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_images_default_format', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_images_default_format', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images_default_format', 'folder', 'string');
    }
};

subtest 'download_images_default_format invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_images_default_format', 'name', 'string'), 'password' => $utils->get_param_value('download_images_default_format', 'password', 'string'), 'folder' => $utils->get_param_value('download_images_default_format', 'folder', 'string'), 'storage' => $utils->get_param_value('download_images_default_format', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_images_default_format', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_images_default_format', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_images_default_format(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images_default_format', 'storage', 'string');
    }
};

#
# download_images_default_format_online test
#
subtest 'download_images_default_format_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_default_format_online', 'document', 'File'), 'password' => $utils->get_param_value('download_images_default_format_online', 'password', 'string'));
    $utils->initialize('download_images_default_format_online', '');
    eval {
        my $result = $utils->{api}->download_images_default_format_online(%params);
    };
    if ($@) {
        fail("download_images_default_format_online raised an exception: $@");
    }
    pass();
};

subtest 'download_images_default_format_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_default_format_online', 'document', 'File'), 'password' => $utils->get_param_value('download_images_default_format_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_images_default_format_online', 'document', $params{ document }, 'File');
    $utils->initialize('download_images_default_format_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_images_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('download_images_default_format_online', 'document', 'File');
    }
};

subtest 'download_images_default_format_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_default_format_online', 'document', 'File'), 'password' => $utils->get_param_value('download_images_default_format_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_images_default_format_online', 'password', $params{ password }, 'string');
    $utils->initialize('download_images_default_format_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_images_default_format_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_default_format_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images_default_format_online', 'password', 'string');
    }
};

#
# download_images_online test
#
subtest 'download_images_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_online', 'document', 'File'), 'format' => $utils->get_param_value('download_images_online', 'format', 'string'), 'password' => $utils->get_param_value('download_images_online', 'password', 'string'));
    $utils->initialize('download_images_online', '');
    eval {
        my $result = $utils->{api}->download_images_online(%params);
    };
    if ($@) {
        fail("download_images_online raised an exception: $@");
    }
    pass();
};

subtest 'download_images_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_online', 'document', 'File'), 'format' => $utils->get_param_value('download_images_online', 'format', 'string'), 'password' => $utils->get_param_value('download_images_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_images_online', 'document', $params{ document }, 'File');
    $utils->initialize('download_images_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_images_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('download_images_online', 'document', 'File');
    }
};

subtest 'download_images_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_online', 'document', 'File'), 'format' => $utils->get_param_value('download_images_online', 'format', 'string'), 'password' => $utils->get_param_value('download_images_online', 'password', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_images_online', 'format', $params{ format }, 'string');
    $utils->initialize('download_images_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_images_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_online', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images_online', 'format', 'string');
    }
};

subtest 'download_images_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_images_online', 'document', 'File'), 'format' => $utils->get_param_value('download_images_online', 'format', 'string'), 'password' => $utils->get_param_value('download_images_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_images_online', 'password', $params{ password }, 'string');
    $utils->initialize('download_images_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_images_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_images_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_images_online', 'password', 'string');
    }
};

#
# download_notes_slide test
#
subtest 'download_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $utils->initialize('download_notes_slide', '');
    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        fail("download_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'download_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_notes_slide', 'name', $params{ name }, 'string');
    $utils->initialize('download_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'name', 'string');
    }
};

subtest 'download_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_notes_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('download_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'slide_index', 'int');
    }
};

subtest 'download_notes_slide invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_notes_slide', 'format', $params{ format }, 'string');
    $utils->initialize('download_notes_slide', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'format', 'string');
    }
};

subtest 'download_notes_slide invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('download_notes_slide', 'width', $params{ width }, 'int');
    $utils->initialize('download_notes_slide', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'width', 'int');
    }
};

subtest 'download_notes_slide invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('download_notes_slide', 'height', $params{ height }, 'int');
    $utils->initialize('download_notes_slide', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'height', 'int');
    }
};

subtest 'download_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_notes_slide', 'password', $params{ password }, 'string');
    $utils->initialize('download_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'password', 'string');
    }
};

subtest 'download_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_notes_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'folder', 'string');
    }
};

subtest 'download_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_notes_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'storage', 'string');
    }
};

subtest 'download_notes_slide invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_notes_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_notes_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_notes_slide', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('download_notes_slide', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_notes_slide', 'fonts_folder', 'string');
    }
};

#
# download_notes_slide_online test
#
subtest 'download_notes_slide_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $utils->initialize('download_notes_slide_online', '');
    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        fail("download_notes_slide_online raised an exception: $@");
    }
    pass();
};

subtest 'download_notes_slide_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ document } = $utils->invalidize_param_value('download_notes_slide_online', 'document', $params{ document }, 'File');
    $utils->initialize('download_notes_slide_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'document', 'File');
    }
};

subtest 'download_notes_slide_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_notes_slide_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('download_notes_slide_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'slide_index', 'int');
    }
};

subtest 'download_notes_slide_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_notes_slide_online', 'format', $params{ format }, 'string');
    $utils->initialize('download_notes_slide_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'format', 'string');
    }
};

subtest 'download_notes_slide_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('download_notes_slide_online', 'width', $params{ width }, 'int');
    $utils->initialize('download_notes_slide_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'width', 'int');
    }
};

subtest 'download_notes_slide_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('download_notes_slide_online', 'height', $params{ height }, 'int');
    $utils->initialize('download_notes_slide_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'height', 'int');
    }
};

subtest 'download_notes_slide_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_notes_slide_online', 'password', $params{ password }, 'string');
    $utils->initialize('download_notes_slide_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'password', 'string');
    }
};

subtest 'download_notes_slide_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('download_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_notes_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_notes_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_notes_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_notes_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_notes_slide_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('download_notes_slide_online', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_notes_slide_online', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('download_notes_slide_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_notes_slide_online', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_notes_slide_online', 'fonts_folder', 'string');
    }
};

#
# download_portion_as_math_ml test
#
subtest 'download_portion_as_math_ml' => sub {
    my %params = ('name' => $utils->get_param_value('download_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('download_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('download_portion_as_math_ml', 'portion_index', 'int'), 'password' => $utils->get_param_value('download_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('download_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('download_portion_as_math_ml', 'storage', 'string'));
    $utils->initialize('download_portion_as_math_ml', '');
    eval {
        my $result = $utils->{api}->download_portion_as_math_ml(%params);
    };
    if ($@) {
        fail("download_portion_as_math_ml raised an exception: $@");
    }
    pass();
};

subtest 'download_portion_as_math_ml invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('download_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('download_portion_as_math_ml', 'portion_index', 'int'), 'password' => $utils->get_param_value('download_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('download_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('download_portion_as_math_ml', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_portion_as_math_ml', 'name', $params{ name }, 'string');
    $utils->initialize('download_portion_as_math_ml', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('download_portion_as_math_ml', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_portion_as_math_ml', 'name', 'string');
    }
};

subtest 'download_portion_as_math_ml invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('download_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('download_portion_as_math_ml', 'portion_index', 'int'), 'password' => $utils->get_param_value('download_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('download_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('download_portion_as_math_ml', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_portion_as_math_ml', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('download_portion_as_math_ml', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('download_portion_as_math_ml', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_portion_as_math_ml', 'slide_index', 'int');
    }
};

subtest 'download_portion_as_math_ml invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('download_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('download_portion_as_math_ml', 'portion_index', 'int'), 'password' => $utils->get_param_value('download_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('download_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('download_portion_as_math_ml', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('download_portion_as_math_ml', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('download_portion_as_math_ml', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->download_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('download_portion_as_math_ml', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_portion_as_math_ml', 'shape_index', 'int');
    }
};

subtest 'download_portion_as_math_ml invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('download_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('download_portion_as_math_ml', 'portion_index', 'int'), 'password' => $utils->get_param_value('download_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('download_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('download_portion_as_math_ml', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('download_portion_as_math_ml', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('download_portion_as_math_ml', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->download_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('download_portion_as_math_ml', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_portion_as_math_ml', 'paragraph_index', 'int');
    }
};

subtest 'download_portion_as_math_ml invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('download_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('download_portion_as_math_ml', 'portion_index', 'int'), 'password' => $utils->get_param_value('download_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('download_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('download_portion_as_math_ml', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('download_portion_as_math_ml', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('download_portion_as_math_ml', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->download_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('download_portion_as_math_ml', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_portion_as_math_ml', 'portion_index', 'int');
    }
};

subtest 'download_portion_as_math_ml invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('download_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('download_portion_as_math_ml', 'portion_index', 'int'), 'password' => $utils->get_param_value('download_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('download_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('download_portion_as_math_ml', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_portion_as_math_ml', 'password', $params{ password }, 'string');
    $utils->initialize('download_portion_as_math_ml', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('download_portion_as_math_ml', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_portion_as_math_ml', 'password', 'string');
    }
};

subtest 'download_portion_as_math_ml invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('download_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('download_portion_as_math_ml', 'portion_index', 'int'), 'password' => $utils->get_param_value('download_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('download_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('download_portion_as_math_ml', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_portion_as_math_ml', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_portion_as_math_ml', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('download_portion_as_math_ml', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_portion_as_math_ml', 'folder', 'string');
    }
};

subtest 'download_portion_as_math_ml invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('download_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('download_portion_as_math_ml', 'portion_index', 'int'), 'password' => $utils->get_param_value('download_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('download_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('download_portion_as_math_ml', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_portion_as_math_ml', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_portion_as_math_ml', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('download_portion_as_math_ml', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_portion_as_math_ml', 'storage', 'string');
    }
};

#
# download_presentation test
#
subtest 'download_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'int[]'));
    $utils->initialize('download_presentation', '');
    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        fail("download_presentation raised an exception: $@");
    }
    pass();
};

subtest 'download_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'int[]'));
    $params{ name } = $utils->invalidize_param_value('download_presentation', 'name', $params{ name }, 'string');
    $utils->initialize('download_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_presentation', 'name', 'string');
    }
};

subtest 'download_presentation invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'int[]'));
    $params{ format } = $utils->invalidize_param_value('download_presentation', 'format', $params{ format }, 'string');
    $utils->initialize('download_presentation', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_presentation', 'format', 'string');
    }
};

subtest 'download_presentation invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'int[]'));
    $params{ options } = $utils->invalidize_param_value('download_presentation', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('download_presentation', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('download_presentation', 'options', 'ExportOptions');
    }
};

subtest 'download_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'int[]'));
    $params{ password } = $utils->invalidize_param_value('download_presentation', 'password', $params{ password }, 'string');
    $utils->initialize('download_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_presentation', 'password', 'string');
    }
};

subtest 'download_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'int[]'));
    $params{ folder } = $utils->invalidize_param_value('download_presentation', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_presentation', 'folder', 'string');
    }
};

subtest 'download_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'int[]'));
    $params{ storage } = $utils->invalidize_param_value('download_presentation', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_presentation', 'storage', 'string');
    }
};

subtest 'download_presentation invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'int[]'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_presentation', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('download_presentation', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_presentation', 'fonts_folder', 'string');
    }
};

subtest 'download_presentation invalid slides' => sub {
    my %params = ('name' => $utils->get_param_value('download_presentation', 'name', 'string'), 'format' => $utils->get_param_value('download_presentation', 'format', 'string'), 'options' => $utils->get_param_value('download_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('download_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('download_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('download_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('download_presentation', 'slides', 'int[]'));
    $params{ slides } = $utils->invalidize_param_value('download_presentation', 'slides', $params{ slides }, 'int[]');
    $utils->initialize('download_presentation', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->download_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('download_presentation', 'slides', $params{ slides }, 'int[]', $@);
    } else {
        $utils->assert_no_error('download_presentation', 'slides', 'int[]');
    }
};

#
# download_shape test
#
subtest 'download_shape' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $utils->initialize('download_shape', '');
    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        fail("download_shape raised an exception: $@");
    }
    pass();
};

subtest 'download_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_shape', 'name', $params{ name }, 'string');
    $utils->initialize('download_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape', 'name', 'string');
    }
};

subtest 'download_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('download_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_shape', 'slide_index', 'int');
    }
};

subtest 'download_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('download_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('download_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_shape', 'shape_index', 'int');
    }
};

subtest 'download_shape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_shape', 'format', $params{ format }, 'string');
    $utils->initialize('download_shape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape', 'format', 'string');
    }
};

subtest 'download_shape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ options } = $utils->invalidize_param_value('download_shape', 'options', $params{ options }, 'IShapeExportOptions');
    $utils->initialize('download_shape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'options', $params{ options }, 'IShapeExportOptions', $@);
    } else {
        $utils->assert_no_error('download_shape', 'options', 'IShapeExportOptions');
    }
};

subtest 'download_shape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('download_shape', 'scale_x', $params{ scale_x }, 'double');
    $utils->initialize('download_shape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'scale_x', $params{ scale_x }, 'double', $@);
    } else {
        $utils->assert_no_error('download_shape', 'scale_x', 'double');
    }
};

subtest 'download_shape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('download_shape', 'scale_y', $params{ scale_y }, 'double');
    $utils->initialize('download_shape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'scale_y', $params{ scale_y }, 'double', $@);
    } else {
        $utils->assert_no_error('download_shape', 'scale_y', 'double');
    }
};

subtest 'download_shape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('download_shape', 'bounds', $params{ bounds }, 'string');
    $utils->initialize('download_shape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'bounds', $params{ bounds }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape', 'bounds', 'string');
    }
};

subtest 'download_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_shape', 'password', $params{ password }, 'string');
    $utils->initialize('download_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape', 'password', 'string');
    }
};

subtest 'download_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape', 'folder', 'string');
    }
};

subtest 'download_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape', 'storage', 'string');
    }
};

subtest 'download_shape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_shape', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('download_shape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape', 'fonts_folder', 'string');
    }
};

subtest 'download_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('download_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('download_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('download_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->download_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape', 'sub_shape', 'string');
    }
};

#
# download_shape_from_dto test
#
subtest 'download_shape_from_dto' => sub {
    my %params = ('format' => $utils->get_param_value('download_shape_from_dto', 'format', 'string'), 'dto' => $utils->get_param_value('download_shape_from_dto', 'dto', 'ShapeBase'));
    $utils->initialize('download_shape_from_dto', '');
    eval {
        my $result = $utils->{api}->download_shape_from_dto(%params);
    };
    if ($@) {
        fail("download_shape_from_dto raised an exception: $@");
    }
    pass();
};

subtest 'download_shape_from_dto invalid format' => sub {
    my %params = ('format' => $utils->get_param_value('download_shape_from_dto', 'format', 'string'), 'dto' => $utils->get_param_value('download_shape_from_dto', 'dto', 'ShapeBase'));
    $params{ format } = $utils->invalidize_param_value('download_shape_from_dto', 'format', $params{ format }, 'string');
    $utils->initialize('download_shape_from_dto', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_shape_from_dto(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_from_dto', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape_from_dto', 'format', 'string');
    }
};

subtest 'download_shape_from_dto invalid dto' => sub {
    my %params = ('format' => $utils->get_param_value('download_shape_from_dto', 'format', 'string'), 'dto' => $utils->get_param_value('download_shape_from_dto', 'dto', 'ShapeBase'));
    $params{ dto } = $utils->invalidize_param_value('download_shape_from_dto', 'dto', $params{ dto }, 'ShapeBase');
    $utils->initialize('download_shape_from_dto', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->download_shape_from_dto(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_from_dto', 'dto', $params{ dto }, 'ShapeBase', $@);
    } else {
        $utils->assert_no_error('download_shape_from_dto', 'dto', 'ShapeBase');
    }
};

#
# download_shape_online test
#
subtest 'download_shape_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $utils->initialize('download_shape_online', '');
    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        fail("download_shape_online raised an exception: $@");
    }
    pass();
};

subtest 'download_shape_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ document } = $utils->invalidize_param_value('download_shape_online', 'document', $params{ document }, 'File');
    $utils->initialize('download_shape_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'document', 'File');
    }
};

subtest 'download_shape_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ slide_index } = $utils->invalidize_param_value('download_shape_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('download_shape_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'slide_index', 'int');
    }
};

subtest 'download_shape_online invalid shape_index' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ shape_index } = $utils->invalidize_param_value('download_shape_online', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('download_shape_online', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'shape_index', 'int');
    }
};

subtest 'download_shape_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ format } = $utils->invalidize_param_value('download_shape_online', 'format', $params{ format }, 'string');
    $utils->initialize('download_shape_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'format', 'string');
    }
};

subtest 'download_shape_online invalid scale_x' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ scale_x } = $utils->invalidize_param_value('download_shape_online', 'scale_x', $params{ scale_x }, 'double');
    $utils->initialize('download_shape_online', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'scale_x', $params{ scale_x }, 'double', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'scale_x', 'double');
    }
};

subtest 'download_shape_online invalid scale_y' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ scale_y } = $utils->invalidize_param_value('download_shape_online', 'scale_y', $params{ scale_y }, 'double');
    $utils->initialize('download_shape_online', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'scale_y', $params{ scale_y }, 'double', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'scale_y', 'double');
    }
};

subtest 'download_shape_online invalid bounds' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ bounds } = $utils->invalidize_param_value('download_shape_online', 'bounds', $params{ bounds }, 'string');
    $utils->initialize('download_shape_online', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'bounds', $params{ bounds }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'bounds', 'string');
    }
};

subtest 'download_shape_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ password } = $utils->invalidize_param_value('download_shape_online', 'password', $params{ password }, 'string');
    $utils->initialize('download_shape_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'password', 'string');
    }
};

subtest 'download_shape_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('download_shape_online', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_shape_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'storage', 'string');
    }
};

subtest 'download_shape_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_shape_online', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('download_shape_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'fonts_folder', 'string');
    }
};

subtest 'download_shape_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('download_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('download_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_shape_online', 'format', 'string'), 'scale_x' => $utils->get_param_value('download_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('download_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_shape_online', 'options', 'IShapeExportOptions'));
    $params{ options } = $utils->invalidize_param_value('download_shape_online', 'options', $params{ options }, 'IShapeExportOptions');
    $utils->initialize('download_shape_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_shape_online', 'options', $params{ options }, 'IShapeExportOptions', $@);
    } else {
        $utils->assert_no_error('download_shape_online', 'options', 'IShapeExportOptions');
    }
};

#
# download_slide test
#
subtest 'download_slide' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $utils->initialize('download_slide', '');
    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        fail("download_slide raised an exception: $@");
    }
    pass();
};

subtest 'download_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_slide', 'name', $params{ name }, 'string');
    $utils->initialize('download_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide', 'name', 'string');
    }
};

subtest 'download_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('download_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_slide', 'slide_index', 'int');
    }
};

subtest 'download_slide invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_slide', 'format', $params{ format }, 'string');
    $utils->initialize('download_slide', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide', 'format', 'string');
    }
};

subtest 'download_slide invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('download_slide', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('download_slide', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('download_slide', 'options', 'ExportOptions');
    }
};

subtest 'download_slide invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('download_slide', 'width', $params{ width }, 'int');
    $utils->initialize('download_slide', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('download_slide', 'width', 'int');
    }
};

subtest 'download_slide invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('download_slide', 'height', $params{ height }, 'int');
    $utils->initialize('download_slide', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('download_slide', 'height', 'int');
    }
};

subtest 'download_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_slide', 'password', $params{ password }, 'string');
    $utils->initialize('download_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide', 'password', 'string');
    }
};

subtest 'download_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide', 'folder', 'string');
    }
};

subtest 'download_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide', 'storage', 'string');
    }
};

subtest 'download_slide invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide', 'format', 'string'), 'options' => $utils->get_param_value('download_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('download_slide', 'width', 'int'), 'height' => $utils->get_param_value('download_slide', 'height', 'int'), 'password' => $utils->get_param_value('download_slide', 'password', 'string'), 'folder' => $utils->get_param_value('download_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('download_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_slide', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('download_slide', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_slide(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide', 'fonts_folder', 'string');
    }
};

#
# download_slide_online test
#
subtest 'download_slide_online' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $utils->initialize('download_slide_online', '');
    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        fail("download_slide_online raised an exception: $@");
    }
    pass();
};

subtest 'download_slide_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('download_slide_online', 'document', $params{ document }, 'File');
    $utils->initialize('download_slide_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'document', 'File');
    }
};

subtest 'download_slide_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ slide_index } = $utils->invalidize_param_value('download_slide_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('download_slide_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'slide_index', 'int');
    }
};

subtest 'download_slide_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('download_slide_online', 'format', $params{ format }, 'string');
    $utils->initialize('download_slide_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'format', 'string');
    }
};

subtest 'download_slide_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ width } = $utils->invalidize_param_value('download_slide_online', 'width', $params{ width }, 'int');
    $utils->initialize('download_slide_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'width', 'int');
    }
};

subtest 'download_slide_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ height } = $utils->invalidize_param_value('download_slide_online', 'height', $params{ height }, 'int');
    $utils->initialize('download_slide_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'height', 'int');
    }
};

subtest 'download_slide_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('download_slide_online', 'password', $params{ password }, 'string');
    $utils->initialize('download_slide_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'password', 'string');
    }
};

subtest 'download_slide_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('download_slide_online', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_slide_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'storage', 'string');
    }
};

subtest 'download_slide_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_slide_online', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('download_slide_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'fonts_folder', 'string');
    }
};

subtest 'download_slide_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('download_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('download_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('download_slide_online', 'format', 'string'), 'width' => $utils->get_param_value('download_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('download_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('download_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('download_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('download_slide_online', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('download_slide_online', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('download_slide_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('download_slide_online', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('download_slide_online', 'options', 'ExportOptions');
    }
};

#
# download_special_slide_shape test
#
subtest 'download_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $utils->initialize('download_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        fail("download_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'download_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('download_special_slide_shape', 'name', $params{ name }, 'string');
    $utils->initialize('download_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'name', 'string');
    }
};

subtest 'download_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('download_special_slide_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('download_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'slide_index', 'int');
    }
};

subtest 'download_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('download_special_slide_shape', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('download_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'slide_type', 'string');
    }
};

subtest 'download_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('download_special_slide_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('download_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'shape_index', 'int');
    }
};

subtest 'download_special_slide_shape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ format } = $utils->invalidize_param_value('download_special_slide_shape', 'format', $params{ format }, 'string');
    $utils->initialize('download_special_slide_shape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'format', 'string');
    }
};

subtest 'download_special_slide_shape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ options } = $utils->invalidize_param_value('download_special_slide_shape', 'options', $params{ options }, 'IShapeExportOptions');
    $utils->initialize('download_special_slide_shape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'options', $params{ options }, 'IShapeExportOptions', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'options', 'IShapeExportOptions');
    }
};

subtest 'download_special_slide_shape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('download_special_slide_shape', 'scale_x', $params{ scale_x }, 'double');
    $utils->initialize('download_special_slide_shape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'scale_x', $params{ scale_x }, 'double', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'scale_x', 'double');
    }
};

subtest 'download_special_slide_shape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('download_special_slide_shape', 'scale_y', $params{ scale_y }, 'double');
    $utils->initialize('download_special_slide_shape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'scale_y', $params{ scale_y }, 'double', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'scale_y', 'double');
    }
};

subtest 'download_special_slide_shape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('download_special_slide_shape', 'bounds', $params{ bounds }, 'string');
    $utils->initialize('download_special_slide_shape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'bounds', $params{ bounds }, 'string', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'bounds', 'string');
    }
};

subtest 'download_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('download_special_slide_shape', 'password', $params{ password }, 'string');
    $utils->initialize('download_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'password', 'string');
    }
};

subtest 'download_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('download_special_slide_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('download_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'folder', 'string');
    }
};

subtest 'download_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('download_special_slide_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('download_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'storage', 'string');
    }
};

subtest 'download_special_slide_shape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('download_special_slide_shape', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('download_special_slide_shape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'fonts_folder', 'string');
    }
};

subtest 'download_special_slide_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('download_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('download_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('download_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('download_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('download_special_slide_shape', 'format', 'string'), 'options' => $utils->get_param_value('download_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('download_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('download_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('download_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('download_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('download_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('download_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('download_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('download_special_slide_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('download_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('download_special_slide_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->download_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('download_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('download_special_slide_shape', 'sub_shape', 'string');
    }
};

#
# get_animation test
#
subtest 'get_animation' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $utils->initialize('get_animation', '');
    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        fail("get_animation raised an exception: $@");
    }
    pass();
};

subtest 'get_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_animation', 'name', $params{ name }, 'string');
    $utils->initialize('get_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_animation', 'name', 'string');
    }
};

subtest 'get_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_animation', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_animation', 'slide_index', 'int');
    }
};

subtest 'get_animation invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_animation', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_animation', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_animation', 'shape_index', 'int');
    }
};

subtest 'get_animation invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_animation', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_animation', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_animation', 'paragraph_index', 'int');
    }
};

subtest 'get_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_animation', 'password', $params{ password }, 'string');
    $utils->initialize('get_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_animation', 'password', 'string');
    }
};

subtest 'get_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_animation', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_animation', 'folder', 'string');
    }
};

subtest 'get_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_animation', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_animation', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_animation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_animation', 'storage', 'string');
    }
};

#
# get_api_info test
#
subtest 'get_api_info' => sub {
    my %params = ();
    $utils->initialize('get_api_info', '');
    eval {
        my $result = $utils->{api}->get_api_info(%params);
    };
    if ($@) {
        fail("get_api_info raised an exception: $@");
    }
    pass();
};

#
# get_background test
#
subtest 'get_background' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $utils->initialize('get_background', '');
    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        fail("get_background raised an exception: $@");
    }
    pass();
};

subtest 'get_background invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_background', 'name', $params{ name }, 'string');
    $utils->initialize('get_background', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_background', 'name', 'string');
    }
};

subtest 'get_background invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_background', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_background', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_background', 'slide_index', 'int');
    }
};

subtest 'get_background invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_background', 'password', $params{ password }, 'string');
    $utils->initialize('get_background', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_background', 'password', 'string');
    }
};

subtest 'get_background invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_background', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_background', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_background', 'folder', 'string');
    }
};

subtest 'get_background invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_background', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_background', 'password', 'string'), 'folder' => $utils->get_param_value('get_background', 'folder', 'string'), 'storage' => $utils->get_param_value('get_background', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_background', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_background', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_background(%params);
    };
    if ($@) {
        $utils->assert_error('get_background', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_background', 'storage', 'string');
    }
};

#
# get_color_scheme test
#
subtest 'get_color_scheme' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $utils->initialize('get_color_scheme', '');
    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        fail("get_color_scheme raised an exception: $@");
    }
    pass();
};

subtest 'get_color_scheme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_color_scheme', 'name', $params{ name }, 'string');
    $utils->initialize('get_color_scheme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'name', 'string');
    }
};

subtest 'get_color_scheme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_color_scheme', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_color_scheme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'slide_index', 'int');
    }
};

subtest 'get_color_scheme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_color_scheme', 'password', $params{ password }, 'string');
    $utils->initialize('get_color_scheme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'password', 'string');
    }
};

subtest 'get_color_scheme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_color_scheme', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_color_scheme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'folder', 'string');
    }
};

subtest 'get_color_scheme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_color_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_color_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_color_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_color_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_color_scheme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_color_scheme', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_color_scheme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_color_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_color_scheme', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_color_scheme', 'storage', 'string');
    }
};

#
# get_disc_usage test
#
subtest 'get_disc_usage' => sub {
    my %params = ('storage_name' => $utils->get_param_value('get_disc_usage', 'storage_name', 'string'));
    $utils->initialize('get_disc_usage', '');
    eval {
        my $result = $utils->{api}->get_disc_usage(%params);
    };
    if ($@) {
        fail("get_disc_usage raised an exception: $@");
    }
    pass();
};

subtest 'get_disc_usage invalid storage_name' => sub {
    my %params = ('storage_name' => $utils->get_param_value('get_disc_usage', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('get_disc_usage', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('get_disc_usage', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->get_disc_usage(%params);
    };
    if ($@) {
        $utils->assert_error('get_disc_usage', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_disc_usage', 'storage_name', 'string');
    }
};

#
# get_document_properties test
#
subtest 'get_document_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $utils->initialize('get_document_properties', '');
    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        fail("get_document_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_document_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_document_properties', 'name', $params{ name }, 'string');
    $utils->initialize('get_document_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_document_properties', 'name', 'string');
    }
};

subtest 'get_document_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_document_properties', 'password', $params{ password }, 'string');
    $utils->initialize('get_document_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_document_properties', 'password', 'string');
    }
};

subtest 'get_document_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_document_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_document_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_document_properties', 'folder', 'string');
    }
};

subtest 'get_document_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_document_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_document_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_document_properties', 'storage', 'string');
    }
};

#
# get_document_property test
#
subtest 'get_document_property' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $utils->initialize('get_document_property', '');
    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        fail("get_document_property raised an exception: $@");
    }
    pass();
};

subtest 'get_document_property invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_document_property', 'name', $params{ name }, 'string');
    $utils->initialize('get_document_property', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_document_property', 'name', 'string');
    }
};

subtest 'get_document_property invalid property_name' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ property_name } = $utils->invalidize_param_value('get_document_property', 'property_name', $params{ property_name }, 'string');
    $utils->initialize('get_document_property', 'property_name', $params{ property_name });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'property_name', $params{ property_name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_document_property', 'property_name', 'string');
    }
};

subtest 'get_document_property invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_document_property', 'password', $params{ password }, 'string');
    $utils->initialize('get_document_property', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_document_property', 'password', 'string');
    }
};

subtest 'get_document_property invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_document_property', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_document_property', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_document_property', 'folder', 'string');
    }
};

subtest 'get_document_property invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('get_document_property', 'property_name', 'string'), 'password' => $utils->get_param_value('get_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('get_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('get_document_property', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_document_property', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_document_property', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('get_document_property', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_document_property', 'storage', 'string');
    }
};

#
# get_file_versions test
#
subtest 'get_file_versions' => sub {
    my %params = ('path' => $utils->get_param_value('get_file_versions', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_file_versions', 'storage_name', 'string'));
    $utils->initialize('get_file_versions', '');
    eval {
        my $result = $utils->{api}->get_file_versions(%params);
    };
    if ($@) {
        fail("get_file_versions raised an exception: $@");
    }
    pass();
};

subtest 'get_file_versions invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('get_file_versions', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_file_versions', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_file_versions', 'path', $params{ path }, 'string');
    $utils->initialize('get_file_versions', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_file_versions(%params);
    };
    if ($@) {
        $utils->assert_error('get_file_versions', 'path', $params{ path }, 'string', $@);
    } else {
        $utils->assert_no_error('get_file_versions', 'path', 'string');
    }
};

subtest 'get_file_versions invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('get_file_versions', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_file_versions', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('get_file_versions', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('get_file_versions', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->get_file_versions(%params);
    };
    if ($@) {
        $utils->assert_error('get_file_versions', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_file_versions', 'storage_name', 'string');
    }
};

#
# get_files_list test
#
subtest 'get_files_list' => sub {
    my %params = ('path' => $utils->get_param_value('get_files_list', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_files_list', 'storage_name', 'string'));
    $utils->initialize('get_files_list', '');
    eval {
        my $result = $utils->{api}->get_files_list(%params);
    };
    if ($@) {
        fail("get_files_list raised an exception: $@");
    }
    pass();
};

subtest 'get_files_list invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('get_files_list', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_files_list', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('get_files_list', 'path', $params{ path }, 'string');
    $utils->initialize('get_files_list', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->get_files_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_files_list', 'path', $params{ path }, 'string', $@);
    } else {
        $utils->assert_no_error('get_files_list', 'path', 'string');
    }
};

subtest 'get_files_list invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('get_files_list', 'path', 'string'), 'storage_name' => $utils->get_param_value('get_files_list', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('get_files_list', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('get_files_list', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->get_files_list(%params);
    };
    if ($@) {
        $utils->assert_error('get_files_list', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_files_list', 'storage_name', 'string');
    }
};

#
# get_font_scheme test
#
subtest 'get_font_scheme' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $utils->initialize('get_font_scheme', '');
    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        fail("get_font_scheme raised an exception: $@");
    }
    pass();
};

subtest 'get_font_scheme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_font_scheme', 'name', $params{ name }, 'string');
    $utils->initialize('get_font_scheme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'name', 'string');
    }
};

subtest 'get_font_scheme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_font_scheme', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_font_scheme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'slide_index', 'int');
    }
};

subtest 'get_font_scheme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_font_scheme', 'password', $params{ password }, 'string');
    $utils->initialize('get_font_scheme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'password', 'string');
    }
};

subtest 'get_font_scheme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_font_scheme', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_font_scheme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'folder', 'string');
    }
};

subtest 'get_font_scheme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_font_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_font_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_font_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_font_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_font_scheme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_font_scheme', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_font_scheme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_font_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_font_scheme', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_font_scheme', 'storage', 'string');
    }
};

#
# get_fonts test
#
subtest 'get_fonts' => sub {
    my %params = ('name' => $utils->get_param_value('get_fonts', 'name', 'string'), 'password' => $utils->get_param_value('get_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('get_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('get_fonts', 'storage', 'string'));
    $utils->initialize('get_fonts', '');
    eval {
        my $result = $utils->{api}->get_fonts(%params);
    };
    if ($@) {
        fail("get_fonts raised an exception: $@");
    }
    pass();
};

subtest 'get_fonts invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_fonts', 'name', 'string'), 'password' => $utils->get_param_value('get_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('get_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('get_fonts', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_fonts', 'name', $params{ name }, 'string');
    $utils->initialize('get_fonts', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_fonts(%params);
    };
    if ($@) {
        $utils->assert_error('get_fonts', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_fonts', 'name', 'string');
    }
};

subtest 'get_fonts invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_fonts', 'name', 'string'), 'password' => $utils->get_param_value('get_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('get_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('get_fonts', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_fonts', 'password', $params{ password }, 'string');
    $utils->initialize('get_fonts', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_fonts(%params);
    };
    if ($@) {
        $utils->assert_error('get_fonts', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_fonts', 'password', 'string');
    }
};

subtest 'get_fonts invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_fonts', 'name', 'string'), 'password' => $utils->get_param_value('get_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('get_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('get_fonts', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_fonts', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_fonts', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_fonts(%params);
    };
    if ($@) {
        $utils->assert_error('get_fonts', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_fonts', 'folder', 'string');
    }
};

subtest 'get_fonts invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_fonts', 'name', 'string'), 'password' => $utils->get_param_value('get_fonts', 'password', 'string'), 'folder' => $utils->get_param_value('get_fonts', 'folder', 'string'), 'storage' => $utils->get_param_value('get_fonts', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_fonts', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_fonts', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_fonts(%params);
    };
    if ($@) {
        $utils->assert_error('get_fonts', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_fonts', 'storage', 'string');
    }
};

#
# get_fonts_online test
#
subtest 'get_fonts_online' => sub {
    my %params = ('document' => $utils->get_param_value('get_fonts_online', 'document', 'File'), 'password' => $utils->get_param_value('get_fonts_online', 'password', 'string'));
    $utils->initialize('get_fonts_online', '');
    eval {
        my $result = $utils->{api}->get_fonts_online(%params);
    };
    if ($@) {
        fail("get_fonts_online raised an exception: $@");
    }
    pass();
};

subtest 'get_fonts_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('get_fonts_online', 'document', 'File'), 'password' => $utils->get_param_value('get_fonts_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('get_fonts_online', 'document', $params{ document }, 'File');
    $utils->initialize('get_fonts_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->get_fonts_online(%params);
    };
    if ($@) {
        $utils->assert_error('get_fonts_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('get_fonts_online', 'document', 'File');
    }
};

subtest 'get_fonts_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('get_fonts_online', 'document', 'File'), 'password' => $utils->get_param_value('get_fonts_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_fonts_online', 'password', $params{ password }, 'string');
    $utils->initialize('get_fonts_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_fonts_online(%params);
    };
    if ($@) {
        $utils->assert_error('get_fonts_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_fonts_online', 'password', 'string');
    }
};

#
# get_format_scheme test
#
subtest 'get_format_scheme' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $utils->initialize('get_format_scheme', '');
    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        fail("get_format_scheme raised an exception: $@");
    }
    pass();
};

subtest 'get_format_scheme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_format_scheme', 'name', $params{ name }, 'string');
    $utils->initialize('get_format_scheme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'name', 'string');
    }
};

subtest 'get_format_scheme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_format_scheme', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_format_scheme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'slide_index', 'int');
    }
};

subtest 'get_format_scheme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_format_scheme', 'password', $params{ password }, 'string');
    $utils->initialize('get_format_scheme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'password', 'string');
    }
};

subtest 'get_format_scheme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_format_scheme', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_format_scheme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'folder', 'string');
    }
};

subtest 'get_format_scheme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_format_scheme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_format_scheme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_format_scheme', 'password', 'string'), 'folder' => $utils->get_param_value('get_format_scheme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_format_scheme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_format_scheme', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_format_scheme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_format_scheme(%params);
    };
    if ($@) {
        $utils->assert_error('get_format_scheme', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_format_scheme', 'storage', 'string');
    }
};

#
# get_layout_slide test
#
subtest 'get_layout_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $utils->initialize('get_layout_slide', '');
    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        fail("get_layout_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_layout_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_layout_slide', 'name', $params{ name }, 'string');
    $utils->initialize('get_layout_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'name', 'string');
    }
};

subtest 'get_layout_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_layout_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_layout_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'slide_index', 'int');
    }
};

subtest 'get_layout_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_layout_slide', 'password', $params{ password }, 'string');
    $utils->initialize('get_layout_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'password', 'string');
    }
};

subtest 'get_layout_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_layout_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_layout_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'folder', 'string');
    }
};

subtest 'get_layout_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_layout_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_layout_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_layout_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_layout_slide', 'storage', 'string');
    }
};

#
# get_layout_slides test
#
subtest 'get_layout_slides' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $utils->initialize('get_layout_slides', '');
    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        fail("get_layout_slides raised an exception: $@");
    }
    pass();
};

subtest 'get_layout_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_layout_slides', 'name', $params{ name }, 'string');
    $utils->initialize('get_layout_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_layout_slides', 'name', 'string');
    }
};

subtest 'get_layout_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_layout_slides', 'password', $params{ password }, 'string');
    $utils->initialize('get_layout_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_layout_slides', 'password', 'string');
    }
};

subtest 'get_layout_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_layout_slides', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_layout_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_layout_slides', 'folder', 'string');
    }
};

subtest 'get_layout_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_layout_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_layout_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_layout_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_layout_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_layout_slides', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_layout_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_layout_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_layout_slides', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_layout_slides', 'storage', 'string');
    }
};

#
# get_master_slide test
#
subtest 'get_master_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $utils->initialize('get_master_slide', '');
    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        fail("get_master_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_master_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_master_slide', 'name', $params{ name }, 'string');
    $utils->initialize('get_master_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'name', 'string');
    }
};

subtest 'get_master_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_master_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_master_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'slide_index', 'int');
    }
};

subtest 'get_master_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_master_slide', 'password', $params{ password }, 'string');
    $utils->initialize('get_master_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'password', 'string');
    }
};

subtest 'get_master_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_master_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_master_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'folder', 'string');
    }
};

subtest 'get_master_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_master_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_master_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_master_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_master_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_master_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_master_slide', 'storage', 'string');
    }
};

#
# get_master_slides test
#
subtest 'get_master_slides' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $utils->initialize('get_master_slides', '');
    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        fail("get_master_slides raised an exception: $@");
    }
    pass();
};

subtest 'get_master_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_master_slides', 'name', $params{ name }, 'string');
    $utils->initialize('get_master_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_master_slides', 'name', 'string');
    }
};

subtest 'get_master_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_master_slides', 'password', $params{ password }, 'string');
    $utils->initialize('get_master_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_master_slides', 'password', 'string');
    }
};

subtest 'get_master_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_master_slides', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_master_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_master_slides', 'folder', 'string');
    }
};

subtest 'get_master_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_master_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_master_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_master_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_master_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_master_slides', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_master_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_master_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_master_slides', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_master_slides', 'storage', 'string');
    }
};

#
# get_notes_slide test
#
subtest 'get_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $utils->initialize('get_notes_slide', '');
    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        fail("get_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide', 'name', $params{ name }, 'string');
    $utils->initialize('get_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'name', 'string');
    }
};

subtest 'get_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'slide_index', 'int');
    }
};

subtest 'get_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide', 'password', $params{ password }, 'string');
    $utils->initialize('get_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'password', 'string');
    }
};

subtest 'get_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'folder', 'string');
    }
};

subtest 'get_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_notes_slide', 'storage', 'string');
    }
};

#
# get_notes_slide_header_footer test
#
subtest 'get_notes_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $utils->initialize('get_notes_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        fail("get_notes_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'name', $params{ name }, 'string');
    $utils->initialize('get_notes_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'name', 'string');
    }
};

subtest 'get_notes_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_notes_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'slide_index', 'int');
    }
};

subtest 'get_notes_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'password', $params{ password }, 'string');
    $utils->initialize('get_notes_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'password', 'string');
    }
};

subtest 'get_notes_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_notes_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'folder', 'string');
    }
};

subtest 'get_notes_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_notes_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_notes_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_notes_slide_header_footer', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_notes_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_header_footer', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_notes_slide_header_footer', 'storage', 'string');
    }
};

#
# get_notes_slide_online test
#
subtest 'get_notes_slide_online' => sub {
    my %params = ('document' => $utils->get_param_value('get_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('get_notes_slide_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_online', 'password', 'string'));
    $utils->initialize('get_notes_slide_online', '');
    eval {
        my $result = $utils->{api}->get_notes_slide_online(%params);
    };
    if ($@) {
        fail("get_notes_slide_online raised an exception: $@");
    }
    pass();
};

subtest 'get_notes_slide_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('get_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('get_notes_slide_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('get_notes_slide_online', 'document', $params{ document }, 'File');
    $utils->initialize('get_notes_slide_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->get_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('get_notes_slide_online', 'document', 'File');
    }
};

subtest 'get_notes_slide_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('get_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('get_notes_slide_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_notes_slide_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_notes_slide_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_notes_slide_online', 'slide_index', 'int');
    }
};

subtest 'get_notes_slide_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('get_notes_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('get_notes_slide_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_notes_slide_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_notes_slide_online', 'password', $params{ password }, 'string');
    $utils->initialize('get_notes_slide_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_notes_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('get_notes_slide_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_notes_slide_online', 'password', 'string');
    }
};

#
# get_paragraph test
#
subtest 'get_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph', 'sub_shape', 'string'));
    $utils->initialize('get_paragraph', '');
    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        fail("get_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('get_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'name', 'string');
    }
};

subtest 'get_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'slide_index', 'int');
    }
};

subtest 'get_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'shape_index', 'int');
    }
};

subtest 'get_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'paragraph_index', 'int');
    }
};

subtest 'get_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('get_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'password', 'string');
    }
};

subtest 'get_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'folder', 'string');
    }
};

subtest 'get_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'storage', 'string');
    }
};

subtest 'get_paragraph invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_paragraph', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_paragraph', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph', 'sub_shape', 'string');
    }
};

#
# get_paragraph_effective test
#
subtest 'get_paragraph_effective' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_effective', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph_effective', 'sub_shape', 'string'));
    $utils->initialize('get_paragraph_effective', '');
    eval {
        my $result = $utils->{api}->get_paragraph_effective(%params);
    };
    if ($@) {
        fail("get_paragraph_effective raised an exception: $@");
    }
    pass();
};

subtest 'get_paragraph_effective invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_effective', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph_effective', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_paragraph_effective', 'name', $params{ name }, 'string');
    $utils->initialize('get_paragraph_effective', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_paragraph_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_effective', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph_effective', 'name', 'string');
    }
};

subtest 'get_paragraph_effective invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_effective', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph_effective', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_paragraph_effective', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_paragraph_effective', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_paragraph_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_effective', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraph_effective', 'slide_index', 'int');
    }
};

subtest 'get_paragraph_effective invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_effective', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph_effective', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_paragraph_effective', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_paragraph_effective', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_paragraph_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_effective', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraph_effective', 'shape_index', 'int');
    }
};

subtest 'get_paragraph_effective invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_effective', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph_effective', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_paragraph_effective', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_paragraph_effective', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_paragraph_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_effective', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraph_effective', 'paragraph_index', 'int');
    }
};

subtest 'get_paragraph_effective invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_effective', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph_effective', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_paragraph_effective', 'password', $params{ password }, 'string');
    $utils->initialize('get_paragraph_effective', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_paragraph_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_effective', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph_effective', 'password', 'string');
    }
};

subtest 'get_paragraph_effective invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_effective', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph_effective', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_paragraph_effective', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_paragraph_effective', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_paragraph_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_effective', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph_effective', 'folder', 'string');
    }
};

subtest 'get_paragraph_effective invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_effective', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph_effective', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_paragraph_effective', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_paragraph_effective', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_paragraph_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_effective', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph_effective', 'storage', 'string');
    }
};

subtest 'get_paragraph_effective invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_effective', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraph_effective', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_paragraph_effective', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_paragraph_effective', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_paragraph_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_effective', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph_effective', 'sub_shape', 'string');
    }
};

#
# get_paragraph_rectangle test
#
subtest 'get_paragraph_rectangle' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_rectangle', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_rectangle', 'storage', 'string'));
    $utils->initialize('get_paragraph_rectangle', '');
    eval {
        my $result = $utils->{api}->get_paragraph_rectangle(%params);
    };
    if ($@) {
        fail("get_paragraph_rectangle raised an exception: $@");
    }
    pass();
};

subtest 'get_paragraph_rectangle invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_rectangle', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_rectangle', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_paragraph_rectangle', 'name', $params{ name }, 'string');
    $utils->initialize('get_paragraph_rectangle', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_paragraph_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_rectangle', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph_rectangle', 'name', 'string');
    }
};

subtest 'get_paragraph_rectangle invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_rectangle', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_rectangle', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_paragraph_rectangle', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_paragraph_rectangle', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_paragraph_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_rectangle', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraph_rectangle', 'slide_index', 'int');
    }
};

subtest 'get_paragraph_rectangle invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_rectangle', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_rectangle', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_paragraph_rectangle', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_paragraph_rectangle', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_paragraph_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_rectangle', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraph_rectangle', 'shape_index', 'int');
    }
};

subtest 'get_paragraph_rectangle invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_rectangle', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_rectangle', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_paragraph_rectangle', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_paragraph_rectangle', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_paragraph_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_rectangle', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraph_rectangle', 'paragraph_index', 'int');
    }
};

subtest 'get_paragraph_rectangle invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_rectangle', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_rectangle', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_paragraph_rectangle', 'password', $params{ password }, 'string');
    $utils->initialize('get_paragraph_rectangle', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_paragraph_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_rectangle', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph_rectangle', 'password', 'string');
    }
};

subtest 'get_paragraph_rectangle invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_rectangle', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_rectangle', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_paragraph_rectangle', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_paragraph_rectangle', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_paragraph_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_rectangle', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph_rectangle', 'folder', 'string');
    }
};

subtest 'get_paragraph_rectangle invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraph_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraph_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraph_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_paragraph_rectangle', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_paragraph_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraph_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraph_rectangle', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_paragraph_rectangle', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_paragraph_rectangle', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_paragraph_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraph_rectangle', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraph_rectangle', 'storage', 'string');
    }
};

#
# get_paragraphs test
#
subtest 'get_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraphs', 'sub_shape', 'string'));
    $utils->initialize('get_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        fail("get_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraphs', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_paragraphs', 'name', $params{ name }, 'string');
    $utils->initialize('get_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'name', 'string');
    }
};

subtest 'get_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraphs', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_paragraphs', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'slide_index', 'int');
    }
};

subtest 'get_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraphs', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_paragraphs', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'shape_index', 'int');
    }
};

subtest 'get_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraphs', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_paragraphs', 'password', $params{ password }, 'string');
    $utils->initialize('get_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'password', 'string');
    }
};

subtest 'get_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraphs', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_paragraphs', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'folder', 'string');
    }
};

subtest 'get_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraphs', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_paragraphs', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'storage', 'string');
    }
};

subtest 'get_paragraphs invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_paragraphs', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_paragraphs', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_paragraphs', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_paragraphs', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_paragraphs', 'sub_shape', 'string');
    }
};

#
# get_placeholder test
#
subtest 'get_placeholder' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $utils->initialize('get_placeholder', '');
    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        fail("get_placeholder raised an exception: $@");
    }
    pass();
};

subtest 'get_placeholder invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_placeholder', 'name', $params{ name }, 'string');
    $utils->initialize('get_placeholder', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'name', 'string');
    }
};

subtest 'get_placeholder invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_placeholder', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_placeholder', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'slide_index', 'int');
    }
};

subtest 'get_placeholder invalid placeholder_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ placeholder_index } = $utils->invalidize_param_value('get_placeholder', 'placeholder_index', $params{ placeholder_index }, 'int');
    $utils->initialize('get_placeholder', 'placeholder_index', $params{ placeholder_index });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'placeholder_index', $params{ placeholder_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'placeholder_index', 'int');
    }
};

subtest 'get_placeholder invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_placeholder', 'password', $params{ password }, 'string');
    $utils->initialize('get_placeholder', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'password', 'string');
    }
};

subtest 'get_placeholder invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_placeholder', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_placeholder', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'folder', 'string');
    }
};

subtest 'get_placeholder invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholder', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholder', 'slide_index', 'int'), 'placeholder_index' => $utils->get_param_value('get_placeholder', 'placeholder_index', 'int'), 'password' => $utils->get_param_value('get_placeholder', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholder', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholder', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_placeholder', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_placeholder', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_placeholder(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholder', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_placeholder', 'storage', 'string');
    }
};

#
# get_placeholders test
#
subtest 'get_placeholders' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $utils->initialize('get_placeholders', '');
    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        fail("get_placeholders raised an exception: $@");
    }
    pass();
};

subtest 'get_placeholders invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_placeholders', 'name', $params{ name }, 'string');
    $utils->initialize('get_placeholders', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'name', 'string');
    }
};

subtest 'get_placeholders invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_placeholders', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_placeholders', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'slide_index', 'int');
    }
};

subtest 'get_placeholders invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_placeholders', 'password', $params{ password }, 'string');
    $utils->initialize('get_placeholders', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'password', 'string');
    }
};

subtest 'get_placeholders invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_placeholders', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_placeholders', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'folder', 'string');
    }
};

subtest 'get_placeholders invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_placeholders', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_placeholders', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_placeholders', 'password', 'string'), 'folder' => $utils->get_param_value('get_placeholders', 'folder', 'string'), 'storage' => $utils->get_param_value('get_placeholders', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_placeholders', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_placeholders', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_placeholders(%params);
    };
    if ($@) {
        $utils->assert_error('get_placeholders', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_placeholders', 'storage', 'string');
    }
};

#
# get_portion test
#
subtest 'get_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $utils->initialize('get_portion', '');
    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        fail("get_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_portion', 'name', $params{ name }, 'string');
    $utils->initialize('get_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion', 'name', 'string');
    }
};

subtest 'get_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion', 'slide_index', 'int');
    }
};

subtest 'get_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion', 'shape_index', 'int');
    }
};

subtest 'get_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion', 'paragraph_index', 'int');
    }
};

subtest 'get_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_portion', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('get_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion', 'portion_index', 'int');
    }
};

subtest 'get_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_portion', 'password', $params{ password }, 'string');
    $utils->initialize('get_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion', 'password', 'string');
    }
};

subtest 'get_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion', 'folder', 'string');
    }
};

subtest 'get_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion', 'storage', 'string');
    }
};

subtest 'get_portion invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_portion', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_portion', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion', 'sub_shape', 'string');
    }
};

#
# get_portion_effective test
#
subtest 'get_portion_effective' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $utils->initialize('get_portion_effective', '');
    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        fail("get_portion_effective raised an exception: $@");
    }
    pass();
};

subtest 'get_portion_effective invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_portion_effective', 'name', $params{ name }, 'string');
    $utils->initialize('get_portion_effective', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_effective', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion_effective', 'name', 'string');
    }
};

subtest 'get_portion_effective invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_portion_effective', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_portion_effective', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_effective', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion_effective', 'slide_index', 'int');
    }
};

subtest 'get_portion_effective invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_portion_effective', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_portion_effective', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_effective', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion_effective', 'shape_index', 'int');
    }
};

subtest 'get_portion_effective invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_portion_effective', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_portion_effective', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_effective', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion_effective', 'paragraph_index', 'int');
    }
};

subtest 'get_portion_effective invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_portion_effective', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('get_portion_effective', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_effective', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion_effective', 'portion_index', 'int');
    }
};

subtest 'get_portion_effective invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_portion_effective', 'password', $params{ password }, 'string');
    $utils->initialize('get_portion_effective', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_effective', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion_effective', 'password', 'string');
    }
};

subtest 'get_portion_effective invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_portion_effective', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_portion_effective', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_effective', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion_effective', 'folder', 'string');
    }
};

subtest 'get_portion_effective invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_portion_effective', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_portion_effective', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_effective', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion_effective', 'storage', 'string');
    }
};

subtest 'get_portion_effective invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_effective', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_effective', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_effective', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_effective', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_effective', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_effective', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_effective', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_effective', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portion_effective', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_portion_effective', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_portion_effective', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_portion_effective(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_effective', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion_effective', 'sub_shape', 'string');
    }
};

#
# get_portion_rectangle test
#
subtest 'get_portion_rectangle' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_rectangle', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_rectangle', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_rectangle', 'storage', 'string'));
    $utils->initialize('get_portion_rectangle', '');
    eval {
        my $result = $utils->{api}->get_portion_rectangle(%params);
    };
    if ($@) {
        fail("get_portion_rectangle raised an exception: $@");
    }
    pass();
};

subtest 'get_portion_rectangle invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_rectangle', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_rectangle', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_rectangle', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_portion_rectangle', 'name', $params{ name }, 'string');
    $utils->initialize('get_portion_rectangle', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_portion_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_rectangle', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion_rectangle', 'name', 'string');
    }
};

subtest 'get_portion_rectangle invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_rectangle', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_rectangle', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_rectangle', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_portion_rectangle', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_portion_rectangle', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_portion_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_rectangle', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion_rectangle', 'slide_index', 'int');
    }
};

subtest 'get_portion_rectangle invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_rectangle', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_rectangle', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_rectangle', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_portion_rectangle', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_portion_rectangle', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_portion_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_rectangle', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion_rectangle', 'shape_index', 'int');
    }
};

subtest 'get_portion_rectangle invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_rectangle', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_rectangle', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_rectangle', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_portion_rectangle', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_portion_rectangle', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_portion_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_rectangle', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion_rectangle', 'paragraph_index', 'int');
    }
};

subtest 'get_portion_rectangle invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_rectangle', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_rectangle', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_rectangle', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_portion_rectangle', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('get_portion_rectangle', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_portion_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_rectangle', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portion_rectangle', 'portion_index', 'int');
    }
};

subtest 'get_portion_rectangle invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_rectangle', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_rectangle', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_rectangle', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_portion_rectangle', 'password', $params{ password }, 'string');
    $utils->initialize('get_portion_rectangle', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_portion_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_rectangle', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion_rectangle', 'password', 'string');
    }
};

subtest 'get_portion_rectangle invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_rectangle', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_rectangle', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_rectangle', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_portion_rectangle', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_portion_rectangle', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_portion_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_rectangle', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion_rectangle', 'folder', 'string');
    }
};

subtest 'get_portion_rectangle invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_portion_rectangle', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portion_rectangle', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portion_rectangle', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portion_rectangle', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_portion_rectangle', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_portion_rectangle', 'password', 'string'), 'folder' => $utils->get_param_value('get_portion_rectangle', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portion_rectangle', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_portion_rectangle', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_portion_rectangle', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_portion_rectangle(%params);
    };
    if ($@) {
        $utils->assert_error('get_portion_rectangle', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portion_rectangle', 'storage', 'string');
    }
};

#
# get_portions test
#
subtest 'get_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portions', 'sub_shape', 'string'));
    $utils->initialize('get_portions', '');
    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        fail("get_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portions', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_portions', 'name', $params{ name }, 'string');
    $utils->initialize('get_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portions', 'name', 'string');
    }
};

subtest 'get_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portions', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_portions', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portions', 'slide_index', 'int');
    }
};

subtest 'get_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portions', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_portions', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portions', 'shape_index', 'int');
    }
};

subtest 'get_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portions', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_portions', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_portions', 'paragraph_index', 'int');
    }
};

subtest 'get_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portions', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_portions', 'password', $params{ password }, 'string');
    $utils->initialize('get_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portions', 'password', 'string');
    }
};

subtest 'get_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portions', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_portions', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portions', 'folder', 'string');
    }
};

subtest 'get_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portions', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_portions', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portions', 'storage', 'string');
    }
};

subtest 'get_portions invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_portions', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_portions', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_portions', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_portions', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_portions', 'sub_shape', 'string');
    }
};

#
# get_presentation test
#
subtest 'get_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $utils->initialize('get_presentation', '');
    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        fail("get_presentation raised an exception: $@");
    }
    pass();
};

subtest 'get_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_presentation', 'name', $params{ name }, 'string');
    $utils->initialize('get_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation', 'name', 'string');
    }
};

subtest 'get_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_presentation', 'password', $params{ password }, 'string');
    $utils->initialize('get_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation', 'password', 'string');
    }
};

subtest 'get_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_presentation', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation', 'folder', 'string');
    }
};

subtest 'get_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_presentation', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation', 'storage', 'string');
    }
};

#
# get_presentation_images test
#
subtest 'get_presentation_images' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $utils->initialize('get_presentation_images', '');
    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        fail("get_presentation_images raised an exception: $@");
    }
    pass();
};

subtest 'get_presentation_images invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_presentation_images', 'name', $params{ name }, 'string');
    $utils->initialize('get_presentation_images', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_images', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation_images', 'name', 'string');
    }
};

subtest 'get_presentation_images invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_presentation_images', 'password', $params{ password }, 'string');
    $utils->initialize('get_presentation_images', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_images', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation_images', 'password', 'string');
    }
};

subtest 'get_presentation_images invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_presentation_images', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_presentation_images', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_images', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation_images', 'folder', 'string');
    }
};

subtest 'get_presentation_images invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_images', 'name', 'string'), 'password' => $utils->get_param_value('get_presentation_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_images', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_presentation_images', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_presentation_images', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_presentation_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_images', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation_images', 'storage', 'string');
    }
};

#
# get_presentation_text_items test
#
subtest 'get_presentation_text_items' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $utils->initialize('get_presentation_text_items', '');
    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        fail("get_presentation_text_items raised an exception: $@");
    }
    pass();
};

subtest 'get_presentation_text_items invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_presentation_text_items', 'name', $params{ name }, 'string');
    $utils->initialize('get_presentation_text_items', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'name', 'string');
    }
};

subtest 'get_presentation_text_items invalid with_empty' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ with_empty } = $utils->invalidize_param_value('get_presentation_text_items', 'with_empty', $params{ with_empty }, 'boolean');
    $utils->initialize('get_presentation_text_items', 'with_empty', $params{ with_empty });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'with_empty', $params{ with_empty }, 'boolean', $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'with_empty', 'boolean');
    }
};

subtest 'get_presentation_text_items invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_presentation_text_items', 'password', $params{ password }, 'string');
    $utils->initialize('get_presentation_text_items', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'password', 'string');
    }
};

subtest 'get_presentation_text_items invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_presentation_text_items', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_presentation_text_items', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'folder', 'string');
    }
};

subtest 'get_presentation_text_items invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_presentation_text_items', 'name', 'string'), 'with_empty' => $utils->get_param_value('get_presentation_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_presentation_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_presentation_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_presentation_text_items', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_presentation_text_items', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_presentation_text_items', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_presentation_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_presentation_text_items', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_presentation_text_items', 'storage', 'string');
    }
};

#
# get_protection_properties test
#
subtest 'get_protection_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $utils->initialize('get_protection_properties', '');
    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        fail("get_protection_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_protection_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_protection_properties', 'name', $params{ name }, 'string');
    $utils->initialize('get_protection_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_protection_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_protection_properties', 'name', 'string');
    }
};

subtest 'get_protection_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_protection_properties', 'password', $params{ password }, 'string');
    $utils->initialize('get_protection_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_protection_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_protection_properties', 'password', 'string');
    }
};

subtest 'get_protection_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_protection_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_protection_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_protection_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_protection_properties', 'folder', 'string');
    }
};

subtest 'get_protection_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_protection_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_protection_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_protection_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_protection_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_protection_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_protection_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_protection_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_protection_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_protection_properties', 'storage', 'string');
    }
};

#
# get_sections test
#
subtest 'get_sections' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $utils->initialize('get_sections', '');
    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        fail("get_sections raised an exception: $@");
    }
    pass();
};

subtest 'get_sections invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_sections', 'name', $params{ name }, 'string');
    $utils->initialize('get_sections', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_sections', 'name', 'string');
    }
};

subtest 'get_sections invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_sections', 'password', $params{ password }, 'string');
    $utils->initialize('get_sections', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_sections', 'password', 'string');
    }
};

subtest 'get_sections invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_sections', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_sections', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_sections', 'folder', 'string');
    }
};

subtest 'get_sections invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_sections', 'name', 'string'), 'password' => $utils->get_param_value('get_sections', 'password', 'string'), 'folder' => $utils->get_param_value('get_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('get_sections', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_sections', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_sections', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_sections(%params);
    };
    if ($@) {
        $utils->assert_error('get_sections', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_sections', 'storage', 'string');
    }
};

#
# get_shape test
#
subtest 'get_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_shape', 'sub_shape', 'string'));
    $utils->initialize('get_shape', '');
    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        fail("get_shape raised an exception: $@");
    }
    pass();
};

subtest 'get_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_shape', 'name', $params{ name }, 'string');
    $utils->initialize('get_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shape', 'name', 'string');
    }
};

subtest 'get_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_shape', 'slide_index', 'int');
    }
};

subtest 'get_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_shape', 'shape_index', 'int');
    }
};

subtest 'get_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_shape', 'password', $params{ password }, 'string');
    $utils->initialize('get_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shape', 'password', 'string');
    }
};

subtest 'get_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shape', 'folder', 'string');
    }
};

subtest 'get_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shape', 'storage', 'string');
    }
};

subtest 'get_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shape', 'sub_shape', 'string');
    }
};

#
# get_shape_geometry_path test
#
subtest 'get_shape_geometry_path' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape_geometry_path', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape_geometry_path', 'storage', 'string'));
    $utils->initialize('get_shape_geometry_path', '');
    eval {
        my $result = $utils->{api}->get_shape_geometry_path(%params);
    };
    if ($@) {
        fail("get_shape_geometry_path raised an exception: $@");
    }
    pass();
};

subtest 'get_shape_geometry_path invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape_geometry_path', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape_geometry_path', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_shape_geometry_path', 'name', $params{ name }, 'string');
    $utils->initialize('get_shape_geometry_path', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape_geometry_path', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shape_geometry_path', 'name', 'string');
    }
};

subtest 'get_shape_geometry_path invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape_geometry_path', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape_geometry_path', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_shape_geometry_path', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_shape_geometry_path', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape_geometry_path', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_shape_geometry_path', 'slide_index', 'int');
    }
};

subtest 'get_shape_geometry_path invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape_geometry_path', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape_geometry_path', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_shape_geometry_path', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_shape_geometry_path', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape_geometry_path', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_shape_geometry_path', 'shape_index', 'int');
    }
};

subtest 'get_shape_geometry_path invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape_geometry_path', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape_geometry_path', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_shape_geometry_path', 'password', $params{ password }, 'string');
    $utils->initialize('get_shape_geometry_path', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape_geometry_path', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shape_geometry_path', 'password', 'string');
    }
};

subtest 'get_shape_geometry_path invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape_geometry_path', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape_geometry_path', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_shape_geometry_path', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_shape_geometry_path', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape_geometry_path', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shape_geometry_path', 'folder', 'string');
    }
};

subtest 'get_shape_geometry_path invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_shape_geometry_path', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('get_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shape_geometry_path', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_shape_geometry_path', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_shape_geometry_path', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('get_shape_geometry_path', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shape_geometry_path', 'storage', 'string');
    }
};

#
# get_shapes test
#
subtest 'get_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'), 'shape_type' => $utils->get_param_value('get_shapes', 'shape_type', 'string'), 'sub_shape' => $utils->get_param_value('get_shapes', 'sub_shape', 'string'));
    $utils->initialize('get_shapes', '');
    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        fail("get_shapes raised an exception: $@");
    }
    pass();
};

subtest 'get_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'), 'shape_type' => $utils->get_param_value('get_shapes', 'shape_type', 'string'), 'sub_shape' => $utils->get_param_value('get_shapes', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_shapes', 'name', $params{ name }, 'string');
    $utils->initialize('get_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shapes', 'name', 'string');
    }
};

subtest 'get_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'), 'shape_type' => $utils->get_param_value('get_shapes', 'shape_type', 'string'), 'sub_shape' => $utils->get_param_value('get_shapes', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_shapes', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_shapes', 'slide_index', 'int');
    }
};

subtest 'get_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'), 'shape_type' => $utils->get_param_value('get_shapes', 'shape_type', 'string'), 'sub_shape' => $utils->get_param_value('get_shapes', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_shapes', 'password', $params{ password }, 'string');
    $utils->initialize('get_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shapes', 'password', 'string');
    }
};

subtest 'get_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'), 'shape_type' => $utils->get_param_value('get_shapes', 'shape_type', 'string'), 'sub_shape' => $utils->get_param_value('get_shapes', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_shapes', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shapes', 'folder', 'string');
    }
};

subtest 'get_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'), 'shape_type' => $utils->get_param_value('get_shapes', 'shape_type', 'string'), 'sub_shape' => $utils->get_param_value('get_shapes', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_shapes', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shapes', 'storage', 'string');
    }
};

subtest 'get_shapes invalid shape_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'), 'shape_type' => $utils->get_param_value('get_shapes', 'shape_type', 'string'), 'sub_shape' => $utils->get_param_value('get_shapes', 'sub_shape', 'string'));
    $params{ shape_type } = $utils->invalidize_param_value('get_shapes', 'shape_type', $params{ shape_type }, 'string');
    $utils->initialize('get_shapes', 'shape_type', $params{ shape_type });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'shape_type', $params{ shape_type }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shapes', 'shape_type', 'string');
    }
};

subtest 'get_shapes invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_shapes', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_shapes', 'storage', 'string'), 'shape_type' => $utils->get_param_value('get_shapes', 'shape_type', 'string'), 'sub_shape' => $utils->get_param_value('get_shapes', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_shapes', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_shapes', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_shapes', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_shapes', 'sub_shape', 'string');
    }
};

#
# get_slide test
#
subtest 'get_slide' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $utils->initialize('get_slide', '');
    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        fail("get_slide raised an exception: $@");
    }
    pass();
};

subtest 'get_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide', 'name', $params{ name }, 'string');
    $utils->initialize('get_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide', 'name', 'string');
    }
};

subtest 'get_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_slide', 'slide_index', 'int');
    }
};

subtest 'get_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide', 'password', $params{ password }, 'string');
    $utils->initialize('get_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide', 'password', 'string');
    }
};

subtest 'get_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide', 'folder', 'string');
    }
};

subtest 'get_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide', 'storage', 'string');
    }
};

#
# get_slide_comments test
#
subtest 'get_slide_comments' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $utils->initialize('get_slide_comments', '');
    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        fail("get_slide_comments raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_comments invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_comments', 'name', $params{ name }, 'string');
    $utils->initialize('get_slide_comments', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'name', 'string');
    }
};

subtest 'get_slide_comments invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_comments', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_slide_comments', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'slide_index', 'int');
    }
};

subtest 'get_slide_comments invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_comments', 'password', $params{ password }, 'string');
    $utils->initialize('get_slide_comments', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'password', 'string');
    }
};

subtest 'get_slide_comments invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_comments', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_slide_comments', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'folder', 'string');
    }
};

subtest 'get_slide_comments invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_comments', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_comments', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_comments', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_comments', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_comments', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_comments', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_slide_comments', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_comments(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_comments', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_comments', 'storage', 'string');
    }
};

#
# get_slide_header_footer test
#
subtest 'get_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $utils->initialize('get_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        fail("get_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_header_footer', 'name', $params{ name }, 'string');
    $utils->initialize('get_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'name', 'string');
    }
};

subtest 'get_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_header_footer', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'slide_index', 'int');
    }
};

subtest 'get_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_header_footer', 'password', $params{ password }, 'string');
    $utils->initialize('get_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'password', 'string');
    }
};

subtest 'get_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_header_footer', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'folder', 'string');
    }
};

subtest 'get_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_header_footer', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_header_footer', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_header_footer', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_header_footer', 'storage', 'string');
    }
};

#
# get_slide_images test
#
subtest 'get_slide_images' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $utils->initialize('get_slide_images', '');
    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        fail("get_slide_images raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_images invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_images', 'name', $params{ name }, 'string');
    $utils->initialize('get_slide_images', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'name', 'string');
    }
};

subtest 'get_slide_images invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_images', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_slide_images', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'slide_index', 'int');
    }
};

subtest 'get_slide_images invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_images', 'password', $params{ password }, 'string');
    $utils->initialize('get_slide_images', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'password', 'string');
    }
};

subtest 'get_slide_images invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_images', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_slide_images', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'folder', 'string');
    }
};

subtest 'get_slide_images invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_images', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_images', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_slide_images', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_images', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_images', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_images', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_slide_images', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_images(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_images', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_images', 'storage', 'string');
    }
};

#
# get_slide_properties test
#
subtest 'get_slide_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $utils->initialize('get_slide_properties', '');
    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        fail("get_slide_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_properties', 'name', $params{ name }, 'string');
    $utils->initialize('get_slide_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_properties', 'name', 'string');
    }
};

subtest 'get_slide_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_properties', 'password', $params{ password }, 'string');
    $utils->initialize('get_slide_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_properties', 'password', 'string');
    }
};

subtest 'get_slide_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_slide_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_properties', 'folder', 'string');
    }
};

subtest 'get_slide_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_slide_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_properties', 'storage', 'string');
    }
};

#
# get_slide_show_properties test
#
subtest 'get_slide_show_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_show_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_show_properties', 'storage', 'string'));
    $utils->initialize('get_slide_show_properties', '');
    eval {
        my $result = $utils->{api}->get_slide_show_properties(%params);
    };
    if ($@) {
        fail("get_slide_show_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_show_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_show_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_show_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_show_properties', 'name', $params{ name }, 'string');
    $utils->initialize('get_slide_show_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_show_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_show_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_show_properties', 'name', 'string');
    }
};

subtest 'get_slide_show_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_show_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_show_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_show_properties', 'password', $params{ password }, 'string');
    $utils->initialize('get_slide_show_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_show_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_show_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_show_properties', 'password', 'string');
    }
};

subtest 'get_slide_show_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_show_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_show_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_show_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_slide_show_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_show_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_show_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_show_properties', 'folder', 'string');
    }
};

subtest 'get_slide_show_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_show_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_show_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_show_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_slide_show_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_show_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_show_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_show_properties', 'storage', 'string');
    }
};

#
# get_slide_text_items test
#
subtest 'get_slide_text_items' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $utils->initialize('get_slide_text_items', '');
    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        fail("get_slide_text_items raised an exception: $@");
    }
    pass();
};

subtest 'get_slide_text_items invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slide_text_items', 'name', $params{ name }, 'string');
    $utils->initialize('get_slide_text_items', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'name', 'string');
    }
};

subtest 'get_slide_text_items invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_slide_text_items', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_slide_text_items', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'slide_index', 'int');
    }
};

subtest 'get_slide_text_items invalid with_empty' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ with_empty } = $utils->invalidize_param_value('get_slide_text_items', 'with_empty', $params{ with_empty }, 'boolean');
    $utils->initialize('get_slide_text_items', 'with_empty', $params{ with_empty });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'with_empty', $params{ with_empty }, 'boolean', $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'with_empty', 'boolean');
    }
};

subtest 'get_slide_text_items invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slide_text_items', 'password', $params{ password }, 'string');
    $utils->initialize('get_slide_text_items', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'password', 'string');
    }
};

subtest 'get_slide_text_items invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slide_text_items', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_slide_text_items', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'folder', 'string');
    }
};

subtest 'get_slide_text_items invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slide_text_items', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_slide_text_items', 'slide_index', 'int'), 'with_empty' => $utils->get_param_value('get_slide_text_items', 'with_empty', 'boolean'), 'password' => $utils->get_param_value('get_slide_text_items', 'password', 'string'), 'folder' => $utils->get_param_value('get_slide_text_items', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slide_text_items', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slide_text_items', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_slide_text_items', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slide_text_items(%params);
    };
    if ($@) {
        $utils->assert_error('get_slide_text_items', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slide_text_items', 'storage', 'string');
    }
};

#
# get_slides test
#
subtest 'get_slides' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $utils->initialize('get_slides', '');
    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        fail("get_slides raised an exception: $@");
    }
    pass();
};

subtest 'get_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_slides', 'name', $params{ name }, 'string');
    $utils->initialize('get_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slides', 'name', 'string');
    }
};

subtest 'get_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_slides', 'password', $params{ password }, 'string');
    $utils->initialize('get_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slides', 'password', 'string');
    }
};

subtest 'get_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_slides', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slides', 'folder', 'string');
    }
};

subtest 'get_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_slides', 'name', 'string'), 'password' => $utils->get_param_value('get_slides', 'password', 'string'), 'folder' => $utils->get_param_value('get_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('get_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_slides', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_slides(%params);
    };
    if ($@) {
        $utils->assert_error('get_slides', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_slides', 'storage', 'string');
    }
};

#
# get_special_slide_animation test
#
subtest 'get_special_slide_animation' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $utils->initialize('get_special_slide_animation', '');
    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        fail("get_special_slide_animation raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_animation', 'name', $params{ name }, 'string');
    $utils->initialize('get_special_slide_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'name', 'string');
    }
};

subtest 'get_special_slide_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_animation', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_special_slide_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'slide_index', 'int');
    }
};

subtest 'get_special_slide_animation invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_animation', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('get_special_slide_animation', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'slide_type', 'string');
    }
};

subtest 'get_special_slide_animation invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_animation', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_special_slide_animation', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'shape_index', 'int');
    }
};

subtest 'get_special_slide_animation invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_animation', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_special_slide_animation', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'paragraph_index', 'int');
    }
};

subtest 'get_special_slide_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_animation', 'password', $params{ password }, 'string');
    $utils->initialize('get_special_slide_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'password', 'string');
    }
};

subtest 'get_special_slide_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_animation', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_special_slide_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'folder', 'string');
    }
};

subtest 'get_special_slide_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_animation', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_animation', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_animation', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_animation', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_special_slide_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_animation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_animation', 'storage', 'string');
    }
};

#
# get_special_slide_paragraph test
#
subtest 'get_special_slide_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $utils->initialize('get_special_slide_paragraph', '');
    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        fail("get_special_slide_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('get_special_slide_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'name', 'string');
    }
};

subtest 'get_special_slide_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_special_slide_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'slide_index', 'int');
    }
};

subtest 'get_special_slide_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_paragraph', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('get_special_slide_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'slide_type', 'string');
    }
};

subtest 'get_special_slide_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_special_slide_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'shape_index', 'int');
    }
};

subtest 'get_special_slide_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'paragraph_index', 'int');
    }
};

subtest 'get_special_slide_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('get_special_slide_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'password', 'string');
    }
};

subtest 'get_special_slide_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_special_slide_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'folder', 'string');
    }
};

subtest 'get_special_slide_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_special_slide_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'storage', 'string');
    }
};

subtest 'get_special_slide_paragraph invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_special_slide_paragraph', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_special_slide_paragraph', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraph', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraph', 'sub_shape', 'string');
    }
};

#
# get_special_slide_paragraphs test
#
subtest 'get_special_slide_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraphs', 'sub_shape', 'string'));
    $utils->initialize('get_special_slide_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        fail("get_special_slide_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'name', $params{ name }, 'string');
    $utils->initialize('get_special_slide_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'name', 'string');
    }
};

subtest 'get_special_slide_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_special_slide_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'slide_index', 'int');
    }
};

subtest 'get_special_slide_paragraphs invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('get_special_slide_paragraphs', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'slide_type', 'string');
    }
};

subtest 'get_special_slide_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_special_slide_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'shape_index', 'int');
    }
};

subtest 'get_special_slide_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'password', $params{ password }, 'string');
    $utils->initialize('get_special_slide_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'password', 'string');
    }
};

subtest 'get_special_slide_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_special_slide_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'folder', 'string');
    }
};

subtest 'get_special_slide_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_special_slide_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'storage', 'string');
    }
};

subtest 'get_special_slide_paragraphs invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_paragraphs', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_paragraphs', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_paragraphs', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_paragraphs', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_special_slide_paragraphs', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_special_slide_paragraphs', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_special_slide_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_paragraphs', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_paragraphs', 'sub_shape', 'string');
    }
};

#
# get_special_slide_portion test
#
subtest 'get_special_slide_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $utils->initialize('get_special_slide_portion', '');
    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        fail("get_special_slide_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_portion', 'name', $params{ name }, 'string');
    $utils->initialize('get_special_slide_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'name', 'string');
    }
};

subtest 'get_special_slide_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_special_slide_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'slide_index', 'int');
    }
};

subtest 'get_special_slide_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_portion', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('get_special_slide_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'slide_type', 'string');
    }
};

subtest 'get_special_slide_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_special_slide_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'shape_index', 'int');
    }
};

subtest 'get_special_slide_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_special_slide_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'paragraph_index', 'int');
    }
};

subtest 'get_special_slide_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_special_slide_portion', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('get_special_slide_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'portion_index', 'int');
    }
};

subtest 'get_special_slide_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_portion', 'password', $params{ password }, 'string');
    $utils->initialize('get_special_slide_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'password', 'string');
    }
};

subtest 'get_special_slide_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_special_slide_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'folder', 'string');
    }
};

subtest 'get_special_slide_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_special_slide_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'storage', 'string');
    }
};

subtest 'get_special_slide_portion invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_special_slide_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portion', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_special_slide_portion', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_special_slide_portion', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portion', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portion', 'sub_shape', 'string');
    }
};

#
# get_special_slide_portions test
#
subtest 'get_special_slide_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $utils->initialize('get_special_slide_portions', '');
    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        fail("get_special_slide_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_portions', 'name', $params{ name }, 'string');
    $utils->initialize('get_special_slide_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'name', 'string');
    }
};

subtest 'get_special_slide_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_portions', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_special_slide_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'slide_index', 'int');
    }
};

subtest 'get_special_slide_portions invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_portions', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('get_special_slide_portions', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'slide_type', 'string');
    }
};

subtest 'get_special_slide_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_portions', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_special_slide_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'shape_index', 'int');
    }
};

subtest 'get_special_slide_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_special_slide_portions', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_special_slide_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'paragraph_index', 'int');
    }
};

subtest 'get_special_slide_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_portions', 'password', $params{ password }, 'string');
    $utils->initialize('get_special_slide_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'password', 'string');
    }
};

subtest 'get_special_slide_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_portions', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_special_slide_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'folder', 'string');
    }
};

subtest 'get_special_slide_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_portions', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_special_slide_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'storage', 'string');
    }
};

subtest 'get_special_slide_portions invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_portions', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_portions', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_portions', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_special_slide_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_portions', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_portions', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_special_slide_portions', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_special_slide_portions', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_special_slide_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_portions', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_portions', 'sub_shape', 'string');
    }
};

#
# get_special_slide_shape test
#
subtest 'get_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shape', 'sub_shape', 'string'));
    $utils->initialize('get_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        fail("get_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_shape', 'name', $params{ name }, 'string');
    $utils->initialize('get_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'name', 'string');
    }
};

subtest 'get_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'slide_index', 'int');
    }
};

subtest 'get_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_shape', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('get_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'slide_type', 'string');
    }
};

subtest 'get_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_special_slide_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'shape_index', 'int');
    }
};

subtest 'get_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_shape', 'password', $params{ password }, 'string');
    $utils->initialize('get_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'password', 'string');
    }
};

subtest 'get_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'folder', 'string');
    }
};

subtest 'get_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'storage', 'string');
    }
};

subtest 'get_special_slide_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('get_special_slide_shape', 'shape_index', 'int'), 'password' => $utils->get_param_value('get_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_special_slide_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shape', 'sub_shape', 'string');
    }
};

#
# get_special_slide_shapes test
#
subtest 'get_special_slide_shapes' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shapes', 'sub_shape', 'string'));
    $utils->initialize('get_special_slide_shapes', '');
    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        fail("get_special_slide_shapes raised an exception: $@");
    }
    pass();
};

subtest 'get_special_slide_shapes invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shapes', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_special_slide_shapes', 'name', $params{ name }, 'string');
    $utils->initialize('get_special_slide_shapes', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'name', 'string');
    }
};

subtest 'get_special_slide_shapes invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shapes', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_special_slide_shapes', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_special_slide_shapes', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'slide_index', 'int');
    }
};

subtest 'get_special_slide_shapes invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shapes', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('get_special_slide_shapes', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('get_special_slide_shapes', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'slide_type', 'string');
    }
};

subtest 'get_special_slide_shapes invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shapes', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_special_slide_shapes', 'password', $params{ password }, 'string');
    $utils->initialize('get_special_slide_shapes', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'password', 'string');
    }
};

subtest 'get_special_slide_shapes invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shapes', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_special_slide_shapes', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_special_slide_shapes', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'folder', 'string');
    }
};

subtest 'get_special_slide_shapes invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shapes', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_special_slide_shapes', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_special_slide_shapes', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'storage', 'string');
    }
};

subtest 'get_special_slide_shapes invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('get_special_slide_shapes', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_special_slide_shapes', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('get_special_slide_shapes', 'slide_type', 'string'), 'password' => $utils->get_param_value('get_special_slide_shapes', 'password', 'string'), 'folder' => $utils->get_param_value('get_special_slide_shapes', 'folder', 'string'), 'storage' => $utils->get_param_value('get_special_slide_shapes', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('get_special_slide_shapes', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('get_special_slide_shapes', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('get_special_slide_shapes', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->get_special_slide_shapes(%params);
    };
    if ($@) {
        $utils->assert_error('get_special_slide_shapes', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('get_special_slide_shapes', 'sub_shape', 'string');
    }
};

#
# get_table_cell_paragraph test
#
subtest 'get_table_cell_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $utils->initialize('get_table_cell_paragraph', '');
    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        fail("get_table_cell_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'get_table_cell_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_table_cell_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('get_table_cell_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraph', 'name', 'string');
    }
};

subtest 'get_table_cell_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_table_cell_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_table_cell_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraph', 'slide_index', 'int');
    }
};

subtest 'get_table_cell_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_table_cell_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_table_cell_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraph', 'shape_index', 'int');
    }
};

subtest 'get_table_cell_paragraph invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('get_table_cell_paragraph', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('get_table_cell_paragraph', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraph', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraph', 'row_index', 'int');
    }
};

subtest 'get_table_cell_paragraph invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('get_table_cell_paragraph', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('get_table_cell_paragraph', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraph', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraph', 'cell_index', 'int');
    }
};

subtest 'get_table_cell_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_table_cell_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_table_cell_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraph', 'paragraph_index', 'int');
    }
};

subtest 'get_table_cell_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_table_cell_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('get_table_cell_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraph', 'password', 'string');
    }
};

subtest 'get_table_cell_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_table_cell_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_table_cell_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraph', 'folder', 'string');
    }
};

subtest 'get_table_cell_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_paragraph', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_table_cell_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_table_cell_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraph', 'storage', 'string');
    }
};

#
# get_table_cell_paragraphs test
#
subtest 'get_table_cell_paragraphs' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraphs', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraphs', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraphs', 'cell_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraphs', 'storage', 'string'));
    $utils->initialize('get_table_cell_paragraphs', '');
    eval {
        my $result = $utils->{api}->get_table_cell_paragraphs(%params);
    };
    if ($@) {
        fail("get_table_cell_paragraphs raised an exception: $@");
    }
    pass();
};

subtest 'get_table_cell_paragraphs invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraphs', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraphs', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraphs', 'cell_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraphs', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_table_cell_paragraphs', 'name', $params{ name }, 'string');
    $utils->initialize('get_table_cell_paragraphs', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraphs', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraphs', 'name', 'string');
    }
};

subtest 'get_table_cell_paragraphs invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraphs', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraphs', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraphs', 'cell_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraphs', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_table_cell_paragraphs', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_table_cell_paragraphs', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraphs', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraphs', 'slide_index', 'int');
    }
};

subtest 'get_table_cell_paragraphs invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraphs', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraphs', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraphs', 'cell_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraphs', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_table_cell_paragraphs', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_table_cell_paragraphs', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraphs', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraphs', 'shape_index', 'int');
    }
};

subtest 'get_table_cell_paragraphs invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraphs', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraphs', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraphs', 'cell_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraphs', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('get_table_cell_paragraphs', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('get_table_cell_paragraphs', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraphs', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraphs', 'row_index', 'int');
    }
};

subtest 'get_table_cell_paragraphs invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraphs', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraphs', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraphs', 'cell_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraphs', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('get_table_cell_paragraphs', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('get_table_cell_paragraphs', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraphs', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraphs', 'cell_index', 'int');
    }
};

subtest 'get_table_cell_paragraphs invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraphs', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraphs', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraphs', 'cell_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraphs', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_table_cell_paragraphs', 'password', $params{ password }, 'string');
    $utils->initialize('get_table_cell_paragraphs', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraphs', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraphs', 'password', 'string');
    }
};

subtest 'get_table_cell_paragraphs invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraphs', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraphs', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraphs', 'cell_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraphs', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_table_cell_paragraphs', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_table_cell_paragraphs', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraphs', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraphs', 'folder', 'string');
    }
};

subtest 'get_table_cell_paragraphs invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_paragraphs', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_paragraphs', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_paragraphs', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_paragraphs', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_paragraphs', 'cell_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_paragraphs', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_paragraphs', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_paragraphs', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_table_cell_paragraphs', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_table_cell_paragraphs', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_table_cell_paragraphs(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_paragraphs', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_paragraphs', 'storage', 'string');
    }
};

#
# get_table_cell_portion test
#
subtest 'get_table_cell_portion' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $utils->initialize('get_table_cell_portion', '');
    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        fail("get_table_cell_portion raised an exception: $@");
    }
    pass();
};

subtest 'get_table_cell_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_table_cell_portion', 'name', $params{ name }, 'string');
    $utils->initialize('get_table_cell_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'name', 'string');
    }
};

subtest 'get_table_cell_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_table_cell_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_table_cell_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'slide_index', 'int');
    }
};

subtest 'get_table_cell_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_table_cell_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_table_cell_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'shape_index', 'int');
    }
};

subtest 'get_table_cell_portion invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('get_table_cell_portion', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('get_table_cell_portion', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'row_index', 'int');
    }
};

subtest 'get_table_cell_portion invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('get_table_cell_portion', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('get_table_cell_portion', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'cell_index', 'int');
    }
};

subtest 'get_table_cell_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_table_cell_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_table_cell_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'paragraph_index', 'int');
    }
};

subtest 'get_table_cell_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('get_table_cell_portion', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('get_table_cell_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'portion_index', 'int');
    }
};

subtest 'get_table_cell_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_table_cell_portion', 'password', $params{ password }, 'string');
    $utils->initialize('get_table_cell_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'password', 'string');
    }
};

subtest 'get_table_cell_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_table_cell_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_table_cell_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'folder', 'string');
    }
};

subtest 'get_table_cell_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('get_table_cell_portion', 'portion_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_table_cell_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_table_cell_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portion', 'storage', 'string');
    }
};

#
# get_table_cell_portions test
#
subtest 'get_table_cell_portions' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $utils->initialize('get_table_cell_portions', '');
    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        fail("get_table_cell_portions raised an exception: $@");
    }
    pass();
};

subtest 'get_table_cell_portions invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_table_cell_portions', 'name', $params{ name }, 'string');
    $utils->initialize('get_table_cell_portions', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portions', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portions', 'name', 'string');
    }
};

subtest 'get_table_cell_portions invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_table_cell_portions', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_table_cell_portions', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portions', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portions', 'slide_index', 'int');
    }
};

subtest 'get_table_cell_portions invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('get_table_cell_portions', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('get_table_cell_portions', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portions', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portions', 'shape_index', 'int');
    }
};

subtest 'get_table_cell_portions invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('get_table_cell_portions', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('get_table_cell_portions', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portions', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portions', 'row_index', 'int');
    }
};

subtest 'get_table_cell_portions invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('get_table_cell_portions', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('get_table_cell_portions', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portions', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portions', 'cell_index', 'int');
    }
};

subtest 'get_table_cell_portions invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('get_table_cell_portions', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('get_table_cell_portions', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portions', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portions', 'paragraph_index', 'int');
    }
};

subtest 'get_table_cell_portions invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_table_cell_portions', 'password', $params{ password }, 'string');
    $utils->initialize('get_table_cell_portions', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portions', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portions', 'password', 'string');
    }
};

subtest 'get_table_cell_portions invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_table_cell_portions', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_table_cell_portions', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portions', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portions', 'folder', 'string');
    }
};

subtest 'get_table_cell_portions invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_table_cell_portions', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_table_cell_portions', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('get_table_cell_portions', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('get_table_cell_portions', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('get_table_cell_portions', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('get_table_cell_portions', 'paragraph_index', 'int'), 'password' => $utils->get_param_value('get_table_cell_portions', 'password', 'string'), 'folder' => $utils->get_param_value('get_table_cell_portions', 'folder', 'string'), 'storage' => $utils->get_param_value('get_table_cell_portions', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_table_cell_portions', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_table_cell_portions', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_table_cell_portions(%params);
    };
    if ($@) {
        $utils->assert_error('get_table_cell_portions', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_table_cell_portions', 'storage', 'string');
    }
};

#
# get_theme test
#
subtest 'get_theme' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $utils->initialize('get_theme', '');
    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        fail("get_theme raised an exception: $@");
    }
    pass();
};

subtest 'get_theme invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_theme', 'name', $params{ name }, 'string');
    $utils->initialize('get_theme', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_theme', 'name', 'string');
    }
};

subtest 'get_theme invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('get_theme', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('get_theme', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_theme', 'slide_index', 'int');
    }
};

subtest 'get_theme invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_theme', 'password', $params{ password }, 'string');
    $utils->initialize('get_theme', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_theme', 'password', 'string');
    }
};

subtest 'get_theme invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_theme', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_theme', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_theme', 'folder', 'string');
    }
};

subtest 'get_theme invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_theme', 'name', 'string'), 'slide_index' => $utils->get_param_value('get_theme', 'slide_index', 'int'), 'password' => $utils->get_param_value('get_theme', 'password', 'string'), 'folder' => $utils->get_param_value('get_theme', 'folder', 'string'), 'storage' => $utils->get_param_value('get_theme', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_theme', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_theme', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_theme(%params);
    };
    if ($@) {
        $utils->assert_error('get_theme', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_theme', 'storage', 'string');
    }
};

#
# get_vba_module test
#
subtest 'get_vba_module' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('get_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('get_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_module', 'storage', 'string'));
    $utils->initialize('get_vba_module', '');
    eval {
        my $result = $utils->{api}->get_vba_module(%params);
    };
    if ($@) {
        fail("get_vba_module raised an exception: $@");
    }
    pass();
};

subtest 'get_vba_module invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('get_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('get_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_module', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_vba_module', 'name', $params{ name }, 'string');
    $utils->initialize('get_vba_module', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('get_vba_module', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_vba_module', 'name', 'string');
    }
};

subtest 'get_vba_module invalid module_index' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('get_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('get_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_module', 'storage', 'string'));
    $params{ module_index } = $utils->invalidize_param_value('get_vba_module', 'module_index', $params{ module_index }, 'int');
    $utils->initialize('get_vba_module', 'module_index', $params{ module_index });

    eval {
        my $result = $utils->{api}->get_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('get_vba_module', 'module_index', $params{ module_index }, 'int', $@);
    } else {
        $utils->assert_no_error('get_vba_module', 'module_index', 'int');
    }
};

subtest 'get_vba_module invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('get_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('get_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_module', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_vba_module', 'password', $params{ password }, 'string');
    $utils->initialize('get_vba_module', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('get_vba_module', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_vba_module', 'password', 'string');
    }
};

subtest 'get_vba_module invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('get_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('get_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_module', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_vba_module', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_vba_module', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('get_vba_module', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_vba_module', 'folder', 'string');
    }
};

subtest 'get_vba_module invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('get_vba_module', 'module_index', 'int'), 'password' => $utils->get_param_value('get_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_module', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_vba_module', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_vba_module', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('get_vba_module', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_vba_module', 'storage', 'string');
    }
};

#
# get_vba_project test
#
subtest 'get_vba_project' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_project', 'name', 'string'), 'password' => $utils->get_param_value('get_vba_project', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_project', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_project', 'storage', 'string'));
    $utils->initialize('get_vba_project', '');
    eval {
        my $result = $utils->{api}->get_vba_project(%params);
    };
    if ($@) {
        fail("get_vba_project raised an exception: $@");
    }
    pass();
};

subtest 'get_vba_project invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_project', 'name', 'string'), 'password' => $utils->get_param_value('get_vba_project', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_project', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_project', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_vba_project', 'name', $params{ name }, 'string');
    $utils->initialize('get_vba_project', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_vba_project(%params);
    };
    if ($@) {
        $utils->assert_error('get_vba_project', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_vba_project', 'name', 'string');
    }
};

subtest 'get_vba_project invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_project', 'name', 'string'), 'password' => $utils->get_param_value('get_vba_project', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_project', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_project', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_vba_project', 'password', $params{ password }, 'string');
    $utils->initialize('get_vba_project', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_vba_project(%params);
    };
    if ($@) {
        $utils->assert_error('get_vba_project', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_vba_project', 'password', 'string');
    }
};

subtest 'get_vba_project invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_project', 'name', 'string'), 'password' => $utils->get_param_value('get_vba_project', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_project', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_project', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_vba_project', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_vba_project', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_vba_project(%params);
    };
    if ($@) {
        $utils->assert_error('get_vba_project', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_vba_project', 'folder', 'string');
    }
};

subtest 'get_vba_project invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_vba_project', 'name', 'string'), 'password' => $utils->get_param_value('get_vba_project', 'password', 'string'), 'folder' => $utils->get_param_value('get_vba_project', 'folder', 'string'), 'storage' => $utils->get_param_value('get_vba_project', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_vba_project', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_vba_project', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_vba_project(%params);
    };
    if ($@) {
        $utils->assert_error('get_vba_project', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_vba_project', 'storage', 'string');
    }
};

#
# get_view_properties test
#
subtest 'get_view_properties' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $utils->initialize('get_view_properties', '');
    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        fail("get_view_properties raised an exception: $@");
    }
    pass();
};

subtest 'get_view_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('get_view_properties', 'name', $params{ name }, 'string');
    $utils->initialize('get_view_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_view_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('get_view_properties', 'name', 'string');
    }
};

subtest 'get_view_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('get_view_properties', 'password', $params{ password }, 'string');
    $utils->initialize('get_view_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_view_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('get_view_properties', 'password', 'string');
    }
};

subtest 'get_view_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('get_view_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('get_view_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_view_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('get_view_properties', 'folder', 'string');
    }
};

subtest 'get_view_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('get_view_properties', 'name', 'string'), 'password' => $utils->get_param_value('get_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('get_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('get_view_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('get_view_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('get_view_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->get_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('get_view_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('get_view_properties', 'storage', 'string');
    }
};

#
# highlight_shape_regex test
#
subtest 'highlight_shape_regex' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $utils->initialize('highlight_shape_regex', '');
    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        fail("highlight_shape_regex raised an exception: $@");
    }
    pass();
};

subtest 'highlight_shape_regex invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('highlight_shape_regex', 'name', $params{ name }, 'string');
    $utils->initialize('highlight_shape_regex', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'name', 'string');
    }
};

subtest 'highlight_shape_regex invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('highlight_shape_regex', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('highlight_shape_regex', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'slide_index', 'int');
    }
};

subtest 'highlight_shape_regex invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('highlight_shape_regex', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('highlight_shape_regex', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'shape_index', 'int');
    }
};

subtest 'highlight_shape_regex invalid regex' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ regex } = $utils->invalidize_param_value('highlight_shape_regex', 'regex', $params{ regex }, 'string');
    $utils->initialize('highlight_shape_regex', 'regex', $params{ regex });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'regex', $params{ regex }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'regex', 'string');
    }
};

subtest 'highlight_shape_regex invalid color' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ color } = $utils->invalidize_param_value('highlight_shape_regex', 'color', $params{ color }, 'string');
    $utils->initialize('highlight_shape_regex', 'color', $params{ color });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'color', $params{ color }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'color', 'string');
    }
};

subtest 'highlight_shape_regex invalid whole_words_only' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ whole_words_only } = $utils->invalidize_param_value('highlight_shape_regex', 'whole_words_only', $params{ whole_words_only }, 'boolean');
    $utils->initialize('highlight_shape_regex', 'whole_words_only', $params{ whole_words_only });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'whole_words_only', $params{ whole_words_only }, 'boolean', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'whole_words_only', 'boolean');
    }
};

subtest 'highlight_shape_regex invalid ignore_case' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('highlight_shape_regex', 'ignore_case', $params{ ignore_case }, 'boolean');
    $utils->initialize('highlight_shape_regex', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'ignore_case', $params{ ignore_case }, 'boolean', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'ignore_case', 'boolean');
    }
};

subtest 'highlight_shape_regex invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('highlight_shape_regex', 'password', $params{ password }, 'string');
    $utils->initialize('highlight_shape_regex', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'password', 'string');
    }
};

subtest 'highlight_shape_regex invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('highlight_shape_regex', 'folder', $params{ folder }, 'string');
    $utils->initialize('highlight_shape_regex', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'folder', 'string');
    }
};

subtest 'highlight_shape_regex invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_regex', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_regex', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_regex', 'shape_index', 'int'), 'regex' => $utils->get_param_value('highlight_shape_regex', 'regex', 'string'), 'color' => $utils->get_param_value('highlight_shape_regex', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_regex', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_regex', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_regex', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_regex', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_regex', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('highlight_shape_regex', 'storage', $params{ storage }, 'string');
    $utils->initialize('highlight_shape_regex', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->highlight_shape_regex(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_regex', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_regex', 'storage', 'string');
    }
};

#
# highlight_shape_text test
#
subtest 'highlight_shape_text' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $utils->initialize('highlight_shape_text', '');
    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        fail("highlight_shape_text raised an exception: $@");
    }
    pass();
};

subtest 'highlight_shape_text invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('highlight_shape_text', 'name', $params{ name }, 'string');
    $utils->initialize('highlight_shape_text', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'name', 'string');
    }
};

subtest 'highlight_shape_text invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('highlight_shape_text', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('highlight_shape_text', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'slide_index', 'int');
    }
};

subtest 'highlight_shape_text invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('highlight_shape_text', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('highlight_shape_text', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'shape_index', 'int');
    }
};

subtest 'highlight_shape_text invalid text' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ text } = $utils->invalidize_param_value('highlight_shape_text', 'text', $params{ text }, 'string');
    $utils->initialize('highlight_shape_text', 'text', $params{ text });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'text', $params{ text }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'text', 'string');
    }
};

subtest 'highlight_shape_text invalid color' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ color } = $utils->invalidize_param_value('highlight_shape_text', 'color', $params{ color }, 'string');
    $utils->initialize('highlight_shape_text', 'color', $params{ color });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'color', $params{ color }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'color', 'string');
    }
};

subtest 'highlight_shape_text invalid whole_words_only' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ whole_words_only } = $utils->invalidize_param_value('highlight_shape_text', 'whole_words_only', $params{ whole_words_only }, 'boolean');
    $utils->initialize('highlight_shape_text', 'whole_words_only', $params{ whole_words_only });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'whole_words_only', $params{ whole_words_only }, 'boolean', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'whole_words_only', 'boolean');
    }
};

subtest 'highlight_shape_text invalid ignore_case' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('highlight_shape_text', 'ignore_case', $params{ ignore_case }, 'boolean');
    $utils->initialize('highlight_shape_text', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'ignore_case', $params{ ignore_case }, 'boolean', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'ignore_case', 'boolean');
    }
};

subtest 'highlight_shape_text invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('highlight_shape_text', 'password', $params{ password }, 'string');
    $utils->initialize('highlight_shape_text', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'password', 'string');
    }
};

subtest 'highlight_shape_text invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('highlight_shape_text', 'folder', $params{ folder }, 'string');
    $utils->initialize('highlight_shape_text', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'folder', 'string');
    }
};

subtest 'highlight_shape_text invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('highlight_shape_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('highlight_shape_text', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('highlight_shape_text', 'shape_index', 'int'), 'text' => $utils->get_param_value('highlight_shape_text', 'text', 'string'), 'color' => $utils->get_param_value('highlight_shape_text', 'color', 'string'), 'whole_words_only' => $utils->get_param_value('highlight_shape_text', 'whole_words_only', 'boolean'), 'ignore_case' => $utils->get_param_value('highlight_shape_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('highlight_shape_text', 'password', 'string'), 'folder' => $utils->get_param_value('highlight_shape_text', 'folder', 'string'), 'storage' => $utils->get_param_value('highlight_shape_text', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('highlight_shape_text', 'storage', $params{ storage }, 'string');
    $utils->initialize('highlight_shape_text', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->highlight_shape_text(%params);
    };
    if ($@) {
        $utils->assert_error('highlight_shape_text', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('highlight_shape_text', 'storage', 'string');
    }
};

#
# import_from_html test
#
subtest 'import_from_html' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $utils->initialize('import_from_html', '');
    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        fail("import_from_html raised an exception: $@");
    }
    pass();
};

subtest 'import_from_html invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('import_from_html', 'name', $params{ name }, 'string');
    $utils->initialize('import_from_html', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('import_from_html', 'name', 'string');
    }
};

subtest 'import_from_html invalid html' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ html } = $utils->invalidize_param_value('import_from_html', 'html', $params{ html }, 'string');
    $utils->initialize('import_from_html', 'html', $params{ html });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'html', $params{ html }, 'string', $@);
    } else {
        $utils->assert_no_error('import_from_html', 'html', 'string');
    }
};

subtest 'import_from_html invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('import_from_html', 'password', $params{ password }, 'string');
    $utils->initialize('import_from_html', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('import_from_html', 'password', 'string');
    }
};

subtest 'import_from_html invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('import_from_html', 'folder', $params{ folder }, 'string');
    $utils->initialize('import_from_html', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('import_from_html', 'folder', 'string');
    }
};

subtest 'import_from_html invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_html', 'name', 'string'), 'html' => $utils->get_param_value('import_from_html', 'html', 'string'), 'password' => $utils->get_param_value('import_from_html', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_html', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_html', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('import_from_html', 'storage', $params{ storage }, 'string');
    $utils->initialize('import_from_html', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->import_from_html(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_html', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('import_from_html', 'storage', 'string');
    }
};

#
# import_from_pdf test
#
subtest 'import_from_pdf' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $utils->initialize('import_from_pdf', '');
    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        fail("import_from_pdf raised an exception: $@");
    }
    pass();
};

subtest 'import_from_pdf invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('import_from_pdf', 'name', $params{ name }, 'string');
    $utils->initialize('import_from_pdf', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'name', 'string');
    }
};

subtest 'import_from_pdf invalid pdf' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ pdf } = $utils->invalidize_param_value('import_from_pdf', 'pdf', $params{ pdf }, 'File');
    $utils->initialize('import_from_pdf', 'pdf', $params{ pdf });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'pdf', $params{ pdf }, 'File', $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'pdf', 'File');
    }
};

subtest 'import_from_pdf invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('import_from_pdf', 'password', $params{ password }, 'string');
    $utils->initialize('import_from_pdf', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'password', 'string');
    }
};

subtest 'import_from_pdf invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('import_from_pdf', 'folder', $params{ folder }, 'string');
    $utils->initialize('import_from_pdf', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'folder', 'string');
    }
};

subtest 'import_from_pdf invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('import_from_pdf', 'name', 'string'), 'pdf' => $utils->get_param_value('import_from_pdf', 'pdf', 'File'), 'password' => $utils->get_param_value('import_from_pdf', 'password', 'string'), 'folder' => $utils->get_param_value('import_from_pdf', 'folder', 'string'), 'storage' => $utils->get_param_value('import_from_pdf', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('import_from_pdf', 'storage', $params{ storage }, 'string');
    $utils->initialize('import_from_pdf', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->import_from_pdf(%params);
    };
    if ($@) {
        $utils->assert_error('import_from_pdf', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('import_from_pdf', 'storage', 'string');
    }
};

#
# import_shapes_from_svg test
#
subtest 'import_shapes_from_svg' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $utils->initialize('import_shapes_from_svg', '');
    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        fail("import_shapes_from_svg raised an exception: $@");
    }
    pass();
};

subtest 'import_shapes_from_svg invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('import_shapes_from_svg', 'name', $params{ name }, 'string');
    $utils->initialize('import_shapes_from_svg', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'name', 'string');
    }
};

subtest 'import_shapes_from_svg invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('import_shapes_from_svg', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('import_shapes_from_svg', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'slide_index', 'int');
    }
};

subtest 'import_shapes_from_svg invalid image' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ image } = $utils->invalidize_param_value('import_shapes_from_svg', 'image', $params{ image }, 'File');
    $utils->initialize('import_shapes_from_svg', 'image', $params{ image });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'image', $params{ image }, 'File', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'image', 'File');
    }
};

subtest 'import_shapes_from_svg invalid x' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ x } = $utils->invalidize_param_value('import_shapes_from_svg', 'x', $params{ x }, 'int');
    $utils->initialize('import_shapes_from_svg', 'x', $params{ x });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'x', $params{ x }, 'int', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'x', 'int');
    }
};

subtest 'import_shapes_from_svg invalid y' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ y } = $utils->invalidize_param_value('import_shapes_from_svg', 'y', $params{ y }, 'int');
    $utils->initialize('import_shapes_from_svg', 'y', $params{ y });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'y', $params{ y }, 'int', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'y', 'int');
    }
};

subtest 'import_shapes_from_svg invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ width } = $utils->invalidize_param_value('import_shapes_from_svg', 'width', $params{ width }, 'int');
    $utils->initialize('import_shapes_from_svg', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'width', 'int');
    }
};

subtest 'import_shapes_from_svg invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ height } = $utils->invalidize_param_value('import_shapes_from_svg', 'height', $params{ height }, 'int');
    $utils->initialize('import_shapes_from_svg', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'height', 'int');
    }
};

subtest 'import_shapes_from_svg invalid shapes' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ shapes } = $utils->invalidize_param_value('import_shapes_from_svg', 'shapes', $params{ shapes }, 'int[]');
    $utils->initialize('import_shapes_from_svg', 'shapes', $params{ shapes });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'shapes', $params{ shapes }, 'int[]', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'shapes', 'int[]');
    }
};

subtest 'import_shapes_from_svg invalid group' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ group } = $utils->invalidize_param_value('import_shapes_from_svg', 'group', $params{ group }, 'boolean');
    $utils->initialize('import_shapes_from_svg', 'group', $params{ group });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'group', $params{ group }, 'boolean', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'group', 'boolean');
    }
};

subtest 'import_shapes_from_svg invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('import_shapes_from_svg', 'password', $params{ password }, 'string');
    $utils->initialize('import_shapes_from_svg', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'password', 'string');
    }
};

subtest 'import_shapes_from_svg invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('import_shapes_from_svg', 'folder', $params{ folder }, 'string');
    $utils->initialize('import_shapes_from_svg', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'folder', 'string');
    }
};

subtest 'import_shapes_from_svg invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('import_shapes_from_svg', 'name', 'string'), 'slide_index' => $utils->get_param_value('import_shapes_from_svg', 'slide_index', 'int'), 'image' => $utils->get_param_value('import_shapes_from_svg', 'image', 'File'), 'x' => $utils->get_param_value('import_shapes_from_svg', 'x', 'int'), 'y' => $utils->get_param_value('import_shapes_from_svg', 'y', 'int'), 'width' => $utils->get_param_value('import_shapes_from_svg', 'width', 'int'), 'height' => $utils->get_param_value('import_shapes_from_svg', 'height', 'int'), 'shapes' => $utils->get_param_value('import_shapes_from_svg', 'shapes', 'int[]'), 'group' => $utils->get_param_value('import_shapes_from_svg', 'group', 'boolean'), 'password' => $utils->get_param_value('import_shapes_from_svg', 'password', 'string'), 'folder' => $utils->get_param_value('import_shapes_from_svg', 'folder', 'string'), 'storage' => $utils->get_param_value('import_shapes_from_svg', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('import_shapes_from_svg', 'storage', $params{ storage }, 'string');
    $utils->initialize('import_shapes_from_svg', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->import_shapes_from_svg(%params);
    };
    if ($@) {
        $utils->assert_error('import_shapes_from_svg', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('import_shapes_from_svg', 'storage', 'string');
    }
};

#
# merge test
#
subtest 'merge' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $utils->initialize('merge', '');
    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        fail("merge raised an exception: $@");
    }
    pass();
};

subtest 'merge invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('merge', 'name', $params{ name }, 'string');
    $utils->initialize('merge', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('merge', 'name', 'string');
    }
};

subtest 'merge invalid request' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ request } = $utils->invalidize_param_value('merge', 'request', $params{ request }, 'PresentationsMergeRequest');
    $utils->initialize('merge', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'request', $params{ request }, 'PresentationsMergeRequest', $@);
    } else {
        $utils->assert_no_error('merge', 'request', 'PresentationsMergeRequest');
    }
};

subtest 'merge invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('merge', 'password', $params{ password }, 'string');
    $utils->initialize('merge', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('merge', 'password', 'string');
    }
};

subtest 'merge invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('merge', 'folder', $params{ folder }, 'string');
    $utils->initialize('merge', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('merge', 'folder', 'string');
    }
};

subtest 'merge invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('merge', 'name', 'string'), 'request' => $utils->get_param_value('merge', 'request', 'PresentationsMergeRequest'), 'password' => $utils->get_param_value('merge', 'password', 'string'), 'folder' => $utils->get_param_value('merge', 'folder', 'string'), 'storage' => $utils->get_param_value('merge', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('merge', 'storage', $params{ storage }, 'string');
    $utils->initialize('merge', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->merge(%params);
    };
    if ($@) {
        $utils->assert_error('merge', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('merge', 'storage', 'string');
    }
};

#
# merge_and_save_online test
#
subtest 'merge_and_save_online' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $utils->initialize('merge_and_save_online', '');
    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        fail("merge_and_save_online raised an exception: $@");
    }
    pass();
};

subtest 'merge_and_save_online invalid out_path' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('merge_and_save_online', 'out_path', $params{ out_path }, 'string');
    $utils->initialize('merge_and_save_online', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_and_save_online', 'out_path', $params{ out_path }, 'string', $@);
    } else {
        $utils->assert_no_error('merge_and_save_online', 'out_path', 'string');
    }
};

subtest 'merge_and_save_online invalid files' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $params{ files } = $utils->invalidize_param_value('merge_and_save_online', 'files', $params{ files }, 'ARRAY[string]');
    $utils->initialize('merge_and_save_online', 'files', $params{ files });

    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_and_save_online', 'files', $params{ files }, 'ARRAY[string]', $@);
    } else {
        $utils->assert_no_error('merge_and_save_online', 'files', 'ARRAY[string]');
    }
};

subtest 'merge_and_save_online invalid request' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $params{ request } = $utils->invalidize_param_value('merge_and_save_online', 'request', $params{ request }, 'OrderedMergeRequest');
    $utils->initialize('merge_and_save_online', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_and_save_online', 'request', $params{ request }, 'OrderedMergeRequest', $@);
    } else {
        $utils->assert_no_error('merge_and_save_online', 'request', 'OrderedMergeRequest');
    }
};

subtest 'merge_and_save_online invalid storage' => sub {
    my %params = ('out_path' => $utils->get_param_value('merge_and_save_online', 'out_path', 'string'), 'files' => $utils->get_param_value('merge_and_save_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_and_save_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_and_save_online', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('merge_and_save_online', 'storage', $params{ storage }, 'string');
    $utils->initialize('merge_and_save_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->merge_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_and_save_online', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('merge_and_save_online', 'storage', 'string');
    }
};

#
# merge_online test
#
subtest 'merge_online' => sub {
    my %params = ('files' => $utils->get_param_value('merge_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_online', 'storage', 'string'));
    $utils->initialize('merge_online', '');
    eval {
        my $result = $utils->{api}->merge_online(%params);
    };
    if ($@) {
        fail("merge_online raised an exception: $@");
    }
    pass();
};

subtest 'merge_online invalid files' => sub {
    my %params = ('files' => $utils->get_param_value('merge_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_online', 'storage', 'string'));
    $params{ files } = $utils->invalidize_param_value('merge_online', 'files', $params{ files }, 'ARRAY[string]');
    $utils->initialize('merge_online', 'files', $params{ files });

    eval {
        my $result = $utils->{api}->merge_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_online', 'files', $params{ files }, 'ARRAY[string]', $@);
    } else {
        $utils->assert_no_error('merge_online', 'files', 'ARRAY[string]');
    }
};

subtest 'merge_online invalid request' => sub {
    my %params = ('files' => $utils->get_param_value('merge_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_online', 'storage', 'string'));
    $params{ request } = $utils->invalidize_param_value('merge_online', 'request', $params{ request }, 'OrderedMergeRequest');
    $utils->initialize('merge_online', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->merge_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_online', 'request', $params{ request }, 'OrderedMergeRequest', $@);
    } else {
        $utils->assert_no_error('merge_online', 'request', 'OrderedMergeRequest');
    }
};

subtest 'merge_online invalid storage' => sub {
    my %params = ('files' => $utils->get_param_value('merge_online', 'files', 'ARRAY[string]'), 'request' => $utils->get_param_value('merge_online', 'request', 'OrderedMergeRequest'), 'storage' => $utils->get_param_value('merge_online', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('merge_online', 'storage', $params{ storage }, 'string');
    $utils->initialize('merge_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->merge_online(%params);
    };
    if ($@) {
        $utils->assert_error('merge_online', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('merge_online', 'storage', 'string');
    }
};

#
# merge_table_cells test
#
subtest 'merge_table_cells' => sub {
    my %params = ('name' => $utils->get_param_value('merge_table_cells', 'name', 'string'), 'slide_index' => $utils->get_param_value('merge_table_cells', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('merge_table_cells', 'shape_index', 'int'), 'table_cell_merge_options' => $utils->get_param_value('merge_table_cells', 'table_cell_merge_options', 'TableCellMergeOptions'), 'password' => $utils->get_param_value('merge_table_cells', 'password', 'string'), 'folder' => $utils->get_param_value('merge_table_cells', 'folder', 'string'), 'storage' => $utils->get_param_value('merge_table_cells', 'storage', 'string'));
    $utils->initialize('merge_table_cells', '');
    eval {
        my $result = $utils->{api}->merge_table_cells(%params);
    };
    if ($@) {
        fail("merge_table_cells raised an exception: $@");
    }
    pass();
};

subtest 'merge_table_cells invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('merge_table_cells', 'name', 'string'), 'slide_index' => $utils->get_param_value('merge_table_cells', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('merge_table_cells', 'shape_index', 'int'), 'table_cell_merge_options' => $utils->get_param_value('merge_table_cells', 'table_cell_merge_options', 'TableCellMergeOptions'), 'password' => $utils->get_param_value('merge_table_cells', 'password', 'string'), 'folder' => $utils->get_param_value('merge_table_cells', 'folder', 'string'), 'storage' => $utils->get_param_value('merge_table_cells', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('merge_table_cells', 'name', $params{ name }, 'string');
    $utils->initialize('merge_table_cells', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->merge_table_cells(%params);
    };
    if ($@) {
        $utils->assert_error('merge_table_cells', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('merge_table_cells', 'name', 'string');
    }
};

subtest 'merge_table_cells invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('merge_table_cells', 'name', 'string'), 'slide_index' => $utils->get_param_value('merge_table_cells', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('merge_table_cells', 'shape_index', 'int'), 'table_cell_merge_options' => $utils->get_param_value('merge_table_cells', 'table_cell_merge_options', 'TableCellMergeOptions'), 'password' => $utils->get_param_value('merge_table_cells', 'password', 'string'), 'folder' => $utils->get_param_value('merge_table_cells', 'folder', 'string'), 'storage' => $utils->get_param_value('merge_table_cells', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('merge_table_cells', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('merge_table_cells', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->merge_table_cells(%params);
    };
    if ($@) {
        $utils->assert_error('merge_table_cells', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('merge_table_cells', 'slide_index', 'int');
    }
};

subtest 'merge_table_cells invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('merge_table_cells', 'name', 'string'), 'slide_index' => $utils->get_param_value('merge_table_cells', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('merge_table_cells', 'shape_index', 'int'), 'table_cell_merge_options' => $utils->get_param_value('merge_table_cells', 'table_cell_merge_options', 'TableCellMergeOptions'), 'password' => $utils->get_param_value('merge_table_cells', 'password', 'string'), 'folder' => $utils->get_param_value('merge_table_cells', 'folder', 'string'), 'storage' => $utils->get_param_value('merge_table_cells', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('merge_table_cells', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('merge_table_cells', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->merge_table_cells(%params);
    };
    if ($@) {
        $utils->assert_error('merge_table_cells', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('merge_table_cells', 'shape_index', 'int');
    }
};

subtest 'merge_table_cells invalid table_cell_merge_options' => sub {
    my %params = ('name' => $utils->get_param_value('merge_table_cells', 'name', 'string'), 'slide_index' => $utils->get_param_value('merge_table_cells', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('merge_table_cells', 'shape_index', 'int'), 'table_cell_merge_options' => $utils->get_param_value('merge_table_cells', 'table_cell_merge_options', 'TableCellMergeOptions'), 'password' => $utils->get_param_value('merge_table_cells', 'password', 'string'), 'folder' => $utils->get_param_value('merge_table_cells', 'folder', 'string'), 'storage' => $utils->get_param_value('merge_table_cells', 'storage', 'string'));
    $params{ table_cell_merge_options } = $utils->invalidize_param_value('merge_table_cells', 'table_cell_merge_options', $params{ table_cell_merge_options }, 'TableCellMergeOptions');
    $utils->initialize('merge_table_cells', 'table_cell_merge_options', $params{ table_cell_merge_options });

    eval {
        my $result = $utils->{api}->merge_table_cells(%params);
    };
    if ($@) {
        $utils->assert_error('merge_table_cells', 'table_cell_merge_options', $params{ table_cell_merge_options }, 'TableCellMergeOptions', $@);
    } else {
        $utils->assert_no_error('merge_table_cells', 'table_cell_merge_options', 'TableCellMergeOptions');
    }
};

subtest 'merge_table_cells invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('merge_table_cells', 'name', 'string'), 'slide_index' => $utils->get_param_value('merge_table_cells', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('merge_table_cells', 'shape_index', 'int'), 'table_cell_merge_options' => $utils->get_param_value('merge_table_cells', 'table_cell_merge_options', 'TableCellMergeOptions'), 'password' => $utils->get_param_value('merge_table_cells', 'password', 'string'), 'folder' => $utils->get_param_value('merge_table_cells', 'folder', 'string'), 'storage' => $utils->get_param_value('merge_table_cells', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('merge_table_cells', 'password', $params{ password }, 'string');
    $utils->initialize('merge_table_cells', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->merge_table_cells(%params);
    };
    if ($@) {
        $utils->assert_error('merge_table_cells', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('merge_table_cells', 'password', 'string');
    }
};

subtest 'merge_table_cells invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('merge_table_cells', 'name', 'string'), 'slide_index' => $utils->get_param_value('merge_table_cells', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('merge_table_cells', 'shape_index', 'int'), 'table_cell_merge_options' => $utils->get_param_value('merge_table_cells', 'table_cell_merge_options', 'TableCellMergeOptions'), 'password' => $utils->get_param_value('merge_table_cells', 'password', 'string'), 'folder' => $utils->get_param_value('merge_table_cells', 'folder', 'string'), 'storage' => $utils->get_param_value('merge_table_cells', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('merge_table_cells', 'folder', $params{ folder }, 'string');
    $utils->initialize('merge_table_cells', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->merge_table_cells(%params);
    };
    if ($@) {
        $utils->assert_error('merge_table_cells', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('merge_table_cells', 'folder', 'string');
    }
};

subtest 'merge_table_cells invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('merge_table_cells', 'name', 'string'), 'slide_index' => $utils->get_param_value('merge_table_cells', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('merge_table_cells', 'shape_index', 'int'), 'table_cell_merge_options' => $utils->get_param_value('merge_table_cells', 'table_cell_merge_options', 'TableCellMergeOptions'), 'password' => $utils->get_param_value('merge_table_cells', 'password', 'string'), 'folder' => $utils->get_param_value('merge_table_cells', 'folder', 'string'), 'storage' => $utils->get_param_value('merge_table_cells', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('merge_table_cells', 'storage', $params{ storage }, 'string');
    $utils->initialize('merge_table_cells', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->merge_table_cells(%params);
    };
    if ($@) {
        $utils->assert_error('merge_table_cells', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('merge_table_cells', 'storage', 'string');
    }
};

#
# move_file test
#
subtest 'move_file' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $utils->initialize('move_file', '');
    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        fail("move_file raised an exception: $@");
    }
    pass();
};

subtest 'move_file invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('move_file', 'src_path', $params{ src_path }, 'string');
    $utils->initialize('move_file', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'src_path', $params{ src_path }, 'string', $@);
    } else {
        $utils->assert_no_error('move_file', 'src_path', 'string');
    }
};

subtest 'move_file invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('move_file', 'dest_path', $params{ dest_path }, 'string');
    $utils->initialize('move_file', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'dest_path', $params{ dest_path }, 'string', $@);
    } else {
        $utils->assert_no_error('move_file', 'dest_path', 'string');
    }
};

subtest 'move_file invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('move_file', 'src_storage_name', $params{ src_storage_name }, 'string');
    $utils->initialize('move_file', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'src_storage_name', $params{ src_storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('move_file', 'src_storage_name', 'string');
    }
};

subtest 'move_file invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('move_file', 'dest_storage_name', $params{ dest_storage_name }, 'string');
    $utils->initialize('move_file', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'dest_storage_name', $params{ dest_storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('move_file', 'dest_storage_name', 'string');
    }
};

subtest 'move_file invalid version_id' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_file', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_file', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_file', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_file', 'dest_storage_name', 'string'), 'version_id' => $utils->get_param_value('move_file', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('move_file', 'version_id', $params{ version_id }, 'string');
    $utils->initialize('move_file', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->move_file(%params);
    };
    if ($@) {
        $utils->assert_error('move_file', 'version_id', $params{ version_id }, 'string', $@);
    } else {
        $utils->assert_no_error('move_file', 'version_id', 'string');
    }
};

#
# move_folder test
#
subtest 'move_folder' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $utils->initialize('move_folder', '');
    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        fail("move_folder raised an exception: $@");
    }
    pass();
};

subtest 'move_folder invalid src_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ src_path } = $utils->invalidize_param_value('move_folder', 'src_path', $params{ src_path }, 'string');
    $utils->initialize('move_folder', 'src_path', $params{ src_path });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'src_path', $params{ src_path }, 'string', $@);
    } else {
        $utils->assert_no_error('move_folder', 'src_path', 'string');
    }
};

subtest 'move_folder invalid dest_path' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ dest_path } = $utils->invalidize_param_value('move_folder', 'dest_path', $params{ dest_path }, 'string');
    $utils->initialize('move_folder', 'dest_path', $params{ dest_path });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'dest_path', $params{ dest_path }, 'string', $@);
    } else {
        $utils->assert_no_error('move_folder', 'dest_path', 'string');
    }
};

subtest 'move_folder invalid src_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ src_storage_name } = $utils->invalidize_param_value('move_folder', 'src_storage_name', $params{ src_storage_name }, 'string');
    $utils->initialize('move_folder', 'src_storage_name', $params{ src_storage_name });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'src_storage_name', $params{ src_storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('move_folder', 'src_storage_name', 'string');
    }
};

subtest 'move_folder invalid dest_storage_name' => sub {
    my %params = ('src_path' => $utils->get_param_value('move_folder', 'src_path', 'string'), 'dest_path' => $utils->get_param_value('move_folder', 'dest_path', 'string'), 'src_storage_name' => $utils->get_param_value('move_folder', 'src_storage_name', 'string'), 'dest_storage_name' => $utils->get_param_value('move_folder', 'dest_storage_name', 'string'));
    $params{ dest_storage_name } = $utils->invalidize_param_value('move_folder', 'dest_storage_name', $params{ dest_storage_name }, 'string');
    $utils->initialize('move_folder', 'dest_storage_name', $params{ dest_storage_name });

    eval {
        my $result = $utils->{api}->move_folder(%params);
    };
    if ($@) {
        $utils->assert_error('move_folder', 'dest_storage_name', $params{ dest_storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('move_folder', 'dest_storage_name', 'string');
    }
};

#
# move_section test
#
subtest 'move_section' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $utils->initialize('move_section', '');
    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        fail("move_section raised an exception: $@");
    }
    pass();
};

subtest 'move_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('move_section', 'name', $params{ name }, 'string');
    $utils->initialize('move_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('move_section', 'name', 'string');
    }
};

subtest 'move_section invalid section_index' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ section_index } = $utils->invalidize_param_value('move_section', 'section_index', $params{ section_index }, 'int');
    $utils->initialize('move_section', 'section_index', $params{ section_index });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'section_index', $params{ section_index }, 'int', $@);
    } else {
        $utils->assert_no_error('move_section', 'section_index', 'int');
    }
};

subtest 'move_section invalid new_position' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ new_position } = $utils->invalidize_param_value('move_section', 'new_position', $params{ new_position }, 'int');
    $utils->initialize('move_section', 'new_position', $params{ new_position });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'new_position', $params{ new_position }, 'int', $@);
    } else {
        $utils->assert_no_error('move_section', 'new_position', 'int');
    }
};

subtest 'move_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('move_section', 'password', $params{ password }, 'string');
    $utils->initialize('move_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('move_section', 'password', 'string');
    }
};

subtest 'move_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('move_section', 'folder', $params{ folder }, 'string');
    $utils->initialize('move_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('move_section', 'folder', 'string');
    }
};

subtest 'move_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('move_section', 'name', 'string'), 'section_index' => $utils->get_param_value('move_section', 'section_index', 'int'), 'new_position' => $utils->get_param_value('move_section', 'new_position', 'int'), 'password' => $utils->get_param_value('move_section', 'password', 'string'), 'folder' => $utils->get_param_value('move_section', 'folder', 'string'), 'storage' => $utils->get_param_value('move_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('move_section', 'storage', $params{ storage }, 'string');
    $utils->initialize('move_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->move_section(%params);
    };
    if ($@) {
        $utils->assert_error('move_section', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('move_section', 'storage', 'string');
    }
};

#
# move_slide test
#
subtest 'move_slide' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $utils->initialize('move_slide', '');
    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        fail("move_slide raised an exception: $@");
    }
    pass();
};

subtest 'move_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('move_slide', 'name', $params{ name }, 'string');
    $utils->initialize('move_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('move_slide', 'name', 'string');
    }
};

subtest 'move_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('move_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('move_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('move_slide', 'slide_index', 'int');
    }
};

subtest 'move_slide invalid new_position' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ new_position } = $utils->invalidize_param_value('move_slide', 'new_position', $params{ new_position }, 'int');
    $utils->initialize('move_slide', 'new_position', $params{ new_position });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'new_position', $params{ new_position }, 'int', $@);
    } else {
        $utils->assert_no_error('move_slide', 'new_position', 'int');
    }
};

subtest 'move_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('move_slide', 'password', $params{ password }, 'string');
    $utils->initialize('move_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('move_slide', 'password', 'string');
    }
};

subtest 'move_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('move_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('move_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('move_slide', 'folder', 'string');
    }
};

subtest 'move_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('move_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('move_slide', 'slide_index', 'int'), 'new_position' => $utils->get_param_value('move_slide', 'new_position', 'int'), 'password' => $utils->get_param_value('move_slide', 'password', 'string'), 'folder' => $utils->get_param_value('move_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('move_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('move_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('move_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->move_slide(%params);
    };
    if ($@) {
        $utils->assert_error('move_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('move_slide', 'storage', 'string');
    }
};

#
# notes_slide_exists test
#
subtest 'notes_slide_exists' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $utils->initialize('notes_slide_exists', '');
    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        fail("notes_slide_exists raised an exception: $@");
    }
    pass();
};

subtest 'notes_slide_exists invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('notes_slide_exists', 'name', $params{ name }, 'string');
    $utils->initialize('notes_slide_exists', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'name', 'string');
    }
};

subtest 'notes_slide_exists invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('notes_slide_exists', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('notes_slide_exists', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'slide_index', 'int');
    }
};

subtest 'notes_slide_exists invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('notes_slide_exists', 'password', $params{ password }, 'string');
    $utils->initialize('notes_slide_exists', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'password', 'string');
    }
};

subtest 'notes_slide_exists invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('notes_slide_exists', 'folder', $params{ folder }, 'string');
    $utils->initialize('notes_slide_exists', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'folder', 'string');
    }
};

subtest 'notes_slide_exists invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('notes_slide_exists', 'name', 'string'), 'slide_index' => $utils->get_param_value('notes_slide_exists', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists', 'password', 'string'), 'folder' => $utils->get_param_value('notes_slide_exists', 'folder', 'string'), 'storage' => $utils->get_param_value('notes_slide_exists', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('notes_slide_exists', 'storage', $params{ storage }, 'string');
    $utils->initialize('notes_slide_exists', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->notes_slide_exists(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('notes_slide_exists', 'storage', 'string');
    }
};

#
# notes_slide_exists_online test
#
subtest 'notes_slide_exists_online' => sub {
    my %params = ('document' => $utils->get_param_value('notes_slide_exists_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('notes_slide_exists_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists_online', 'password', 'string'));
    $utils->initialize('notes_slide_exists_online', '');
    eval {
        my $result = $utils->{api}->notes_slide_exists_online(%params);
    };
    if ($@) {
        fail("notes_slide_exists_online raised an exception: $@");
    }
    pass();
};

subtest 'notes_slide_exists_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('notes_slide_exists_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('notes_slide_exists_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('notes_slide_exists_online', 'document', $params{ document }, 'File');
    $utils->initialize('notes_slide_exists_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->notes_slide_exists_online(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('notes_slide_exists_online', 'document', 'File');
    }
};

subtest 'notes_slide_exists_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('notes_slide_exists_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('notes_slide_exists_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('notes_slide_exists_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('notes_slide_exists_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->notes_slide_exists_online(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('notes_slide_exists_online', 'slide_index', 'int');
    }
};

subtest 'notes_slide_exists_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('notes_slide_exists_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('notes_slide_exists_online', 'slide_index', 'int'), 'password' => $utils->get_param_value('notes_slide_exists_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('notes_slide_exists_online', 'password', $params{ password }, 'string');
    $utils->initialize('notes_slide_exists_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->notes_slide_exists_online(%params);
    };
    if ($@) {
        $utils->assert_error('notes_slide_exists_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('notes_slide_exists_online', 'password', 'string');
    }
};

#
# object_exists test
#
subtest 'object_exists' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $utils->initialize('object_exists', '');
    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        fail("object_exists raised an exception: $@");
    }
    pass();
};

subtest 'object_exists invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $params{ path } = $utils->invalidize_param_value('object_exists', 'path', $params{ path }, 'string');
    $utils->initialize('object_exists', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        $utils->assert_error('object_exists', 'path', $params{ path }, 'string', $@);
    } else {
        $utils->assert_no_error('object_exists', 'path', 'string');
    }
};

subtest 'object_exists invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('object_exists', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('object_exists', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        $utils->assert_error('object_exists', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('object_exists', 'storage_name', 'string');
    }
};

subtest 'object_exists invalid version_id' => sub {
    my %params = ('path' => $utils->get_param_value('object_exists', 'path', 'string'), 'storage_name' => $utils->get_param_value('object_exists', 'storage_name', 'string'), 'version_id' => $utils->get_param_value('object_exists', 'version_id', 'string'));
    $params{ version_id } = $utils->invalidize_param_value('object_exists', 'version_id', $params{ version_id }, 'string');
    $utils->initialize('object_exists', 'version_id', $params{ version_id });

    eval {
        my $result = $utils->{api}->object_exists(%params);
    };
    if ($@) {
        $utils->assert_error('object_exists', 'version_id', $params{ version_id }, 'string', $@);
    } else {
        $utils->assert_no_error('object_exists', 'version_id', 'string');
    }
};

#
# ordered_merge test
#
subtest 'ordered_merge' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $utils->initialize('ordered_merge', '');
    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        fail("ordered_merge raised an exception: $@");
    }
    pass();
};

subtest 'ordered_merge invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('ordered_merge', 'name', $params{ name }, 'string');
    $utils->initialize('ordered_merge', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'name', 'string');
    }
};

subtest 'ordered_merge invalid request' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ request } = $utils->invalidize_param_value('ordered_merge', 'request', $params{ request }, 'OrderedMergeRequest');
    $utils->initialize('ordered_merge', 'request', $params{ request });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'request', $params{ request }, 'OrderedMergeRequest', $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'request', 'OrderedMergeRequest');
    }
};

subtest 'ordered_merge invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('ordered_merge', 'password', $params{ password }, 'string');
    $utils->initialize('ordered_merge', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'password', 'string');
    }
};

subtest 'ordered_merge invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('ordered_merge', 'folder', $params{ folder }, 'string');
    $utils->initialize('ordered_merge', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'folder', 'string');
    }
};

subtest 'ordered_merge invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('ordered_merge', 'name', 'string'), 'request' => $utils->get_param_value('ordered_merge', 'request', 'OrderedMergeRequest'), 'password' => $utils->get_param_value('ordered_merge', 'password', 'string'), 'folder' => $utils->get_param_value('ordered_merge', 'folder', 'string'), 'storage' => $utils->get_param_value('ordered_merge', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('ordered_merge', 'storage', $params{ storage }, 'string');
    $utils->initialize('ordered_merge', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->ordered_merge(%params);
    };
    if ($@) {
        $utils->assert_error('ordered_merge', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('ordered_merge', 'storage', 'string');
    }
};

#
# pipeline test
#
subtest 'pipeline' => sub {
    my %params = ('pipeline' => $utils->get_param_value('pipeline', 'pipeline', 'Pipeline'), 'files' => $utils->get_param_value('pipeline', 'files', 'ARRAY[string]'));
    $utils->initialize('pipeline', '');
    eval {
        my $result = $utils->{api}->pipeline(%params);
    };
    if ($@) {
        fail("pipeline raised an exception: $@");
    }
    pass();
};

subtest 'pipeline invalid pipeline' => sub {
    my %params = ('pipeline' => $utils->get_param_value('pipeline', 'pipeline', 'Pipeline'), 'files' => $utils->get_param_value('pipeline', 'files', 'ARRAY[string]'));
    $params{ pipeline } = $utils->invalidize_param_value('pipeline', 'pipeline', $params{ pipeline }, 'Pipeline');
    $utils->initialize('pipeline', 'pipeline', $params{ pipeline });

    eval {
        my $result = $utils->{api}->pipeline(%params);
    };
    if ($@) {
        $utils->assert_error('pipeline', 'pipeline', $params{ pipeline }, 'Pipeline', $@);
    } else {
        $utils->assert_no_error('pipeline', 'pipeline', 'Pipeline');
    }
};

subtest 'pipeline invalid files' => sub {
    my %params = ('pipeline' => $utils->get_param_value('pipeline', 'pipeline', 'Pipeline'), 'files' => $utils->get_param_value('pipeline', 'files', 'ARRAY[string]'));
    $params{ files } = $utils->invalidize_param_value('pipeline', 'files', $params{ files }, 'ARRAY[string]');
    $utils->initialize('pipeline', 'files', $params{ files });

    eval {
        my $result = $utils->{api}->pipeline(%params);
    };
    if ($@) {
        $utils->assert_error('pipeline', 'files', $params{ files }, 'ARRAY[string]', $@);
    } else {
        $utils->assert_no_error('pipeline', 'files', 'ARRAY[string]');
    }
};

#
# reorder_slides test
#
subtest 'reorder_slides' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'int[]'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'int[]'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $utils->initialize('reorder_slides', '');
    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        fail("reorder_slides raised an exception: $@");
    }
    pass();
};

subtest 'reorder_slides invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'int[]'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'int[]'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('reorder_slides', 'name', $params{ name }, 'string');
    $utils->initialize('reorder_slides', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'name', 'string');
    }
};

subtest 'reorder_slides invalid old_positions' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'int[]'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'int[]'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ old_positions } = $utils->invalidize_param_value('reorder_slides', 'old_positions', $params{ old_positions }, 'int[]');
    $utils->initialize('reorder_slides', 'old_positions', $params{ old_positions });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'old_positions', $params{ old_positions }, 'int[]', $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'old_positions', 'int[]');
    }
};

subtest 'reorder_slides invalid new_positions' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'int[]'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'int[]'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ new_positions } = $utils->invalidize_param_value('reorder_slides', 'new_positions', $params{ new_positions }, 'int[]');
    $utils->initialize('reorder_slides', 'new_positions', $params{ new_positions });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'new_positions', $params{ new_positions }, 'int[]', $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'new_positions', 'int[]');
    }
};

subtest 'reorder_slides invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'int[]'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'int[]'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('reorder_slides', 'password', $params{ password }, 'string');
    $utils->initialize('reorder_slides', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'password', 'string');
    }
};

subtest 'reorder_slides invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'int[]'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'int[]'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('reorder_slides', 'folder', $params{ folder }, 'string');
    $utils->initialize('reorder_slides', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'folder', 'string');
    }
};

subtest 'reorder_slides invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('reorder_slides', 'name', 'string'), 'old_positions' => $utils->get_param_value('reorder_slides', 'old_positions', 'int[]'), 'new_positions' => $utils->get_param_value('reorder_slides', 'new_positions', 'int[]'), 'password' => $utils->get_param_value('reorder_slides', 'password', 'string'), 'folder' => $utils->get_param_value('reorder_slides', 'folder', 'string'), 'storage' => $utils->get_param_value('reorder_slides', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('reorder_slides', 'storage', $params{ storage }, 'string');
    $utils->initialize('reorder_slides', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->reorder_slides(%params);
    };
    if ($@) {
        $utils->assert_error('reorder_slides', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('reorder_slides', 'storage', 'string');
    }
};

#
# replace_font test
#
subtest 'replace_font' => sub {
    my %params = ('name' => $utils->get_param_value('replace_font', 'name', 'string'), 'source_font' => $utils->get_param_value('replace_font', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font', 'password', 'string'), 'folder' => $utils->get_param_value('replace_font', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font', 'fonts_folder', 'string'));
    $utils->initialize('replace_font', '');
    eval {
        my $result = $utils->{api}->replace_font(%params);
    };
    if ($@) {
        fail("replace_font raised an exception: $@");
    }
    pass();
};

subtest 'replace_font invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('replace_font', 'name', 'string'), 'source_font' => $utils->get_param_value('replace_font', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font', 'password', 'string'), 'folder' => $utils->get_param_value('replace_font', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('replace_font', 'name', $params{ name }, 'string');
    $utils->initialize('replace_font', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->replace_font(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font', 'name', 'string');
    }
};

subtest 'replace_font invalid source_font' => sub {
    my %params = ('name' => $utils->get_param_value('replace_font', 'name', 'string'), 'source_font' => $utils->get_param_value('replace_font', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font', 'password', 'string'), 'folder' => $utils->get_param_value('replace_font', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font', 'fonts_folder', 'string'));
    $params{ source_font } = $utils->invalidize_param_value('replace_font', 'source_font', $params{ source_font }, 'string');
    $utils->initialize('replace_font', 'source_font', $params{ source_font });

    eval {
        my $result = $utils->{api}->replace_font(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font', 'source_font', $params{ source_font }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font', 'source_font', 'string');
    }
};

subtest 'replace_font invalid target_font' => sub {
    my %params = ('name' => $utils->get_param_value('replace_font', 'name', 'string'), 'source_font' => $utils->get_param_value('replace_font', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font', 'password', 'string'), 'folder' => $utils->get_param_value('replace_font', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font', 'fonts_folder', 'string'));
    $params{ target_font } = $utils->invalidize_param_value('replace_font', 'target_font', $params{ target_font }, 'string');
    $utils->initialize('replace_font', 'target_font', $params{ target_font });

    eval {
        my $result = $utils->{api}->replace_font(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font', 'target_font', $params{ target_font }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font', 'target_font', 'string');
    }
};

subtest 'replace_font invalid embed' => sub {
    my %params = ('name' => $utils->get_param_value('replace_font', 'name', 'string'), 'source_font' => $utils->get_param_value('replace_font', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font', 'password', 'string'), 'folder' => $utils->get_param_value('replace_font', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font', 'fonts_folder', 'string'));
    $params{ embed } = $utils->invalidize_param_value('replace_font', 'embed', $params{ embed }, 'boolean');
    $utils->initialize('replace_font', 'embed', $params{ embed });

    eval {
        my $result = $utils->{api}->replace_font(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font', 'embed', $params{ embed }, 'boolean', $@);
    } else {
        $utils->assert_no_error('replace_font', 'embed', 'boolean');
    }
};

subtest 'replace_font invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('replace_font', 'name', 'string'), 'source_font' => $utils->get_param_value('replace_font', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font', 'password', 'string'), 'folder' => $utils->get_param_value('replace_font', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_font', 'password', $params{ password }, 'string');
    $utils->initialize('replace_font', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_font(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font', 'password', 'string');
    }
};

subtest 'replace_font invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('replace_font', 'name', 'string'), 'source_font' => $utils->get_param_value('replace_font', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font', 'password', 'string'), 'folder' => $utils->get_param_value('replace_font', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('replace_font', 'folder', $params{ folder }, 'string');
    $utils->initialize('replace_font', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->replace_font(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font', 'folder', 'string');
    }
};

subtest 'replace_font invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('replace_font', 'name', 'string'), 'source_font' => $utils->get_param_value('replace_font', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font', 'password', 'string'), 'folder' => $utils->get_param_value('replace_font', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('replace_font', 'storage', $params{ storage }, 'string');
    $utils->initialize('replace_font', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->replace_font(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font', 'storage', 'string');
    }
};

subtest 'replace_font invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('replace_font', 'name', 'string'), 'source_font' => $utils->get_param_value('replace_font', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font', 'password', 'string'), 'folder' => $utils->get_param_value('replace_font', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('replace_font', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('replace_font', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->replace_font(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font', 'fonts_folder', 'string');
    }
};

#
# replace_font_online test
#
subtest 'replace_font_online' => sub {
    my %params = ('document' => $utils->get_param_value('replace_font_online', 'document', 'File'), 'source_font' => $utils->get_param_value('replace_font_online', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font_online', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font_online', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font_online', 'fonts_folder', 'string'));
    $utils->initialize('replace_font_online', '');
    eval {
        my $result = $utils->{api}->replace_font_online(%params);
    };
    if ($@) {
        fail("replace_font_online raised an exception: $@");
    }
    pass();
};

subtest 'replace_font_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('replace_font_online', 'document', 'File'), 'source_font' => $utils->get_param_value('replace_font_online', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font_online', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font_online', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font_online', 'fonts_folder', 'string'));
    $params{ document } = $utils->invalidize_param_value('replace_font_online', 'document', $params{ document }, 'File');
    $utils->initialize('replace_font_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->replace_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('replace_font_online', 'document', 'File');
    }
};

subtest 'replace_font_online invalid source_font' => sub {
    my %params = ('document' => $utils->get_param_value('replace_font_online', 'document', 'File'), 'source_font' => $utils->get_param_value('replace_font_online', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font_online', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font_online', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font_online', 'fonts_folder', 'string'));
    $params{ source_font } = $utils->invalidize_param_value('replace_font_online', 'source_font', $params{ source_font }, 'string');
    $utils->initialize('replace_font_online', 'source_font', $params{ source_font });

    eval {
        my $result = $utils->{api}->replace_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font_online', 'source_font', $params{ source_font }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font_online', 'source_font', 'string');
    }
};

subtest 'replace_font_online invalid target_font' => sub {
    my %params = ('document' => $utils->get_param_value('replace_font_online', 'document', 'File'), 'source_font' => $utils->get_param_value('replace_font_online', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font_online', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font_online', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font_online', 'fonts_folder', 'string'));
    $params{ target_font } = $utils->invalidize_param_value('replace_font_online', 'target_font', $params{ target_font }, 'string');
    $utils->initialize('replace_font_online', 'target_font', $params{ target_font });

    eval {
        my $result = $utils->{api}->replace_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font_online', 'target_font', $params{ target_font }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font_online', 'target_font', 'string');
    }
};

subtest 'replace_font_online invalid embed' => sub {
    my %params = ('document' => $utils->get_param_value('replace_font_online', 'document', 'File'), 'source_font' => $utils->get_param_value('replace_font_online', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font_online', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font_online', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font_online', 'fonts_folder', 'string'));
    $params{ embed } = $utils->invalidize_param_value('replace_font_online', 'embed', $params{ embed }, 'boolean');
    $utils->initialize('replace_font_online', 'embed', $params{ embed });

    eval {
        my $result = $utils->{api}->replace_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font_online', 'embed', $params{ embed }, 'boolean', $@);
    } else {
        $utils->assert_no_error('replace_font_online', 'embed', 'boolean');
    }
};

subtest 'replace_font_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('replace_font_online', 'document', 'File'), 'source_font' => $utils->get_param_value('replace_font_online', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font_online', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font_online', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font_online', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_font_online', 'password', $params{ password }, 'string');
    $utils->initialize('replace_font_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font_online', 'password', 'string');
    }
};

subtest 'replace_font_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('replace_font_online', 'document', 'File'), 'source_font' => $utils->get_param_value('replace_font_online', 'source_font', 'string'), 'target_font' => $utils->get_param_value('replace_font_online', 'target_font', 'string'), 'embed' => $utils->get_param_value('replace_font_online', 'embed', 'boolean'), 'password' => $utils->get_param_value('replace_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('replace_font_online', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('replace_font_online', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('replace_font_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->replace_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_font_online', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_font_online', 'fonts_folder', 'string');
    }
};

#
# replace_presentation_text test
#
subtest 'replace_presentation_text' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $utils->initialize('replace_presentation_text', '');
    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        fail("replace_presentation_text raised an exception: $@");
    }
    pass();
};

subtest 'replace_presentation_text invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('replace_presentation_text', 'name', $params{ name }, 'string');
    $utils->initialize('replace_presentation_text', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'name', 'string');
    }
};

subtest 'replace_presentation_text invalid old_value' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('replace_presentation_text', 'old_value', $params{ old_value }, 'string');
    $utils->initialize('replace_presentation_text', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'old_value', $params{ old_value }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'old_value', 'string');
    }
};

subtest 'replace_presentation_text invalid new_value' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('replace_presentation_text', 'new_value', $params{ new_value }, 'string');
    $utils->initialize('replace_presentation_text', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'new_value', $params{ new_value }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'new_value', 'string');
    }
};

subtest 'replace_presentation_text invalid ignore_case' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('replace_presentation_text', 'ignore_case', $params{ ignore_case }, 'boolean');
    $utils->initialize('replace_presentation_text', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'ignore_case', $params{ ignore_case }, 'boolean', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'ignore_case', 'boolean');
    }
};

subtest 'replace_presentation_text invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_presentation_text', 'password', $params{ password }, 'string');
    $utils->initialize('replace_presentation_text', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'password', 'string');
    }
};

subtest 'replace_presentation_text invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('replace_presentation_text', 'folder', $params{ folder }, 'string');
    $utils->initialize('replace_presentation_text', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'folder', 'string');
    }
};

subtest 'replace_presentation_text invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('replace_presentation_text', 'name', 'string'), 'old_value' => $utils->get_param_value('replace_presentation_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_presentation_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_presentation_text', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('replace_presentation_text', 'storage', $params{ storage }, 'string');
    $utils->initialize('replace_presentation_text', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->replace_presentation_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text', 'storage', 'string');
    }
};

#
# replace_presentation_text_online test
#
subtest 'replace_presentation_text_online' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $utils->initialize('replace_presentation_text_online', '');
    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        fail("replace_presentation_text_online raised an exception: $@");
    }
    pass();
};

subtest 'replace_presentation_text_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('replace_presentation_text_online', 'document', $params{ document }, 'File');
    $utils->initialize('replace_presentation_text_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'document', 'File');
    }
};

subtest 'replace_presentation_text_online invalid old_value' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('replace_presentation_text_online', 'old_value', $params{ old_value }, 'string');
    $utils->initialize('replace_presentation_text_online', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'old_value', $params{ old_value }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'old_value', 'string');
    }
};

subtest 'replace_presentation_text_online invalid new_value' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('replace_presentation_text_online', 'new_value', $params{ new_value }, 'string');
    $utils->initialize('replace_presentation_text_online', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'new_value', $params{ new_value }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'new_value', 'string');
    }
};

subtest 'replace_presentation_text_online invalid ignore_case' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('replace_presentation_text_online', 'ignore_case', $params{ ignore_case }, 'boolean');
    $utils->initialize('replace_presentation_text_online', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'ignore_case', $params{ ignore_case }, 'boolean', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'ignore_case', 'boolean');
    }
};

subtest 'replace_presentation_text_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('replace_presentation_text_online', 'document', 'File'), 'old_value' => $utils->get_param_value('replace_presentation_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_presentation_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_presentation_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_presentation_text_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_presentation_text_online', 'password', $params{ password }, 'string');
    $utils->initialize('replace_presentation_text_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_presentation_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_presentation_text_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_presentation_text_online', 'password', 'string');
    }
};

#
# replace_slide_text test
#
subtest 'replace_slide_text' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $utils->initialize('replace_slide_text', '');
    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        fail("replace_slide_text raised an exception: $@");
    }
    pass();
};

subtest 'replace_slide_text invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('replace_slide_text', 'name', $params{ name }, 'string');
    $utils->initialize('replace_slide_text', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'name', 'string');
    }
};

subtest 'replace_slide_text invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('replace_slide_text', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('replace_slide_text', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'slide_index', 'int');
    }
};

subtest 'replace_slide_text invalid old_value' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('replace_slide_text', 'old_value', $params{ old_value }, 'string');
    $utils->initialize('replace_slide_text', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'old_value', $params{ old_value }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'old_value', 'string');
    }
};

subtest 'replace_slide_text invalid new_value' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('replace_slide_text', 'new_value', $params{ new_value }, 'string');
    $utils->initialize('replace_slide_text', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'new_value', $params{ new_value }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'new_value', 'string');
    }
};

subtest 'replace_slide_text invalid ignore_case' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('replace_slide_text', 'ignore_case', $params{ ignore_case }, 'boolean');
    $utils->initialize('replace_slide_text', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'ignore_case', $params{ ignore_case }, 'boolean', $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'ignore_case', 'boolean');
    }
};

subtest 'replace_slide_text invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_slide_text', 'password', $params{ password }, 'string');
    $utils->initialize('replace_slide_text', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'password', 'string');
    }
};

subtest 'replace_slide_text invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('replace_slide_text', 'folder', $params{ folder }, 'string');
    $utils->initialize('replace_slide_text', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'folder', 'string');
    }
};

subtest 'replace_slide_text invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('replace_slide_text', 'name', 'string'), 'slide_index' => $utils->get_param_value('replace_slide_text', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text', 'password', 'string'), 'folder' => $utils->get_param_value('replace_slide_text', 'folder', 'string'), 'storage' => $utils->get_param_value('replace_slide_text', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('replace_slide_text', 'storage', $params{ storage }, 'string');
    $utils->initialize('replace_slide_text', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->replace_slide_text(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_slide_text', 'storage', 'string');
    }
};

#
# replace_slide_text_online test
#
subtest 'replace_slide_text_online' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $utils->initialize('replace_slide_text_online', '');
    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        fail("replace_slide_text_online raised an exception: $@");
    }
    pass();
};

subtest 'replace_slide_text_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('replace_slide_text_online', 'document', $params{ document }, 'File');
    $utils->initialize('replace_slide_text_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'document', 'File');
    }
};

subtest 'replace_slide_text_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('replace_slide_text_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('replace_slide_text_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'slide_index', 'int');
    }
};

subtest 'replace_slide_text_online invalid old_value' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ old_value } = $utils->invalidize_param_value('replace_slide_text_online', 'old_value', $params{ old_value }, 'string');
    $utils->initialize('replace_slide_text_online', 'old_value', $params{ old_value });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'old_value', $params{ old_value }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'old_value', 'string');
    }
};

subtest 'replace_slide_text_online invalid new_value' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ new_value } = $utils->invalidize_param_value('replace_slide_text_online', 'new_value', $params{ new_value }, 'string');
    $utils->initialize('replace_slide_text_online', 'new_value', $params{ new_value });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'new_value', $params{ new_value }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'new_value', 'string');
    }
};

subtest 'replace_slide_text_online invalid ignore_case' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ ignore_case } = $utils->invalidize_param_value('replace_slide_text_online', 'ignore_case', $params{ ignore_case }, 'boolean');
    $utils->initialize('replace_slide_text_online', 'ignore_case', $params{ ignore_case });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'ignore_case', $params{ ignore_case }, 'boolean', $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'ignore_case', 'boolean');
    }
};

subtest 'replace_slide_text_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('replace_slide_text_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('replace_slide_text_online', 'slide_index', 'int'), 'old_value' => $utils->get_param_value('replace_slide_text_online', 'old_value', 'string'), 'new_value' => $utils->get_param_value('replace_slide_text_online', 'new_value', 'string'), 'ignore_case' => $utils->get_param_value('replace_slide_text_online', 'ignore_case', 'boolean'), 'password' => $utils->get_param_value('replace_slide_text_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('replace_slide_text_online', 'password', $params{ password }, 'string');
    $utils->initialize('replace_slide_text_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->replace_slide_text_online(%params);
    };
    if ($@) {
        $utils->assert_error('replace_slide_text_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('replace_slide_text_online', 'password', 'string');
    }
};

#
# save_portion_as_math_ml test
#
subtest 'save_portion_as_math_ml' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $utils->initialize('save_portion_as_math_ml', '');
    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        fail("save_portion_as_math_ml raised an exception: $@");
    }
    pass();
};

subtest 'save_portion_as_math_ml invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_portion_as_math_ml', 'name', $params{ name }, 'string');
    $utils->initialize('save_portion_as_math_ml', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('save_portion_as_math_ml', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('save_portion_as_math_ml', 'name', 'string');
    }
};

subtest 'save_portion_as_math_ml invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('save_portion_as_math_ml', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('save_portion_as_math_ml', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('save_portion_as_math_ml', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_portion_as_math_ml', 'slide_index', 'int');
    }
};

subtest 'save_portion_as_math_ml invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('save_portion_as_math_ml', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('save_portion_as_math_ml', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('save_portion_as_math_ml', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_portion_as_math_ml', 'shape_index', 'int');
    }
};

subtest 'save_portion_as_math_ml invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('save_portion_as_math_ml', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('save_portion_as_math_ml', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('save_portion_as_math_ml', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_portion_as_math_ml', 'paragraph_index', 'int');
    }
};

subtest 'save_portion_as_math_ml invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('save_portion_as_math_ml', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('save_portion_as_math_ml', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('save_portion_as_math_ml', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_portion_as_math_ml', 'portion_index', 'int');
    }
};

subtest 'save_portion_as_math_ml invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_portion_as_math_ml', 'out_path', $params{ out_path }, 'string');
    $utils->initialize('save_portion_as_math_ml', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('save_portion_as_math_ml', 'out_path', $params{ out_path }, 'string', $@);
    } else {
        $utils->assert_no_error('save_portion_as_math_ml', 'out_path', 'string');
    }
};

subtest 'save_portion_as_math_ml invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_portion_as_math_ml', 'password', $params{ password }, 'string');
    $utils->initialize('save_portion_as_math_ml', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('save_portion_as_math_ml', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('save_portion_as_math_ml', 'password', 'string');
    }
};

subtest 'save_portion_as_math_ml invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_portion_as_math_ml', 'folder', $params{ folder }, 'string');
    $utils->initialize('save_portion_as_math_ml', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('save_portion_as_math_ml', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_portion_as_math_ml', 'folder', 'string');
    }
};

subtest 'save_portion_as_math_ml invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_portion_as_math_ml', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_portion_as_math_ml', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_portion_as_math_ml', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('save_portion_as_math_ml', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('save_portion_as_math_ml', 'portion_index', 'int'), 'out_path' => $utils->get_param_value('save_portion_as_math_ml', 'out_path', 'string'), 'password' => $utils->get_param_value('save_portion_as_math_ml', 'password', 'string'), 'folder' => $utils->get_param_value('save_portion_as_math_ml', 'folder', 'string'), 'storage' => $utils->get_param_value('save_portion_as_math_ml', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_portion_as_math_ml', 'storage', $params{ storage }, 'string');
    $utils->initialize('save_portion_as_math_ml', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_portion_as_math_ml(%params);
    };
    if ($@) {
        $utils->assert_error('save_portion_as_math_ml', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('save_portion_as_math_ml', 'storage', 'string');
    }
};

#
# save_presentation test
#
subtest 'save_presentation' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $utils->initialize('save_presentation', '');
    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        fail("save_presentation raised an exception: $@");
    }
    pass();
};

subtest 'save_presentation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $params{ name } = $utils->invalidize_param_value('save_presentation', 'name', $params{ name }, 'string');
    $utils->initialize('save_presentation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('save_presentation', 'name', 'string');
    }
};

subtest 'save_presentation invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $params{ format } = $utils->invalidize_param_value('save_presentation', 'format', $params{ format }, 'string');
    $utils->initialize('save_presentation', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('save_presentation', 'format', 'string');
    }
};

subtest 'save_presentation invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $params{ out_path } = $utils->invalidize_param_value('save_presentation', 'out_path', $params{ out_path }, 'string');
    $utils->initialize('save_presentation', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'out_path', $params{ out_path }, 'string', $@);
    } else {
        $utils->assert_no_error('save_presentation', 'out_path', 'string');
    }
};

subtest 'save_presentation invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $params{ options } = $utils->invalidize_param_value('save_presentation', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('save_presentation', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('save_presentation', 'options', 'ExportOptions');
    }
};

subtest 'save_presentation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $params{ password } = $utils->invalidize_param_value('save_presentation', 'password', $params{ password }, 'string');
    $utils->initialize('save_presentation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('save_presentation', 'password', 'string');
    }
};

subtest 'save_presentation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $params{ folder } = $utils->invalidize_param_value('save_presentation', 'folder', $params{ folder }, 'string');
    $utils->initialize('save_presentation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_presentation', 'folder', 'string');
    }
};

subtest 'save_presentation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $params{ storage } = $utils->invalidize_param_value('save_presentation', 'storage', $params{ storage }, 'string');
    $utils->initialize('save_presentation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('save_presentation', 'storage', 'string');
    }
};

subtest 'save_presentation invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_presentation', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('save_presentation', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_presentation', 'fonts_folder', 'string');
    }
};

subtest 'save_presentation invalid slides' => sub {
    my %params = ('name' => $utils->get_param_value('save_presentation', 'name', 'string'), 'format' => $utils->get_param_value('save_presentation', 'format', 'string'), 'out_path' => $utils->get_param_value('save_presentation', 'out_path', 'string'), 'options' => $utils->get_param_value('save_presentation', 'options', 'ExportOptions'), 'password' => $utils->get_param_value('save_presentation', 'password', 'string'), 'folder' => $utils->get_param_value('save_presentation', 'folder', 'string'), 'storage' => $utils->get_param_value('save_presentation', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_presentation', 'fonts_folder', 'string'), 'slides' => $utils->get_param_value('save_presentation', 'slides', 'int[]'));
    $params{ slides } = $utils->invalidize_param_value('save_presentation', 'slides', $params{ slides }, 'int[]');
    $utils->initialize('save_presentation', 'slides', $params{ slides });

    eval {
        my $result = $utils->{api}->save_presentation(%params);
    };
    if ($@) {
        $utils->assert_error('save_presentation', 'slides', $params{ slides }, 'int[]', $@);
    } else {
        $utils->assert_no_error('save_presentation', 'slides', 'int[]');
    }
};

#
# save_shape test
#
subtest 'save_shape' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $utils->initialize('save_shape', '');
    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        fail("save_shape raised an exception: $@");
    }
    pass();
};

subtest 'save_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_shape', 'name', $params{ name }, 'string');
    $utils->initialize('save_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape', 'name', 'string');
    }
};

subtest 'save_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('save_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('save_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_shape', 'slide_index', 'int');
    }
};

subtest 'save_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('save_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('save_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_shape', 'shape_index', 'int');
    }
};

subtest 'save_shape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ format } = $utils->invalidize_param_value('save_shape', 'format', $params{ format }, 'string');
    $utils->initialize('save_shape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape', 'format', 'string');
    }
};

subtest 'save_shape invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_shape', 'out_path', $params{ out_path }, 'string');
    $utils->initialize('save_shape', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'out_path', $params{ out_path }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape', 'out_path', 'string');
    }
};

subtest 'save_shape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ options } = $utils->invalidize_param_value('save_shape', 'options', $params{ options }, 'IShapeExportOptions');
    $utils->initialize('save_shape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'options', $params{ options }, 'IShapeExportOptions', $@);
    } else {
        $utils->assert_no_error('save_shape', 'options', 'IShapeExportOptions');
    }
};

subtest 'save_shape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('save_shape', 'scale_x', $params{ scale_x }, 'double');
    $utils->initialize('save_shape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'scale_x', $params{ scale_x }, 'double', $@);
    } else {
        $utils->assert_no_error('save_shape', 'scale_x', 'double');
    }
};

subtest 'save_shape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('save_shape', 'scale_y', $params{ scale_y }, 'double');
    $utils->initialize('save_shape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'scale_y', $params{ scale_y }, 'double', $@);
    } else {
        $utils->assert_no_error('save_shape', 'scale_y', 'double');
    }
};

subtest 'save_shape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('save_shape', 'bounds', $params{ bounds }, 'string');
    $utils->initialize('save_shape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'bounds', $params{ bounds }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape', 'bounds', 'string');
    }
};

subtest 'save_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_shape', 'password', $params{ password }, 'string');
    $utils->initialize('save_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape', 'password', 'string');
    }
};

subtest 'save_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('save_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape', 'folder', 'string');
    }
};

subtest 'save_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('save_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape', 'storage', 'string');
    }
};

subtest 'save_shape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_shape', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('save_shape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape', 'fonts_folder', 'string');
    }
};

subtest 'save_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('save_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('save_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('save_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->save_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape', 'sub_shape', 'string');
    }
};

#
# save_shape_online test
#
subtest 'save_shape_online' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $utils->initialize('save_shape_online', '');
    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        fail("save_shape_online raised an exception: $@");
    }
    pass();
};

subtest 'save_shape_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ document } = $utils->invalidize_param_value('save_shape_online', 'document', $params{ document }, 'File');
    $utils->initialize('save_shape_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'document', 'File');
    }
};

subtest 'save_shape_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ slide_index } = $utils->invalidize_param_value('save_shape_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('save_shape_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'slide_index', 'int');
    }
};

subtest 'save_shape_online invalid shape_index' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ shape_index } = $utils->invalidize_param_value('save_shape_online', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('save_shape_online', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'shape_index', 'int');
    }
};

subtest 'save_shape_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ format } = $utils->invalidize_param_value('save_shape_online', 'format', $params{ format }, 'string');
    $utils->initialize('save_shape_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'format', 'string');
    }
};

subtest 'save_shape_online invalid out_path' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ out_path } = $utils->invalidize_param_value('save_shape_online', 'out_path', $params{ out_path }, 'string');
    $utils->initialize('save_shape_online', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'out_path', $params{ out_path }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'out_path', 'string');
    }
};

subtest 'save_shape_online invalid scale_x' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ scale_x } = $utils->invalidize_param_value('save_shape_online', 'scale_x', $params{ scale_x }, 'double');
    $utils->initialize('save_shape_online', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'scale_x', $params{ scale_x }, 'double', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'scale_x', 'double');
    }
};

subtest 'save_shape_online invalid scale_y' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ scale_y } = $utils->invalidize_param_value('save_shape_online', 'scale_y', $params{ scale_y }, 'double');
    $utils->initialize('save_shape_online', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'scale_y', $params{ scale_y }, 'double', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'scale_y', 'double');
    }
};

subtest 'save_shape_online invalid bounds' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ bounds } = $utils->invalidize_param_value('save_shape_online', 'bounds', $params{ bounds }, 'string');
    $utils->initialize('save_shape_online', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'bounds', $params{ bounds }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'bounds', 'string');
    }
};

subtest 'save_shape_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ password } = $utils->invalidize_param_value('save_shape_online', 'password', $params{ password }, 'string');
    $utils->initialize('save_shape_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'password', 'string');
    }
};

subtest 'save_shape_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('save_shape_online', 'storage', $params{ storage }, 'string');
    $utils->initialize('save_shape_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'storage', 'string');
    }
};

subtest 'save_shape_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_shape_online', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('save_shape_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'fonts_folder', 'string');
    }
};

subtest 'save_shape_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('save_shape_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_shape_online', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('save_shape_online', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_shape_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_shape_online', 'out_path', 'string'), 'scale_x' => $utils->get_param_value('save_shape_online', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_shape_online', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_shape_online', 'bounds', 'string'), 'password' => $utils->get_param_value('save_shape_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_shape_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_shape_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_shape_online', 'options', 'IShapeExportOptions'));
    $params{ options } = $utils->invalidize_param_value('save_shape_online', 'options', $params{ options }, 'IShapeExportOptions');
    $utils->initialize('save_shape_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_shape_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_shape_online', 'options', $params{ options }, 'IShapeExportOptions', $@);
    } else {
        $utils->assert_no_error('save_shape_online', 'options', 'IShapeExportOptions');
    }
};

#
# save_slide test
#
subtest 'save_slide' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $utils->initialize('save_slide', '');
    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        fail("save_slide raised an exception: $@");
    }
    pass();
};

subtest 'save_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_slide', 'name', $params{ name }, 'string');
    $utils->initialize('save_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide', 'name', 'string');
    }
};

subtest 'save_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('save_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('save_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_slide', 'slide_index', 'int');
    }
};

subtest 'save_slide invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('save_slide', 'format', $params{ format }, 'string');
    $utils->initialize('save_slide', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide', 'format', 'string');
    }
};

subtest 'save_slide invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_slide', 'out_path', $params{ out_path }, 'string');
    $utils->initialize('save_slide', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'out_path', $params{ out_path }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide', 'out_path', 'string');
    }
};

subtest 'save_slide invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('save_slide', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('save_slide', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('save_slide', 'options', 'ExportOptions');
    }
};

subtest 'save_slide invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('save_slide', 'width', $params{ width }, 'int');
    $utils->initialize('save_slide', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('save_slide', 'width', 'int');
    }
};

subtest 'save_slide invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('save_slide', 'height', $params{ height }, 'int');
    $utils->initialize('save_slide', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('save_slide', 'height', 'int');
    }
};

subtest 'save_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_slide', 'password', $params{ password }, 'string');
    $utils->initialize('save_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide', 'password', 'string');
    }
};

subtest 'save_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('save_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide', 'folder', 'string');
    }
};

subtest 'save_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('save_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide', 'storage', 'string');
    }
};

subtest 'save_slide invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_slide', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide', 'out_path', 'string'), 'options' => $utils->get_param_value('save_slide', 'options', 'ExportOptions'), 'width' => $utils->get_param_value('save_slide', 'width', 'int'), 'height' => $utils->get_param_value('save_slide', 'height', 'int'), 'password' => $utils->get_param_value('save_slide', 'password', 'string'), 'folder' => $utils->get_param_value('save_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('save_slide', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_slide', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('save_slide', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_slide(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide', 'fonts_folder', 'string');
    }
};

#
# save_slide_online test
#
subtest 'save_slide_online' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $utils->initialize('save_slide_online', '');
    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        fail("save_slide_online raised an exception: $@");
    }
    pass();
};

subtest 'save_slide_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('save_slide_online', 'document', $params{ document }, 'File');
    $utils->initialize('save_slide_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'document', 'File');
    }
};

subtest 'save_slide_online invalid slide_index' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ slide_index } = $utils->invalidize_param_value('save_slide_online', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('save_slide_online', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'slide_index', 'int');
    }
};

subtest 'save_slide_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('save_slide_online', 'format', $params{ format }, 'string');
    $utils->initialize('save_slide_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'format', 'string');
    }
};

subtest 'save_slide_online invalid out_path' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ out_path } = $utils->invalidize_param_value('save_slide_online', 'out_path', $params{ out_path }, 'string');
    $utils->initialize('save_slide_online', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'out_path', $params{ out_path }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'out_path', 'string');
    }
};

subtest 'save_slide_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ width } = $utils->invalidize_param_value('save_slide_online', 'width', $params{ width }, 'int');
    $utils->initialize('save_slide_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'width', 'int');
    }
};

subtest 'save_slide_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ height } = $utils->invalidize_param_value('save_slide_online', 'height', $params{ height }, 'int');
    $utils->initialize('save_slide_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'height', 'int');
    }
};

subtest 'save_slide_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('save_slide_online', 'password', $params{ password }, 'string');
    $utils->initialize('save_slide_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'password', 'string');
    }
};

subtest 'save_slide_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('save_slide_online', 'storage', $params{ storage }, 'string');
    $utils->initialize('save_slide_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'storage', 'string');
    }
};

subtest 'save_slide_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_slide_online', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('save_slide_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'fonts_folder', 'string');
    }
};

subtest 'save_slide_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('save_slide_online', 'document', 'File'), 'slide_index' => $utils->get_param_value('save_slide_online', 'slide_index', 'int'), 'format' => $utils->get_param_value('save_slide_online', 'format', 'string'), 'out_path' => $utils->get_param_value('save_slide_online', 'out_path', 'string'), 'width' => $utils->get_param_value('save_slide_online', 'width', 'int'), 'height' => $utils->get_param_value('save_slide_online', 'height', 'int'), 'password' => $utils->get_param_value('save_slide_online', 'password', 'string'), 'storage' => $utils->get_param_value('save_slide_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_slide_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('save_slide_online', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('save_slide_online', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('save_slide_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_slide_online(%params);
    };
    if ($@) {
        $utils->assert_error('save_slide_online', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('save_slide_online', 'options', 'ExportOptions');
    }
};

#
# save_special_slide_shape test
#
subtest 'save_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $utils->initialize('save_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        fail("save_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'save_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('save_special_slide_shape', 'name', $params{ name }, 'string');
    $utils->initialize('save_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'name', 'string');
    }
};

subtest 'save_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('save_special_slide_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('save_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'slide_index', 'int');
    }
};

subtest 'save_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('save_special_slide_shape', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('save_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'slide_type', 'string');
    }
};

subtest 'save_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('save_special_slide_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('save_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'shape_index', 'int');
    }
};

subtest 'save_special_slide_shape invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ format } = $utils->invalidize_param_value('save_special_slide_shape', 'format', $params{ format }, 'string');
    $utils->initialize('save_special_slide_shape', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'format', 'string');
    }
};

subtest 'save_special_slide_shape invalid out_path' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ out_path } = $utils->invalidize_param_value('save_special_slide_shape', 'out_path', $params{ out_path }, 'string');
    $utils->initialize('save_special_slide_shape', 'out_path', $params{ out_path });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'out_path', $params{ out_path }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'out_path', 'string');
    }
};

subtest 'save_special_slide_shape invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ options } = $utils->invalidize_param_value('save_special_slide_shape', 'options', $params{ options }, 'IShapeExportOptions');
    $utils->initialize('save_special_slide_shape', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'options', $params{ options }, 'IShapeExportOptions', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'options', 'IShapeExportOptions');
    }
};

subtest 'save_special_slide_shape invalid scale_x' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ scale_x } = $utils->invalidize_param_value('save_special_slide_shape', 'scale_x', $params{ scale_x }, 'double');
    $utils->initialize('save_special_slide_shape', 'scale_x', $params{ scale_x });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'scale_x', $params{ scale_x }, 'double', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'scale_x', 'double');
    }
};

subtest 'save_special_slide_shape invalid scale_y' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ scale_y } = $utils->invalidize_param_value('save_special_slide_shape', 'scale_y', $params{ scale_y }, 'double');
    $utils->initialize('save_special_slide_shape', 'scale_y', $params{ scale_y });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'scale_y', $params{ scale_y }, 'double', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'scale_y', 'double');
    }
};

subtest 'save_special_slide_shape invalid bounds' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ bounds } = $utils->invalidize_param_value('save_special_slide_shape', 'bounds', $params{ bounds }, 'string');
    $utils->initialize('save_special_slide_shape', 'bounds', $params{ bounds });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'bounds', $params{ bounds }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'bounds', 'string');
    }
};

subtest 'save_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('save_special_slide_shape', 'password', $params{ password }, 'string');
    $utils->initialize('save_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'password', 'string');
    }
};

subtest 'save_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('save_special_slide_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('save_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'folder', 'string');
    }
};

subtest 'save_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('save_special_slide_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('save_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'storage', 'string');
    }
};

subtest 'save_special_slide_shape invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('save_special_slide_shape', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('save_special_slide_shape', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'fonts_folder', 'string');
    }
};

subtest 'save_special_slide_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('save_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('save_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('save_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('save_special_slide_shape', 'shape_index', 'int'), 'format' => $utils->get_param_value('save_special_slide_shape', 'format', 'string'), 'out_path' => $utils->get_param_value('save_special_slide_shape', 'out_path', 'string'), 'options' => $utils->get_param_value('save_special_slide_shape', 'options', 'IShapeExportOptions'), 'scale_x' => $utils->get_param_value('save_special_slide_shape', 'scale_x', 'double'), 'scale_y' => $utils->get_param_value('save_special_slide_shape', 'scale_y', 'double'), 'bounds' => $utils->get_param_value('save_special_slide_shape', 'bounds', 'string'), 'password' => $utils->get_param_value('save_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('save_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('save_special_slide_shape', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('save_special_slide_shape', 'fonts_folder', 'string'), 'sub_shape' => $utils->get_param_value('save_special_slide_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('save_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('save_special_slide_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->save_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('save_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('save_special_slide_shape', 'sub_shape', 'string');
    }
};

#
# set_animation test
#
subtest 'set_animation' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $utils->initialize('set_animation', '');
    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        fail("set_animation raised an exception: $@");
    }
    pass();
};

subtest 'set_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_animation', 'name', $params{ name }, 'string');
    $utils->initialize('set_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_animation', 'name', 'string');
    }
};

subtest 'set_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_animation', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_animation', 'slide_index', 'int');
    }
};

subtest 'set_animation invalid animation' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ animation } = $utils->invalidize_param_value('set_animation', 'animation', $params{ animation }, 'SlideAnimation');
    $utils->initialize('set_animation', 'animation', $params{ animation });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'animation', $params{ animation }, 'SlideAnimation', $@);
    } else {
        $utils->assert_no_error('set_animation', 'animation', 'SlideAnimation');
    }
};

subtest 'set_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_animation', 'password', $params{ password }, 'string');
    $utils->initialize('set_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_animation', 'password', 'string');
    }
};

subtest 'set_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_animation', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_animation', 'folder', 'string');
    }
};

subtest 'set_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_animation', 'slide_index', 'int'), 'animation' => $utils->get_param_value('set_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_animation', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_animation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_animation', 'storage', 'string');
    }
};

#
# set_background test
#
subtest 'set_background' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $utils->initialize('set_background', '');
    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        fail("set_background raised an exception: $@");
    }
    pass();
};

subtest 'set_background invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_background', 'name', $params{ name }, 'string');
    $utils->initialize('set_background', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_background', 'name', 'string');
    }
};

subtest 'set_background invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_background', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_background', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_background', 'slide_index', 'int');
    }
};

subtest 'set_background invalid background' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ background } = $utils->invalidize_param_value('set_background', 'background', $params{ background }, 'SlideBackground');
    $utils->initialize('set_background', 'background', $params{ background });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'background', $params{ background }, 'SlideBackground', $@);
    } else {
        $utils->assert_no_error('set_background', 'background', 'SlideBackground');
    }
};

subtest 'set_background invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_background', 'password', $params{ password }, 'string');
    $utils->initialize('set_background', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_background', 'password', 'string');
    }
};

subtest 'set_background invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_background', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_background', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_background', 'folder', 'string');
    }
};

subtest 'set_background invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_background', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background', 'slide_index', 'int'), 'background' => $utils->get_param_value('set_background', 'background', 'SlideBackground'), 'password' => $utils->get_param_value('set_background', 'password', 'string'), 'folder' => $utils->get_param_value('set_background', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_background', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_background', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_background(%params);
    };
    if ($@) {
        $utils->assert_error('set_background', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_background', 'storage', 'string');
    }
};

#
# set_background_color test
#
subtest 'set_background_color' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $utils->initialize('set_background_color', '');
    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        fail("set_background_color raised an exception: $@");
    }
    pass();
};

subtest 'set_background_color invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_background_color', 'name', $params{ name }, 'string');
    $utils->initialize('set_background_color', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_background_color', 'name', 'string');
    }
};

subtest 'set_background_color invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_background_color', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_background_color', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_background_color', 'slide_index', 'int');
    }
};

subtest 'set_background_color invalid color' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ color } = $utils->invalidize_param_value('set_background_color', 'color', $params{ color }, 'string');
    $utils->initialize('set_background_color', 'color', $params{ color });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'color', $params{ color }, 'string', $@);
    } else {
        $utils->assert_no_error('set_background_color', 'color', 'string');
    }
};

subtest 'set_background_color invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_background_color', 'password', $params{ password }, 'string');
    $utils->initialize('set_background_color', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_background_color', 'password', 'string');
    }
};

subtest 'set_background_color invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_background_color', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_background_color', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_background_color', 'folder', 'string');
    }
};

subtest 'set_background_color invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_background_color', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_background_color', 'slide_index', 'int'), 'color' => $utils->get_param_value('set_background_color', 'color', 'string'), 'password' => $utils->get_param_value('set_background_color', 'password', 'string'), 'folder' => $utils->get_param_value('set_background_color', 'folder', 'string'), 'storage' => $utils->get_param_value('set_background_color', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_background_color', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_background_color', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_background_color(%params);
    };
    if ($@) {
        $utils->assert_error('set_background_color', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_background_color', 'storage', 'string');
    }
};

#
# set_chart_axis test
#
subtest 'set_chart_axis' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_axis', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_axis', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_axis', 'shape_index', 'int'), 'axis_type' => $utils->get_param_value('set_chart_axis', 'axis_type', 'string'), 'axis' => $utils->get_param_value('set_chart_axis', 'axis', 'Axis'), 'password' => $utils->get_param_value('set_chart_axis', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_axis', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_axis', 'storage', 'string'));
    $utils->initialize('set_chart_axis', '');
    eval {
        my $result = $utils->{api}->set_chart_axis(%params);
    };
    if ($@) {
        fail("set_chart_axis raised an exception: $@");
    }
    pass();
};

subtest 'set_chart_axis invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_axis', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_axis', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_axis', 'shape_index', 'int'), 'axis_type' => $utils->get_param_value('set_chart_axis', 'axis_type', 'string'), 'axis' => $utils->get_param_value('set_chart_axis', 'axis', 'Axis'), 'password' => $utils->get_param_value('set_chart_axis', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_axis', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_axis', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_chart_axis', 'name', $params{ name }, 'string');
    $utils->initialize('set_chart_axis', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_chart_axis(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_axis', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_axis', 'name', 'string');
    }
};

subtest 'set_chart_axis invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_axis', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_axis', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_axis', 'shape_index', 'int'), 'axis_type' => $utils->get_param_value('set_chart_axis', 'axis_type', 'string'), 'axis' => $utils->get_param_value('set_chart_axis', 'axis', 'Axis'), 'password' => $utils->get_param_value('set_chart_axis', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_axis', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_axis', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_chart_axis', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_chart_axis', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_chart_axis(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_axis', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_chart_axis', 'slide_index', 'int');
    }
};

subtest 'set_chart_axis invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_axis', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_axis', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_axis', 'shape_index', 'int'), 'axis_type' => $utils->get_param_value('set_chart_axis', 'axis_type', 'string'), 'axis' => $utils->get_param_value('set_chart_axis', 'axis', 'Axis'), 'password' => $utils->get_param_value('set_chart_axis', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_axis', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_axis', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('set_chart_axis', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('set_chart_axis', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->set_chart_axis(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_axis', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_chart_axis', 'shape_index', 'int');
    }
};

subtest 'set_chart_axis invalid axis_type' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_axis', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_axis', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_axis', 'shape_index', 'int'), 'axis_type' => $utils->get_param_value('set_chart_axis', 'axis_type', 'string'), 'axis' => $utils->get_param_value('set_chart_axis', 'axis', 'Axis'), 'password' => $utils->get_param_value('set_chart_axis', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_axis', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_axis', 'storage', 'string'));
    $params{ axis_type } = $utils->invalidize_param_value('set_chart_axis', 'axis_type', $params{ axis_type }, 'string');
    $utils->initialize('set_chart_axis', 'axis_type', $params{ axis_type });

    eval {
        my $result = $utils->{api}->set_chart_axis(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_axis', 'axis_type', $params{ axis_type }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_axis', 'axis_type', 'string');
    }
};

subtest 'set_chart_axis invalid axis' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_axis', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_axis', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_axis', 'shape_index', 'int'), 'axis_type' => $utils->get_param_value('set_chart_axis', 'axis_type', 'string'), 'axis' => $utils->get_param_value('set_chart_axis', 'axis', 'Axis'), 'password' => $utils->get_param_value('set_chart_axis', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_axis', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_axis', 'storage', 'string'));
    $params{ axis } = $utils->invalidize_param_value('set_chart_axis', 'axis', $params{ axis }, 'Axis');
    $utils->initialize('set_chart_axis', 'axis', $params{ axis });

    eval {
        my $result = $utils->{api}->set_chart_axis(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_axis', 'axis', $params{ axis }, 'Axis', $@);
    } else {
        $utils->assert_no_error('set_chart_axis', 'axis', 'Axis');
    }
};

subtest 'set_chart_axis invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_axis', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_axis', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_axis', 'shape_index', 'int'), 'axis_type' => $utils->get_param_value('set_chart_axis', 'axis_type', 'string'), 'axis' => $utils->get_param_value('set_chart_axis', 'axis', 'Axis'), 'password' => $utils->get_param_value('set_chart_axis', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_axis', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_axis', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_chart_axis', 'password', $params{ password }, 'string');
    $utils->initialize('set_chart_axis', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_chart_axis(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_axis', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_axis', 'password', 'string');
    }
};

subtest 'set_chart_axis invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_axis', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_axis', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_axis', 'shape_index', 'int'), 'axis_type' => $utils->get_param_value('set_chart_axis', 'axis_type', 'string'), 'axis' => $utils->get_param_value('set_chart_axis', 'axis', 'Axis'), 'password' => $utils->get_param_value('set_chart_axis', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_axis', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_axis', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_chart_axis', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_chart_axis', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_chart_axis(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_axis', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_axis', 'folder', 'string');
    }
};

subtest 'set_chart_axis invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_axis', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_axis', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_axis', 'shape_index', 'int'), 'axis_type' => $utils->get_param_value('set_chart_axis', 'axis_type', 'string'), 'axis' => $utils->get_param_value('set_chart_axis', 'axis', 'Axis'), 'password' => $utils->get_param_value('set_chart_axis', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_axis', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_axis', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_chart_axis', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_chart_axis', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_chart_axis(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_axis', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_axis', 'storage', 'string');
    }
};

#
# set_chart_legend test
#
subtest 'set_chart_legend' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_legend', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_legend', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_legend', 'shape_index', 'int'), 'legend' => $utils->get_param_value('set_chart_legend', 'legend', 'Legend'), 'password' => $utils->get_param_value('set_chart_legend', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_legend', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_legend', 'storage', 'string'));
    $utils->initialize('set_chart_legend', '');
    eval {
        my $result = $utils->{api}->set_chart_legend(%params);
    };
    if ($@) {
        fail("set_chart_legend raised an exception: $@");
    }
    pass();
};

subtest 'set_chart_legend invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_legend', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_legend', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_legend', 'shape_index', 'int'), 'legend' => $utils->get_param_value('set_chart_legend', 'legend', 'Legend'), 'password' => $utils->get_param_value('set_chart_legend', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_legend', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_legend', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_chart_legend', 'name', $params{ name }, 'string');
    $utils->initialize('set_chart_legend', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_chart_legend(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_legend', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_legend', 'name', 'string');
    }
};

subtest 'set_chart_legend invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_legend', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_legend', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_legend', 'shape_index', 'int'), 'legend' => $utils->get_param_value('set_chart_legend', 'legend', 'Legend'), 'password' => $utils->get_param_value('set_chart_legend', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_legend', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_legend', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_chart_legend', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_chart_legend', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_chart_legend(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_legend', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_chart_legend', 'slide_index', 'int');
    }
};

subtest 'set_chart_legend invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_legend', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_legend', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_legend', 'shape_index', 'int'), 'legend' => $utils->get_param_value('set_chart_legend', 'legend', 'Legend'), 'password' => $utils->get_param_value('set_chart_legend', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_legend', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_legend', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('set_chart_legend', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('set_chart_legend', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->set_chart_legend(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_legend', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_chart_legend', 'shape_index', 'int');
    }
};

subtest 'set_chart_legend invalid legend' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_legend', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_legend', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_legend', 'shape_index', 'int'), 'legend' => $utils->get_param_value('set_chart_legend', 'legend', 'Legend'), 'password' => $utils->get_param_value('set_chart_legend', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_legend', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_legend', 'storage', 'string'));
    $params{ legend } = $utils->invalidize_param_value('set_chart_legend', 'legend', $params{ legend }, 'Legend');
    $utils->initialize('set_chart_legend', 'legend', $params{ legend });

    eval {
        my $result = $utils->{api}->set_chart_legend(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_legend', 'legend', $params{ legend }, 'Legend', $@);
    } else {
        $utils->assert_no_error('set_chart_legend', 'legend', 'Legend');
    }
};

subtest 'set_chart_legend invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_legend', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_legend', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_legend', 'shape_index', 'int'), 'legend' => $utils->get_param_value('set_chart_legend', 'legend', 'Legend'), 'password' => $utils->get_param_value('set_chart_legend', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_legend', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_legend', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_chart_legend', 'password', $params{ password }, 'string');
    $utils->initialize('set_chart_legend', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_chart_legend(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_legend', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_legend', 'password', 'string');
    }
};

subtest 'set_chart_legend invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_legend', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_legend', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_legend', 'shape_index', 'int'), 'legend' => $utils->get_param_value('set_chart_legend', 'legend', 'Legend'), 'password' => $utils->get_param_value('set_chart_legend', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_legend', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_legend', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_chart_legend', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_chart_legend', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_chart_legend(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_legend', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_legend', 'folder', 'string');
    }
};

subtest 'set_chart_legend invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_legend', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_legend', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_legend', 'shape_index', 'int'), 'legend' => $utils->get_param_value('set_chart_legend', 'legend', 'Legend'), 'password' => $utils->get_param_value('set_chart_legend', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_legend', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_legend', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_chart_legend', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_chart_legend', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_chart_legend(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_legend', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_legend', 'storage', 'string');
    }
};

#
# set_chart_series_group test
#
subtest 'set_chart_series_group' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_series_group', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_series_group', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_series_group', 'shape_index', 'int'), 'series_group_index' => $utils->get_param_value('set_chart_series_group', 'series_group_index', 'int'), 'series_group' => $utils->get_param_value('set_chart_series_group', 'series_group', 'ChartSeriesGroup'), 'password' => $utils->get_param_value('set_chart_series_group', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_series_group', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_series_group', 'storage', 'string'));
    $utils->initialize('set_chart_series_group', '');
    eval {
        my $result = $utils->{api}->set_chart_series_group(%params);
    };
    if ($@) {
        fail("set_chart_series_group raised an exception: $@");
    }
    pass();
};

subtest 'set_chart_series_group invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_series_group', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_series_group', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_series_group', 'shape_index', 'int'), 'series_group_index' => $utils->get_param_value('set_chart_series_group', 'series_group_index', 'int'), 'series_group' => $utils->get_param_value('set_chart_series_group', 'series_group', 'ChartSeriesGroup'), 'password' => $utils->get_param_value('set_chart_series_group', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_series_group', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_series_group', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_chart_series_group', 'name', $params{ name }, 'string');
    $utils->initialize('set_chart_series_group', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_chart_series_group(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_series_group', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_series_group', 'name', 'string');
    }
};

subtest 'set_chart_series_group invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_series_group', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_series_group', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_series_group', 'shape_index', 'int'), 'series_group_index' => $utils->get_param_value('set_chart_series_group', 'series_group_index', 'int'), 'series_group' => $utils->get_param_value('set_chart_series_group', 'series_group', 'ChartSeriesGroup'), 'password' => $utils->get_param_value('set_chart_series_group', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_series_group', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_series_group', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_chart_series_group', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_chart_series_group', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_chart_series_group(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_series_group', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_chart_series_group', 'slide_index', 'int');
    }
};

subtest 'set_chart_series_group invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_series_group', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_series_group', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_series_group', 'shape_index', 'int'), 'series_group_index' => $utils->get_param_value('set_chart_series_group', 'series_group_index', 'int'), 'series_group' => $utils->get_param_value('set_chart_series_group', 'series_group', 'ChartSeriesGroup'), 'password' => $utils->get_param_value('set_chart_series_group', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_series_group', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_series_group', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('set_chart_series_group', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('set_chart_series_group', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->set_chart_series_group(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_series_group', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_chart_series_group', 'shape_index', 'int');
    }
};

subtest 'set_chart_series_group invalid series_group_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_series_group', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_series_group', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_series_group', 'shape_index', 'int'), 'series_group_index' => $utils->get_param_value('set_chart_series_group', 'series_group_index', 'int'), 'series_group' => $utils->get_param_value('set_chart_series_group', 'series_group', 'ChartSeriesGroup'), 'password' => $utils->get_param_value('set_chart_series_group', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_series_group', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_series_group', 'storage', 'string'));
    $params{ series_group_index } = $utils->invalidize_param_value('set_chart_series_group', 'series_group_index', $params{ series_group_index }, 'int');
    $utils->initialize('set_chart_series_group', 'series_group_index', $params{ series_group_index });

    eval {
        my $result = $utils->{api}->set_chart_series_group(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_series_group', 'series_group_index', $params{ series_group_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_chart_series_group', 'series_group_index', 'int');
    }
};

subtest 'set_chart_series_group invalid series_group' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_series_group', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_series_group', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_series_group', 'shape_index', 'int'), 'series_group_index' => $utils->get_param_value('set_chart_series_group', 'series_group_index', 'int'), 'series_group' => $utils->get_param_value('set_chart_series_group', 'series_group', 'ChartSeriesGroup'), 'password' => $utils->get_param_value('set_chart_series_group', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_series_group', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_series_group', 'storage', 'string'));
    $params{ series_group } = $utils->invalidize_param_value('set_chart_series_group', 'series_group', $params{ series_group }, 'ChartSeriesGroup');
    $utils->initialize('set_chart_series_group', 'series_group', $params{ series_group });

    eval {
        my $result = $utils->{api}->set_chart_series_group(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_series_group', 'series_group', $params{ series_group }, 'ChartSeriesGroup', $@);
    } else {
        $utils->assert_no_error('set_chart_series_group', 'series_group', 'ChartSeriesGroup');
    }
};

subtest 'set_chart_series_group invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_series_group', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_series_group', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_series_group', 'shape_index', 'int'), 'series_group_index' => $utils->get_param_value('set_chart_series_group', 'series_group_index', 'int'), 'series_group' => $utils->get_param_value('set_chart_series_group', 'series_group', 'ChartSeriesGroup'), 'password' => $utils->get_param_value('set_chart_series_group', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_series_group', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_series_group', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_chart_series_group', 'password', $params{ password }, 'string');
    $utils->initialize('set_chart_series_group', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_chart_series_group(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_series_group', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_series_group', 'password', 'string');
    }
};

subtest 'set_chart_series_group invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_series_group', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_series_group', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_series_group', 'shape_index', 'int'), 'series_group_index' => $utils->get_param_value('set_chart_series_group', 'series_group_index', 'int'), 'series_group' => $utils->get_param_value('set_chart_series_group', 'series_group', 'ChartSeriesGroup'), 'password' => $utils->get_param_value('set_chart_series_group', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_series_group', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_series_group', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_chart_series_group', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_chart_series_group', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_chart_series_group(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_series_group', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_series_group', 'folder', 'string');
    }
};

subtest 'set_chart_series_group invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_series_group', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_series_group', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_series_group', 'shape_index', 'int'), 'series_group_index' => $utils->get_param_value('set_chart_series_group', 'series_group_index', 'int'), 'series_group' => $utils->get_param_value('set_chart_series_group', 'series_group', 'ChartSeriesGroup'), 'password' => $utils->get_param_value('set_chart_series_group', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_series_group', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_series_group', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_chart_series_group', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_chart_series_group', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_chart_series_group(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_series_group', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_series_group', 'storage', 'string');
    }
};

#
# set_chart_wall test
#
subtest 'set_chart_wall' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_wall', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_wall', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_wall', 'shape_index', 'int'), 'chart_wall_type' => $utils->get_param_value('set_chart_wall', 'chart_wall_type', 'string'), 'chart_wall' => $utils->get_param_value('set_chart_wall', 'chart_wall', 'ChartWall'), 'password' => $utils->get_param_value('set_chart_wall', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_wall', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_wall', 'storage', 'string'));
    $utils->initialize('set_chart_wall', '');
    eval {
        my $result = $utils->{api}->set_chart_wall(%params);
    };
    if ($@) {
        fail("set_chart_wall raised an exception: $@");
    }
    pass();
};

subtest 'set_chart_wall invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_wall', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_wall', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_wall', 'shape_index', 'int'), 'chart_wall_type' => $utils->get_param_value('set_chart_wall', 'chart_wall_type', 'string'), 'chart_wall' => $utils->get_param_value('set_chart_wall', 'chart_wall', 'ChartWall'), 'password' => $utils->get_param_value('set_chart_wall', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_wall', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_wall', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_chart_wall', 'name', $params{ name }, 'string');
    $utils->initialize('set_chart_wall', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_chart_wall(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_wall', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_wall', 'name', 'string');
    }
};

subtest 'set_chart_wall invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_wall', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_wall', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_wall', 'shape_index', 'int'), 'chart_wall_type' => $utils->get_param_value('set_chart_wall', 'chart_wall_type', 'string'), 'chart_wall' => $utils->get_param_value('set_chart_wall', 'chart_wall', 'ChartWall'), 'password' => $utils->get_param_value('set_chart_wall', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_wall', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_wall', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_chart_wall', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_chart_wall', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_chart_wall(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_wall', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_chart_wall', 'slide_index', 'int');
    }
};

subtest 'set_chart_wall invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_wall', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_wall', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_wall', 'shape_index', 'int'), 'chart_wall_type' => $utils->get_param_value('set_chart_wall', 'chart_wall_type', 'string'), 'chart_wall' => $utils->get_param_value('set_chart_wall', 'chart_wall', 'ChartWall'), 'password' => $utils->get_param_value('set_chart_wall', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_wall', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_wall', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('set_chart_wall', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('set_chart_wall', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->set_chart_wall(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_wall', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_chart_wall', 'shape_index', 'int');
    }
};

subtest 'set_chart_wall invalid chart_wall_type' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_wall', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_wall', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_wall', 'shape_index', 'int'), 'chart_wall_type' => $utils->get_param_value('set_chart_wall', 'chart_wall_type', 'string'), 'chart_wall' => $utils->get_param_value('set_chart_wall', 'chart_wall', 'ChartWall'), 'password' => $utils->get_param_value('set_chart_wall', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_wall', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_wall', 'storage', 'string'));
    $params{ chart_wall_type } = $utils->invalidize_param_value('set_chart_wall', 'chart_wall_type', $params{ chart_wall_type }, 'string');
    $utils->initialize('set_chart_wall', 'chart_wall_type', $params{ chart_wall_type });

    eval {
        my $result = $utils->{api}->set_chart_wall(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_wall', 'chart_wall_type', $params{ chart_wall_type }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_wall', 'chart_wall_type', 'string');
    }
};

subtest 'set_chart_wall invalid chart_wall' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_wall', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_wall', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_wall', 'shape_index', 'int'), 'chart_wall_type' => $utils->get_param_value('set_chart_wall', 'chart_wall_type', 'string'), 'chart_wall' => $utils->get_param_value('set_chart_wall', 'chart_wall', 'ChartWall'), 'password' => $utils->get_param_value('set_chart_wall', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_wall', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_wall', 'storage', 'string'));
    $params{ chart_wall } = $utils->invalidize_param_value('set_chart_wall', 'chart_wall', $params{ chart_wall }, 'ChartWall');
    $utils->initialize('set_chart_wall', 'chart_wall', $params{ chart_wall });

    eval {
        my $result = $utils->{api}->set_chart_wall(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_wall', 'chart_wall', $params{ chart_wall }, 'ChartWall', $@);
    } else {
        $utils->assert_no_error('set_chart_wall', 'chart_wall', 'ChartWall');
    }
};

subtest 'set_chart_wall invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_wall', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_wall', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_wall', 'shape_index', 'int'), 'chart_wall_type' => $utils->get_param_value('set_chart_wall', 'chart_wall_type', 'string'), 'chart_wall' => $utils->get_param_value('set_chart_wall', 'chart_wall', 'ChartWall'), 'password' => $utils->get_param_value('set_chart_wall', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_wall', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_wall', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_chart_wall', 'password', $params{ password }, 'string');
    $utils->initialize('set_chart_wall', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_chart_wall(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_wall', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_wall', 'password', 'string');
    }
};

subtest 'set_chart_wall invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_wall', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_wall', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_wall', 'shape_index', 'int'), 'chart_wall_type' => $utils->get_param_value('set_chart_wall', 'chart_wall_type', 'string'), 'chart_wall' => $utils->get_param_value('set_chart_wall', 'chart_wall', 'ChartWall'), 'password' => $utils->get_param_value('set_chart_wall', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_wall', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_wall', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_chart_wall', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_chart_wall', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_chart_wall(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_wall', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_wall', 'folder', 'string');
    }
};

subtest 'set_chart_wall invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_chart_wall', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_chart_wall', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_chart_wall', 'shape_index', 'int'), 'chart_wall_type' => $utils->get_param_value('set_chart_wall', 'chart_wall_type', 'string'), 'chart_wall' => $utils->get_param_value('set_chart_wall', 'chart_wall', 'ChartWall'), 'password' => $utils->get_param_value('set_chart_wall', 'password', 'string'), 'folder' => $utils->get_param_value('set_chart_wall', 'folder', 'string'), 'storage' => $utils->get_param_value('set_chart_wall', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_chart_wall', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_chart_wall', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_chart_wall(%params);
    };
    if ($@) {
        $utils->assert_error('set_chart_wall', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_chart_wall', 'storage', 'string');
    }
};

#
# set_document_properties test
#
subtest 'set_document_properties' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $utils->initialize('set_document_properties', '');
    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        fail("set_document_properties raised an exception: $@");
    }
    pass();
};

subtest 'set_document_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_document_properties', 'name', $params{ name }, 'string');
    $utils->initialize('set_document_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'name', 'string');
    }
};

subtest 'set_document_properties invalid properties' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ properties } = $utils->invalidize_param_value('set_document_properties', 'properties', $params{ properties }, 'DocumentProperties');
    $utils->initialize('set_document_properties', 'properties', $params{ properties });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'properties', $params{ properties }, 'DocumentProperties', $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'properties', 'DocumentProperties');
    }
};

subtest 'set_document_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_document_properties', 'password', $params{ password }, 'string');
    $utils->initialize('set_document_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'password', 'string');
    }
};

subtest 'set_document_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_document_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_document_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'folder', 'string');
    }
};

subtest 'set_document_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_properties', 'name', 'string'), 'properties' => $utils->get_param_value('set_document_properties', 'properties', 'DocumentProperties'), 'password' => $utils->get_param_value('set_document_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_document_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_document_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_document_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_document_properties', 'storage', 'string');
    }
};

#
# set_document_property test
#
subtest 'set_document_property' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $utils->initialize('set_document_property', '');
    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        fail("set_document_property raised an exception: $@");
    }
    pass();
};

subtest 'set_document_property invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_document_property', 'name', $params{ name }, 'string');
    $utils->initialize('set_document_property', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_document_property', 'name', 'string');
    }
};

subtest 'set_document_property invalid property_name' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ property_name } = $utils->invalidize_param_value('set_document_property', 'property_name', $params{ property_name }, 'string');
    $utils->initialize('set_document_property', 'property_name', $params{ property_name });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'property_name', $params{ property_name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_document_property', 'property_name', 'string');
    }
};

subtest 'set_document_property invalid property' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ property } = $utils->invalidize_param_value('set_document_property', 'property', $params{ property }, 'DocumentProperty');
    $utils->initialize('set_document_property', 'property', $params{ property });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'property', $params{ property }, 'DocumentProperty', $@);
    } else {
        $utils->assert_no_error('set_document_property', 'property', 'DocumentProperty');
    }
};

subtest 'set_document_property invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_document_property', 'password', $params{ password }, 'string');
    $utils->initialize('set_document_property', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_document_property', 'password', 'string');
    }
};

subtest 'set_document_property invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_document_property', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_document_property', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_document_property', 'folder', 'string');
    }
};

subtest 'set_document_property invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_document_property', 'name', 'string'), 'property_name' => $utils->get_param_value('set_document_property', 'property_name', 'string'), 'property' => $utils->get_param_value('set_document_property', 'property', 'DocumentProperty'), 'password' => $utils->get_param_value('set_document_property', 'password', 'string'), 'folder' => $utils->get_param_value('set_document_property', 'folder', 'string'), 'storage' => $utils->get_param_value('set_document_property', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_document_property', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_document_property', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_document_property(%params);
    };
    if ($@) {
        $utils->assert_error('set_document_property', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_document_property', 'storage', 'string');
    }
};

#
# set_embedded_font test
#
subtest 'set_embedded_font' => sub {
    my %params = ('name' => $utils->get_param_value('set_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('set_embedded_font', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font', 'fonts_folder', 'string'));
    $utils->initialize('set_embedded_font', '');
    eval {
        my $result = $utils->{api}->set_embedded_font(%params);
    };
    if ($@) {
        fail("set_embedded_font raised an exception: $@");
    }
    pass();
};

subtest 'set_embedded_font invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('set_embedded_font', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_embedded_font', 'name', $params{ name }, 'string');
    $utils->initialize('set_embedded_font', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font', 'name', 'string');
    }
};

subtest 'set_embedded_font invalid font_name' => sub {
    my %params = ('name' => $utils->get_param_value('set_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('set_embedded_font', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font', 'fonts_folder', 'string'));
    $params{ font_name } = $utils->invalidize_param_value('set_embedded_font', 'font_name', $params{ font_name }, 'string');
    $utils->initialize('set_embedded_font', 'font_name', $params{ font_name });

    eval {
        my $result = $utils->{api}->set_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font', 'font_name', $params{ font_name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font', 'font_name', 'string');
    }
};

subtest 'set_embedded_font invalid only_used' => sub {
    my %params = ('name' => $utils->get_param_value('set_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('set_embedded_font', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font', 'fonts_folder', 'string'));
    $params{ only_used } = $utils->invalidize_param_value('set_embedded_font', 'only_used', $params{ only_used }, 'boolean');
    $utils->initialize('set_embedded_font', 'only_used', $params{ only_used });

    eval {
        my $result = $utils->{api}->set_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font', 'only_used', $params{ only_used }, 'boolean', $@);
    } else {
        $utils->assert_no_error('set_embedded_font', 'only_used', 'boolean');
    }
};

subtest 'set_embedded_font invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('set_embedded_font', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_embedded_font', 'password', $params{ password }, 'string');
    $utils->initialize('set_embedded_font', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font', 'password', 'string');
    }
};

subtest 'set_embedded_font invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('set_embedded_font', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_embedded_font', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_embedded_font', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font', 'folder', 'string');
    }
};

subtest 'set_embedded_font invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('set_embedded_font', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_embedded_font', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_embedded_font', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font', 'storage', 'string');
    }
};

subtest 'set_embedded_font invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_embedded_font', 'name', 'string'), 'font_name' => $utils->get_param_value('set_embedded_font', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('set_embedded_font', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('set_embedded_font', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->set_embedded_font(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font', 'fonts_folder', 'string');
    }
};

#
# set_embedded_font_from_request test
#
subtest 'set_embedded_font_from_request' => sub {
    my %params = ('font' => $utils->get_param_value('set_embedded_font_from_request', 'font', 'File'), 'name' => $utils->get_param_value('set_embedded_font_from_request', 'name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font_from_request', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font_from_request', 'storage', 'string'));
    $utils->initialize('set_embedded_font_from_request', '');
    eval {
        my $result = $utils->{api}->set_embedded_font_from_request(%params);
    };
    if ($@) {
        fail("set_embedded_font_from_request raised an exception: $@");
    }
    pass();
};

subtest 'set_embedded_font_from_request invalid font' => sub {
    my %params = ('font' => $utils->get_param_value('set_embedded_font_from_request', 'font', 'File'), 'name' => $utils->get_param_value('set_embedded_font_from_request', 'name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font_from_request', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font_from_request', 'storage', 'string'));
    $params{ font } = $utils->invalidize_param_value('set_embedded_font_from_request', 'font', $params{ font }, 'File');
    $utils->initialize('set_embedded_font_from_request', 'font', $params{ font });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request', 'font', $params{ font }, 'File', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request', 'font', 'File');
    }
};

subtest 'set_embedded_font_from_request invalid name' => sub {
    my %params = ('font' => $utils->get_param_value('set_embedded_font_from_request', 'font', 'File'), 'name' => $utils->get_param_value('set_embedded_font_from_request', 'name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font_from_request', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font_from_request', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_embedded_font_from_request', 'name', $params{ name }, 'string');
    $utils->initialize('set_embedded_font_from_request', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request', 'name', 'string');
    }
};

subtest 'set_embedded_font_from_request invalid only_used' => sub {
    my %params = ('font' => $utils->get_param_value('set_embedded_font_from_request', 'font', 'File'), 'name' => $utils->get_param_value('set_embedded_font_from_request', 'name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font_from_request', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font_from_request', 'storage', 'string'));
    $params{ only_used } = $utils->invalidize_param_value('set_embedded_font_from_request', 'only_used', $params{ only_used }, 'boolean');
    $utils->initialize('set_embedded_font_from_request', 'only_used', $params{ only_used });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request', 'only_used', $params{ only_used }, 'boolean', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request', 'only_used', 'boolean');
    }
};

subtest 'set_embedded_font_from_request invalid password' => sub {
    my %params = ('font' => $utils->get_param_value('set_embedded_font_from_request', 'font', 'File'), 'name' => $utils->get_param_value('set_embedded_font_from_request', 'name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font_from_request', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font_from_request', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_embedded_font_from_request', 'password', $params{ password }, 'string');
    $utils->initialize('set_embedded_font_from_request', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request', 'password', 'string');
    }
};

subtest 'set_embedded_font_from_request invalid folder' => sub {
    my %params = ('font' => $utils->get_param_value('set_embedded_font_from_request', 'font', 'File'), 'name' => $utils->get_param_value('set_embedded_font_from_request', 'name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font_from_request', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font_from_request', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_embedded_font_from_request', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_embedded_font_from_request', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request', 'folder', 'string');
    }
};

subtest 'set_embedded_font_from_request invalid storage' => sub {
    my %params = ('font' => $utils->get_param_value('set_embedded_font_from_request', 'font', 'File'), 'name' => $utils->get_param_value('set_embedded_font_from_request', 'name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request', 'password', 'string'), 'folder' => $utils->get_param_value('set_embedded_font_from_request', 'folder', 'string'), 'storage' => $utils->get_param_value('set_embedded_font_from_request', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_embedded_font_from_request', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_embedded_font_from_request', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request', 'storage', 'string');
    }
};

#
# set_embedded_font_from_request_online test
#
subtest 'set_embedded_font_from_request_online' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_from_request_online', 'document', 'File'), 'font' => $utils->get_param_value('set_embedded_font_from_request_online', 'font', 'File'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request_online', 'password', 'string'));
    $utils->initialize('set_embedded_font_from_request_online', '');
    eval {
        my $result = $utils->{api}->set_embedded_font_from_request_online(%params);
    };
    if ($@) {
        fail("set_embedded_font_from_request_online raised an exception: $@");
    }
    pass();
};

subtest 'set_embedded_font_from_request_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_from_request_online', 'document', 'File'), 'font' => $utils->get_param_value('set_embedded_font_from_request_online', 'font', 'File'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('set_embedded_font_from_request_online', 'document', $params{ document }, 'File');
    $utils->initialize('set_embedded_font_from_request_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request_online', 'document', 'File');
    }
};

subtest 'set_embedded_font_from_request_online invalid font' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_from_request_online', 'document', 'File'), 'font' => $utils->get_param_value('set_embedded_font_from_request_online', 'font', 'File'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request_online', 'password', 'string'));
    $params{ font } = $utils->invalidize_param_value('set_embedded_font_from_request_online', 'font', $params{ font }, 'File');
    $utils->initialize('set_embedded_font_from_request_online', 'font', $params{ font });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request_online', 'font', $params{ font }, 'File', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request_online', 'font', 'File');
    }
};

subtest 'set_embedded_font_from_request_online invalid only_used' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_from_request_online', 'document', 'File'), 'font' => $utils->get_param_value('set_embedded_font_from_request_online', 'font', 'File'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request_online', 'password', 'string'));
    $params{ only_used } = $utils->invalidize_param_value('set_embedded_font_from_request_online', 'only_used', $params{ only_used }, 'boolean');
    $utils->initialize('set_embedded_font_from_request_online', 'only_used', $params{ only_used });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request_online', 'only_used', $params{ only_used }, 'boolean', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request_online', 'only_used', 'boolean');
    }
};

subtest 'set_embedded_font_from_request_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_from_request_online', 'document', 'File'), 'font' => $utils->get_param_value('set_embedded_font_from_request_online', 'font', 'File'), 'only_used' => $utils->get_param_value('set_embedded_font_from_request_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_from_request_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_embedded_font_from_request_online', 'password', $params{ password }, 'string');
    $utils->initialize('set_embedded_font_from_request_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_embedded_font_from_request_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_from_request_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_from_request_online', 'password', 'string');
    }
};

#
# set_embedded_font_online test
#
subtest 'set_embedded_font_online' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('set_embedded_font_online', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font_online', 'fonts_folder', 'string'));
    $utils->initialize('set_embedded_font_online', '');
    eval {
        my $result = $utils->{api}->set_embedded_font_online(%params);
    };
    if ($@) {
        fail("set_embedded_font_online raised an exception: $@");
    }
    pass();
};

subtest 'set_embedded_font_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('set_embedded_font_online', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font_online', 'fonts_folder', 'string'));
    $params{ document } = $utils->invalidize_param_value('set_embedded_font_online', 'document', $params{ document }, 'File');
    $utils->initialize('set_embedded_font_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->set_embedded_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_online', 'document', 'File');
    }
};

subtest 'set_embedded_font_online invalid font_name' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('set_embedded_font_online', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font_online', 'fonts_folder', 'string'));
    $params{ font_name } = $utils->invalidize_param_value('set_embedded_font_online', 'font_name', $params{ font_name }, 'string');
    $utils->initialize('set_embedded_font_online', 'font_name', $params{ font_name });

    eval {
        my $result = $utils->{api}->set_embedded_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_online', 'font_name', $params{ font_name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_online', 'font_name', 'string');
    }
};

subtest 'set_embedded_font_online invalid only_used' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('set_embedded_font_online', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font_online', 'fonts_folder', 'string'));
    $params{ only_used } = $utils->invalidize_param_value('set_embedded_font_online', 'only_used', $params{ only_used }, 'boolean');
    $utils->initialize('set_embedded_font_online', 'only_used', $params{ only_used });

    eval {
        my $result = $utils->{api}->set_embedded_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_online', 'only_used', $params{ only_used }, 'boolean', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_online', 'only_used', 'boolean');
    }
};

subtest 'set_embedded_font_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('set_embedded_font_online', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font_online', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_embedded_font_online', 'password', $params{ password }, 'string');
    $utils->initialize('set_embedded_font_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_embedded_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_online', 'password', 'string');
    }
};

subtest 'set_embedded_font_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('set_embedded_font_online', 'document', 'File'), 'font_name' => $utils->get_param_value('set_embedded_font_online', 'font_name', 'string'), 'only_used' => $utils->get_param_value('set_embedded_font_online', 'only_used', 'boolean'), 'password' => $utils->get_param_value('set_embedded_font_online', 'password', 'string'), 'fonts_folder' => $utils->get_param_value('set_embedded_font_online', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('set_embedded_font_online', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('set_embedded_font_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->set_embedded_font_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_embedded_font_online', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_embedded_font_online', 'fonts_folder', 'string');
    }
};

#
# set_notes_slide_header_footer test
#
subtest 'set_notes_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $utils->initialize('set_notes_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        fail("set_notes_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'set_notes_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'name', $params{ name }, 'string');
    $utils->initialize('set_notes_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'name', 'string');
    }
};

subtest 'set_notes_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_notes_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'slide_index', 'int');
    }
};

subtest 'set_notes_slide_header_footer invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'dto', $params{ dto }, 'NotesSlideHeaderFooter');
    $utils->initialize('set_notes_slide_header_footer', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'dto', $params{ dto }, 'NotesSlideHeaderFooter', $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter');
    }
};

subtest 'set_notes_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'password', $params{ password }, 'string');
    $utils->initialize('set_notes_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'password', 'string');
    }
};

subtest 'set_notes_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_notes_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'folder', 'string');
    }
};

subtest 'set_notes_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_notes_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_notes_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter'), 'password' => $utils->get_param_value('set_notes_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_notes_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_notes_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_notes_slide_header_footer', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_notes_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_notes_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_notes_slide_header_footer', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_notes_slide_header_footer', 'storage', 'string');
    }
};

#
# set_presentation_header_footer test
#
subtest 'set_presentation_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $utils->initialize('set_presentation_header_footer', '');
    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        fail("set_presentation_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'set_presentation_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_presentation_header_footer', 'name', $params{ name }, 'string');
    $utils->initialize('set_presentation_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'name', 'string');
    }
};

subtest 'set_presentation_header_footer invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_presentation_header_footer', 'dto', $params{ dto }, 'HeaderFooter');
    $utils->initialize('set_presentation_header_footer', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'dto', $params{ dto }, 'HeaderFooter', $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'dto', 'HeaderFooter');
    }
};

subtest 'set_presentation_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_presentation_header_footer', 'password', $params{ password }, 'string');
    $utils->initialize('set_presentation_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'password', 'string');
    }
};

subtest 'set_presentation_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_presentation_header_footer', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_presentation_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'folder', 'string');
    }
};

subtest 'set_presentation_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_presentation_header_footer', 'name', 'string'), 'dto' => $utils->get_param_value('set_presentation_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_presentation_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_presentation_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_presentation_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_presentation_header_footer', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_presentation_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_presentation_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_presentation_header_footer', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_presentation_header_footer', 'storage', 'string');
    }
};

#
# set_protection test
#
subtest 'set_protection' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $utils->initialize('set_protection', '');
    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        fail("set_protection raised an exception: $@");
    }
    pass();
};

subtest 'set_protection invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_protection', 'name', $params{ name }, 'string');
    $utils->initialize('set_protection', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_protection', 'name', 'string');
    }
};

subtest 'set_protection invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_protection', 'dto', $params{ dto }, 'ProtectionProperties');
    $utils->initialize('set_protection', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'dto', $params{ dto }, 'ProtectionProperties', $@);
    } else {
        $utils->assert_no_error('set_protection', 'dto', 'ProtectionProperties');
    }
};

subtest 'set_protection invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_protection', 'password', $params{ password }, 'string');
    $utils->initialize('set_protection', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_protection', 'password', 'string');
    }
};

subtest 'set_protection invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_protection', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_protection', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_protection', 'folder', 'string');
    }
};

subtest 'set_protection invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_protection', 'name', 'string'), 'dto' => $utils->get_param_value('set_protection', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection', 'password', 'string'), 'folder' => $utils->get_param_value('set_protection', 'folder', 'string'), 'storage' => $utils->get_param_value('set_protection', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_protection', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_protection', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_protection(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_protection', 'storage', 'string');
    }
};

#
# set_protection_online test
#
subtest 'set_protection_online' => sub {
    my %params = ('document' => $utils->get_param_value('set_protection_online', 'document', 'File'), 'dto' => $utils->get_param_value('set_protection_online', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection_online', 'password', 'string'));
    $utils->initialize('set_protection_online', '');
    eval {
        my $result = $utils->{api}->set_protection_online(%params);
    };
    if ($@) {
        fail("set_protection_online raised an exception: $@");
    }
    pass();
};

subtest 'set_protection_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('set_protection_online', 'document', 'File'), 'dto' => $utils->get_param_value('set_protection_online', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection_online', 'password', 'string'));
    $params{ document } = $utils->invalidize_param_value('set_protection_online', 'document', $params{ document }, 'File');
    $utils->initialize('set_protection_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->set_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('set_protection_online', 'document', 'File');
    }
};

subtest 'set_protection_online invalid dto' => sub {
    my %params = ('document' => $utils->get_param_value('set_protection_online', 'document', 'File'), 'dto' => $utils->get_param_value('set_protection_online', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection_online', 'password', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_protection_online', 'dto', $params{ dto }, 'ProtectionProperties');
    $utils->initialize('set_protection_online', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection_online', 'dto', $params{ dto }, 'ProtectionProperties', $@);
    } else {
        $utils->assert_no_error('set_protection_online', 'dto', 'ProtectionProperties');
    }
};

subtest 'set_protection_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('set_protection_online', 'document', 'File'), 'dto' => $utils->get_param_value('set_protection_online', 'dto', 'ProtectionProperties'), 'password' => $utils->get_param_value('set_protection_online', 'password', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_protection_online', 'password', $params{ password }, 'string');
    $utils->initialize('set_protection_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_protection_online(%params);
    };
    if ($@) {
        $utils->assert_error('set_protection_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_protection_online', 'password', 'string');
    }
};

#
# set_sections test
#
subtest 'set_sections' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $utils->initialize('set_sections', '');
    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        fail("set_sections raised an exception: $@");
    }
    pass();
};

subtest 'set_sections invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_sections', 'name', $params{ name }, 'string');
    $utils->initialize('set_sections', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_sections', 'name', 'string');
    }
};

subtest 'set_sections invalid sections' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ sections } = $utils->invalidize_param_value('set_sections', 'sections', $params{ sections }, 'Sections');
    $utils->initialize('set_sections', 'sections', $params{ sections });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'sections', $params{ sections }, 'Sections', $@);
    } else {
        $utils->assert_no_error('set_sections', 'sections', 'Sections');
    }
};

subtest 'set_sections invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_sections', 'password', $params{ password }, 'string');
    $utils->initialize('set_sections', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_sections', 'password', 'string');
    }
};

subtest 'set_sections invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_sections', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_sections', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_sections', 'folder', 'string');
    }
};

subtest 'set_sections invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_sections', 'name', 'string'), 'sections' => $utils->get_param_value('set_sections', 'sections', 'Sections'), 'password' => $utils->get_param_value('set_sections', 'password', 'string'), 'folder' => $utils->get_param_value('set_sections', 'folder', 'string'), 'storage' => $utils->get_param_value('set_sections', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_sections', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_sections', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_sections(%params);
    };
    if ($@) {
        $utils->assert_error('set_sections', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_sections', 'storage', 'string');
    }
};

#
# set_shape_geometry_path test
#
subtest 'set_shape_geometry_path' => sub {
    my %params = ('name' => $utils->get_param_value('set_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_shape_geometry_path', 'shape_index', 'int'), 'dto' => $utils->get_param_value('set_shape_geometry_path', 'dto', 'GeometryPaths'), 'password' => $utils->get_param_value('set_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('set_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('set_shape_geometry_path', 'storage', 'string'));
    $utils->initialize('set_shape_geometry_path', '');
    eval {
        my $result = $utils->{api}->set_shape_geometry_path(%params);
    };
    if ($@) {
        fail("set_shape_geometry_path raised an exception: $@");
    }
    pass();
};

subtest 'set_shape_geometry_path invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_shape_geometry_path', 'shape_index', 'int'), 'dto' => $utils->get_param_value('set_shape_geometry_path', 'dto', 'GeometryPaths'), 'password' => $utils->get_param_value('set_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('set_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('set_shape_geometry_path', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_shape_geometry_path', 'name', $params{ name }, 'string');
    $utils->initialize('set_shape_geometry_path', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('set_shape_geometry_path', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_shape_geometry_path', 'name', 'string');
    }
};

subtest 'set_shape_geometry_path invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_shape_geometry_path', 'shape_index', 'int'), 'dto' => $utils->get_param_value('set_shape_geometry_path', 'dto', 'GeometryPaths'), 'password' => $utils->get_param_value('set_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('set_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('set_shape_geometry_path', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_shape_geometry_path', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_shape_geometry_path', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('set_shape_geometry_path', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_shape_geometry_path', 'slide_index', 'int');
    }
};

subtest 'set_shape_geometry_path invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_shape_geometry_path', 'shape_index', 'int'), 'dto' => $utils->get_param_value('set_shape_geometry_path', 'dto', 'GeometryPaths'), 'password' => $utils->get_param_value('set_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('set_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('set_shape_geometry_path', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('set_shape_geometry_path', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('set_shape_geometry_path', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->set_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('set_shape_geometry_path', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_shape_geometry_path', 'shape_index', 'int');
    }
};

subtest 'set_shape_geometry_path invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_shape_geometry_path', 'shape_index', 'int'), 'dto' => $utils->get_param_value('set_shape_geometry_path', 'dto', 'GeometryPaths'), 'password' => $utils->get_param_value('set_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('set_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('set_shape_geometry_path', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_shape_geometry_path', 'dto', $params{ dto }, 'GeometryPaths');
    $utils->initialize('set_shape_geometry_path', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('set_shape_geometry_path', 'dto', $params{ dto }, 'GeometryPaths', $@);
    } else {
        $utils->assert_no_error('set_shape_geometry_path', 'dto', 'GeometryPaths');
    }
};

subtest 'set_shape_geometry_path invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_shape_geometry_path', 'shape_index', 'int'), 'dto' => $utils->get_param_value('set_shape_geometry_path', 'dto', 'GeometryPaths'), 'password' => $utils->get_param_value('set_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('set_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('set_shape_geometry_path', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_shape_geometry_path', 'password', $params{ password }, 'string');
    $utils->initialize('set_shape_geometry_path', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('set_shape_geometry_path', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_shape_geometry_path', 'password', 'string');
    }
};

subtest 'set_shape_geometry_path invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_shape_geometry_path', 'shape_index', 'int'), 'dto' => $utils->get_param_value('set_shape_geometry_path', 'dto', 'GeometryPaths'), 'password' => $utils->get_param_value('set_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('set_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('set_shape_geometry_path', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_shape_geometry_path', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_shape_geometry_path', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('set_shape_geometry_path', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_shape_geometry_path', 'folder', 'string');
    }
};

subtest 'set_shape_geometry_path invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_shape_geometry_path', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_shape_geometry_path', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('set_shape_geometry_path', 'shape_index', 'int'), 'dto' => $utils->get_param_value('set_shape_geometry_path', 'dto', 'GeometryPaths'), 'password' => $utils->get_param_value('set_shape_geometry_path', 'password', 'string'), 'folder' => $utils->get_param_value('set_shape_geometry_path', 'folder', 'string'), 'storage' => $utils->get_param_value('set_shape_geometry_path', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_shape_geometry_path', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_shape_geometry_path', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_shape_geometry_path(%params);
    };
    if ($@) {
        $utils->assert_error('set_shape_geometry_path', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_shape_geometry_path', 'storage', 'string');
    }
};

#
# set_slide_header_footer test
#
subtest 'set_slide_header_footer' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $utils->initialize('set_slide_header_footer', '');
    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        fail("set_slide_header_footer raised an exception: $@");
    }
    pass();
};

subtest 'set_slide_header_footer invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_slide_header_footer', 'name', $params{ name }, 'string');
    $utils->initialize('set_slide_header_footer', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'name', 'string');
    }
};

subtest 'set_slide_header_footer invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_slide_header_footer', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_slide_header_footer', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'slide_index', 'int');
    }
};

subtest 'set_slide_header_footer invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_slide_header_footer', 'dto', $params{ dto }, 'HeaderFooter');
    $utils->initialize('set_slide_header_footer', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'dto', $params{ dto }, 'HeaderFooter', $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'dto', 'HeaderFooter');
    }
};

subtest 'set_slide_header_footer invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_slide_header_footer', 'password', $params{ password }, 'string');
    $utils->initialize('set_slide_header_footer', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'password', 'string');
    }
};

subtest 'set_slide_header_footer invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_slide_header_footer', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_slide_header_footer', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'folder', 'string');
    }
};

subtest 'set_slide_header_footer invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_header_footer', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_slide_header_footer', 'slide_index', 'int'), 'dto' => $utils->get_param_value('set_slide_header_footer', 'dto', 'HeaderFooter'), 'password' => $utils->get_param_value('set_slide_header_footer', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_header_footer', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_header_footer', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_slide_header_footer', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_slide_header_footer', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_slide_header_footer(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_header_footer', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_header_footer', 'storage', 'string');
    }
};

#
# set_slide_properties test
#
subtest 'set_slide_properties' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $utils->initialize('set_slide_properties', '');
    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        fail("set_slide_properties raised an exception: $@");
    }
    pass();
};

subtest 'set_slide_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_slide_properties', 'name', $params{ name }, 'string');
    $utils->initialize('set_slide_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'name', 'string');
    }
};

subtest 'set_slide_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_slide_properties', 'dto', $params{ dto }, 'SlideProperties');
    $utils->initialize('set_slide_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'dto', $params{ dto }, 'SlideProperties', $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'dto', 'SlideProperties');
    }
};

subtest 'set_slide_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_slide_properties', 'password', $params{ password }, 'string');
    $utils->initialize('set_slide_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'password', 'string');
    }
};

subtest 'set_slide_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_slide_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_slide_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'folder', 'string');
    }
};

subtest 'set_slide_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_properties', 'dto', 'SlideProperties'), 'password' => $utils->get_param_value('set_slide_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_slide_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_slide_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_slide_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_properties', 'storage', 'string');
    }
};

#
# set_slide_show_properties test
#
subtest 'set_slide_show_properties' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_show_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_show_properties', 'dto', 'SlideShowProperties'), 'password' => $utils->get_param_value('set_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_show_properties', 'storage', 'string'));
    $utils->initialize('set_slide_show_properties', '');
    eval {
        my $result = $utils->{api}->set_slide_show_properties(%params);
    };
    if ($@) {
        fail("set_slide_show_properties raised an exception: $@");
    }
    pass();
};

subtest 'set_slide_show_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_show_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_show_properties', 'dto', 'SlideShowProperties'), 'password' => $utils->get_param_value('set_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_show_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_slide_show_properties', 'name', $params{ name }, 'string');
    $utils->initialize('set_slide_show_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_slide_show_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_show_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_show_properties', 'name', 'string');
    }
};

subtest 'set_slide_show_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_show_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_show_properties', 'dto', 'SlideShowProperties'), 'password' => $utils->get_param_value('set_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_show_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_slide_show_properties', 'dto', $params{ dto }, 'SlideShowProperties');
    $utils->initialize('set_slide_show_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_slide_show_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_show_properties', 'dto', $params{ dto }, 'SlideShowProperties', $@);
    } else {
        $utils->assert_no_error('set_slide_show_properties', 'dto', 'SlideShowProperties');
    }
};

subtest 'set_slide_show_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_show_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_show_properties', 'dto', 'SlideShowProperties'), 'password' => $utils->get_param_value('set_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_show_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_slide_show_properties', 'password', $params{ password }, 'string');
    $utils->initialize('set_slide_show_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_slide_show_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_show_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_show_properties', 'password', 'string');
    }
};

subtest 'set_slide_show_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_show_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_show_properties', 'dto', 'SlideShowProperties'), 'password' => $utils->get_param_value('set_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_show_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_slide_show_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_slide_show_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_slide_show_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_show_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_show_properties', 'folder', 'string');
    }
};

subtest 'set_slide_show_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_slide_show_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_slide_show_properties', 'dto', 'SlideShowProperties'), 'password' => $utils->get_param_value('set_slide_show_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_slide_show_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_slide_show_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_slide_show_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_slide_show_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_slide_show_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_slide_show_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_slide_show_properties', 'storage', 'string');
    }
};

#
# set_special_slide_animation test
#
subtest 'set_special_slide_animation' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $utils->initialize('set_special_slide_animation', '');
    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        fail("set_special_slide_animation raised an exception: $@");
    }
    pass();
};

subtest 'set_special_slide_animation invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_special_slide_animation', 'name', $params{ name }, 'string');
    $utils->initialize('set_special_slide_animation', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'name', 'string');
    }
};

subtest 'set_special_slide_animation invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('set_special_slide_animation', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('set_special_slide_animation', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'slide_index', 'int');
    }
};

subtest 'set_special_slide_animation invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('set_special_slide_animation', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('set_special_slide_animation', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'slide_type', 'string');
    }
};

subtest 'set_special_slide_animation invalid animation' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ animation } = $utils->invalidize_param_value('set_special_slide_animation', 'animation', $params{ animation }, 'SlideAnimation');
    $utils->initialize('set_special_slide_animation', 'animation', $params{ animation });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'animation', $params{ animation }, 'SlideAnimation', $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'animation', 'SlideAnimation');
    }
};

subtest 'set_special_slide_animation invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_special_slide_animation', 'password', $params{ password }, 'string');
    $utils->initialize('set_special_slide_animation', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'password', 'string');
    }
};

subtest 'set_special_slide_animation invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_special_slide_animation', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_special_slide_animation', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'folder', 'string');
    }
};

subtest 'set_special_slide_animation invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_special_slide_animation', 'name', 'string'), 'slide_index' => $utils->get_param_value('set_special_slide_animation', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('set_special_slide_animation', 'slide_type', 'string'), 'animation' => $utils->get_param_value('set_special_slide_animation', 'animation', 'SlideAnimation'), 'password' => $utils->get_param_value('set_special_slide_animation', 'password', 'string'), 'folder' => $utils->get_param_value('set_special_slide_animation', 'folder', 'string'), 'storage' => $utils->get_param_value('set_special_slide_animation', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_special_slide_animation', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_special_slide_animation', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_special_slide_animation(%params);
    };
    if ($@) {
        $utils->assert_error('set_special_slide_animation', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_special_slide_animation', 'storage', 'string');
    }
};

#
# set_view_properties test
#
subtest 'set_view_properties' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $utils->initialize('set_view_properties', '');
    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        fail("set_view_properties raised an exception: $@");
    }
    pass();
};

subtest 'set_view_properties invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('set_view_properties', 'name', $params{ name }, 'string');
    $utils->initialize('set_view_properties', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'name', 'string');
    }
};

subtest 'set_view_properties invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('set_view_properties', 'dto', $params{ dto }, 'ViewProperties');
    $utils->initialize('set_view_properties', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'dto', $params{ dto }, 'ViewProperties', $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'dto', 'ViewProperties');
    }
};

subtest 'set_view_properties invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('set_view_properties', 'password', $params{ password }, 'string');
    $utils->initialize('set_view_properties', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'password', 'string');
    }
};

subtest 'set_view_properties invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('set_view_properties', 'folder', $params{ folder }, 'string');
    $utils->initialize('set_view_properties', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'folder', 'string');
    }
};

subtest 'set_view_properties invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('set_view_properties', 'name', 'string'), 'dto' => $utils->get_param_value('set_view_properties', 'dto', 'ViewProperties'), 'password' => $utils->get_param_value('set_view_properties', 'password', 'string'), 'folder' => $utils->get_param_value('set_view_properties', 'folder', 'string'), 'storage' => $utils->get_param_value('set_view_properties', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('set_view_properties', 'storage', $params{ storage }, 'string');
    $utils->initialize('set_view_properties', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->set_view_properties(%params);
    };
    if ($@) {
        $utils->assert_error('set_view_properties', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('set_view_properties', 'storage', 'string');
    }
};

#
# split test
#
subtest 'split' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $utils->initialize('split', '');
    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        fail("split raised an exception: $@");
    }
    pass();
};

subtest 'split invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ name } = $utils->invalidize_param_value('split', 'name', $params{ name }, 'string');
    $utils->initialize('split', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('split', 'name', 'string');
    }
};

subtest 'split invalid options' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ options } = $utils->invalidize_param_value('split', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('split', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('split', 'options', 'ExportOptions');
    }
};

subtest 'split invalid format' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ format } = $utils->invalidize_param_value('split', 'format', $params{ format }, 'string');
    $utils->initialize('split', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('split', 'format', 'string');
    }
};

subtest 'split invalid width' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ width } = $utils->invalidize_param_value('split', 'width', $params{ width }, 'int');
    $utils->initialize('split', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('split', 'width', 'int');
    }
};

subtest 'split invalid height' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ height } = $utils->invalidize_param_value('split', 'height', $params{ height }, 'int');
    $utils->initialize('split', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('split', 'height', 'int');
    }
};

subtest 'split invalid from' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ from } = $utils->invalidize_param_value('split', 'from', $params{ from }, 'int');
    $utils->initialize('split', 'from', $params{ from });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'from', $params{ from }, 'int', $@);
    } else {
        $utils->assert_no_error('split', 'from', 'int');
    }
};

subtest 'split invalid to' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ to } = $utils->invalidize_param_value('split', 'to', $params{ to }, 'int');
    $utils->initialize('split', 'to', $params{ to });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'to', $params{ to }, 'int', $@);
    } else {
        $utils->assert_no_error('split', 'to', 'int');
    }
};

subtest 'split invalid dest_folder' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ dest_folder } = $utils->invalidize_param_value('split', 'dest_folder', $params{ dest_folder }, 'string');
    $utils->initialize('split', 'dest_folder', $params{ dest_folder });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'dest_folder', $params{ dest_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('split', 'dest_folder', 'string');
    }
};

subtest 'split invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ password } = $utils->invalidize_param_value('split', 'password', $params{ password }, 'string');
    $utils->initialize('split', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('split', 'password', 'string');
    }
};

subtest 'split invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ folder } = $utils->invalidize_param_value('split', 'folder', $params{ folder }, 'string');
    $utils->initialize('split', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('split', 'folder', 'string');
    }
};

subtest 'split invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ storage } = $utils->invalidize_param_value('split', 'storage', $params{ storage }, 'string');
    $utils->initialize('split', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('split', 'storage', 'string');
    }
};

subtest 'split invalid fonts_folder' => sub {
    my %params = ('name' => $utils->get_param_value('split', 'name', 'string'), 'options' => $utils->get_param_value('split', 'options', 'ExportOptions'), 'format' => $utils->get_param_value('split', 'format', 'string'), 'width' => $utils->get_param_value('split', 'width', 'int'), 'height' => $utils->get_param_value('split', 'height', 'int'), 'from' => $utils->get_param_value('split', 'from', 'int'), 'to' => $utils->get_param_value('split', 'to', 'int'), 'dest_folder' => $utils->get_param_value('split', 'dest_folder', 'string'), 'password' => $utils->get_param_value('split', 'password', 'string'), 'folder' => $utils->get_param_value('split', 'folder', 'string'), 'storage' => $utils->get_param_value('split', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split', 'fonts_folder', 'string'));
    $params{ fonts_folder } = $utils->invalidize_param_value('split', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('split', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->split(%params);
    };
    if ($@) {
        $utils->assert_error('split', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('split', 'fonts_folder', 'string');
    }
};

#
# split_and_save_online test
#
subtest 'split_and_save_online' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $utils->initialize('split_and_save_online', '');
    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        fail("split_and_save_online raised an exception: $@");
    }
    pass();
};

subtest 'split_and_save_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('split_and_save_online', 'document', $params{ document }, 'File');
    $utils->initialize('split_and_save_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'document', 'File');
    }
};

subtest 'split_and_save_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('split_and_save_online', 'format', $params{ format }, 'string');
    $utils->initialize('split_and_save_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'format', 'string');
    }
};

subtest 'split_and_save_online invalid dest_folder' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ dest_folder } = $utils->invalidize_param_value('split_and_save_online', 'dest_folder', $params{ dest_folder }, 'string');
    $utils->initialize('split_and_save_online', 'dest_folder', $params{ dest_folder });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'dest_folder', $params{ dest_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'dest_folder', 'string');
    }
};

subtest 'split_and_save_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ width } = $utils->invalidize_param_value('split_and_save_online', 'width', $params{ width }, 'int');
    $utils->initialize('split_and_save_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'width', 'int');
    }
};

subtest 'split_and_save_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ height } = $utils->invalidize_param_value('split_and_save_online', 'height', $params{ height }, 'int');
    $utils->initialize('split_and_save_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'height', 'int');
    }
};

subtest 'split_and_save_online invalid from' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ from } = $utils->invalidize_param_value('split_and_save_online', 'from', $params{ from }, 'int');
    $utils->initialize('split_and_save_online', 'from', $params{ from });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'from', $params{ from }, 'int', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'from', 'int');
    }
};

subtest 'split_and_save_online invalid to' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ to } = $utils->invalidize_param_value('split_and_save_online', 'to', $params{ to }, 'int');
    $utils->initialize('split_and_save_online', 'to', $params{ to });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'to', $params{ to }, 'int', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'to', 'int');
    }
};

subtest 'split_and_save_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('split_and_save_online', 'password', $params{ password }, 'string');
    $utils->initialize('split_and_save_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'password', 'string');
    }
};

subtest 'split_and_save_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('split_and_save_online', 'storage', $params{ storage }, 'string');
    $utils->initialize('split_and_save_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'storage', 'string');
    }
};

subtest 'split_and_save_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('split_and_save_online', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('split_and_save_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'fonts_folder', 'string');
    }
};

subtest 'split_and_save_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('split_and_save_online', 'document', 'File'), 'format' => $utils->get_param_value('split_and_save_online', 'format', 'string'), 'dest_folder' => $utils->get_param_value('split_and_save_online', 'dest_folder', 'string'), 'width' => $utils->get_param_value('split_and_save_online', 'width', 'int'), 'height' => $utils->get_param_value('split_and_save_online', 'height', 'int'), 'from' => $utils->get_param_value('split_and_save_online', 'from', 'int'), 'to' => $utils->get_param_value('split_and_save_online', 'to', 'int'), 'password' => $utils->get_param_value('split_and_save_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_and_save_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_and_save_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_and_save_online', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('split_and_save_online', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('split_and_save_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->split_and_save_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_and_save_online', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('split_and_save_online', 'options', 'ExportOptions');
    }
};

#
# split_online test
#
subtest 'split_online' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $utils->initialize('split_online', '');
    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        fail("split_online raised an exception: $@");
    }
    pass();
};

subtest 'split_online invalid document' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ document } = $utils->invalidize_param_value('split_online', 'document', $params{ document }, 'File');
    $utils->initialize('split_online', 'document', $params{ document });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'document', $params{ document }, 'File', $@);
    } else {
        $utils->assert_no_error('split_online', 'document', 'File');
    }
};

subtest 'split_online invalid format' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ format } = $utils->invalidize_param_value('split_online', 'format', $params{ format }, 'string');
    $utils->initialize('split_online', 'format', $params{ format });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'format', $params{ format }, 'string', $@);
    } else {
        $utils->assert_no_error('split_online', 'format', 'string');
    }
};

subtest 'split_online invalid width' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ width } = $utils->invalidize_param_value('split_online', 'width', $params{ width }, 'int');
    $utils->initialize('split_online', 'width', $params{ width });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'width', $params{ width }, 'int', $@);
    } else {
        $utils->assert_no_error('split_online', 'width', 'int');
    }
};

subtest 'split_online invalid height' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ height } = $utils->invalidize_param_value('split_online', 'height', $params{ height }, 'int');
    $utils->initialize('split_online', 'height', $params{ height });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'height', $params{ height }, 'int', $@);
    } else {
        $utils->assert_no_error('split_online', 'height', 'int');
    }
};

subtest 'split_online invalid from' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ from } = $utils->invalidize_param_value('split_online', 'from', $params{ from }, 'int');
    $utils->initialize('split_online', 'from', $params{ from });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'from', $params{ from }, 'int', $@);
    } else {
        $utils->assert_no_error('split_online', 'from', 'int');
    }
};

subtest 'split_online invalid to' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ to } = $utils->invalidize_param_value('split_online', 'to', $params{ to }, 'int');
    $utils->initialize('split_online', 'to', $params{ to });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'to', $params{ to }, 'int', $@);
    } else {
        $utils->assert_no_error('split_online', 'to', 'int');
    }
};

subtest 'split_online invalid password' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ password } = $utils->invalidize_param_value('split_online', 'password', $params{ password }, 'string');
    $utils->initialize('split_online', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('split_online', 'password', 'string');
    }
};

subtest 'split_online invalid storage' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ storage } = $utils->invalidize_param_value('split_online', 'storage', $params{ storage }, 'string');
    $utils->initialize('split_online', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('split_online', 'storage', 'string');
    }
};

subtest 'split_online invalid fonts_folder' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ fonts_folder } = $utils->invalidize_param_value('split_online', 'fonts_folder', $params{ fonts_folder }, 'string');
    $utils->initialize('split_online', 'fonts_folder', $params{ fonts_folder });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'fonts_folder', $params{ fonts_folder }, 'string', $@);
    } else {
        $utils->assert_no_error('split_online', 'fonts_folder', 'string');
    }
};

subtest 'split_online invalid options' => sub {
    my %params = ('document' => $utils->get_param_value('split_online', 'document', 'File'), 'format' => $utils->get_param_value('split_online', 'format', 'string'), 'width' => $utils->get_param_value('split_online', 'width', 'int'), 'height' => $utils->get_param_value('split_online', 'height', 'int'), 'from' => $utils->get_param_value('split_online', 'from', 'int'), 'to' => $utils->get_param_value('split_online', 'to', 'int'), 'password' => $utils->get_param_value('split_online', 'password', 'string'), 'storage' => $utils->get_param_value('split_online', 'storage', 'string'), 'fonts_folder' => $utils->get_param_value('split_online', 'fonts_folder', 'string'), 'options' => $utils->get_param_value('split_online', 'options', 'ExportOptions'));
    $params{ options } = $utils->invalidize_param_value('split_online', 'options', $params{ options }, 'ExportOptions');
    $utils->initialize('split_online', 'options', $params{ options });

    eval {
        my $result = $utils->{api}->split_online(%params);
    };
    if ($@) {
        $utils->assert_error('split_online', 'options', $params{ options }, 'ExportOptions', $@);
    } else {
        $utils->assert_no_error('split_online', 'options', 'ExportOptions');
    }
};

#
# split_table_cell test
#
subtest 'split_table_cell' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $utils->initialize('split_table_cell', '');
    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        fail("split_table_cell raised an exception: $@");
    }
    pass();
};

subtest 'split_table_cell invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('split_table_cell', 'name', $params{ name }, 'string');
    $utils->initialize('split_table_cell', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'name', 'string');
    }
};

subtest 'split_table_cell invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('split_table_cell', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('split_table_cell', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'slide_index', 'int');
    }
};

subtest 'split_table_cell invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('split_table_cell', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('split_table_cell', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'shape_index', 'int');
    }
};

subtest 'split_table_cell invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('split_table_cell', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('split_table_cell', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'row_index', 'int');
    }
};

subtest 'split_table_cell invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('split_table_cell', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('split_table_cell', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'cell_index', 'int');
    }
};

subtest 'split_table_cell invalid split_type' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ split_type } = $utils->invalidize_param_value('split_table_cell', 'split_type', $params{ split_type }, 'string');
    $utils->initialize('split_table_cell', 'split_type', $params{ split_type });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'split_type', $params{ split_type }, 'string', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'split_type', 'string');
    }
};

subtest 'split_table_cell invalid value' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ value } = $utils->invalidize_param_value('split_table_cell', 'value', $params{ value }, 'double');
    $utils->initialize('split_table_cell', 'value', $params{ value });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'value', $params{ value }, 'double', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'value', 'double');
    }
};

subtest 'split_table_cell invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('split_table_cell', 'password', $params{ password }, 'string');
    $utils->initialize('split_table_cell', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'password', 'string');
    }
};

subtest 'split_table_cell invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('split_table_cell', 'folder', $params{ folder }, 'string');
    $utils->initialize('split_table_cell', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'folder', 'string');
    }
};

subtest 'split_table_cell invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('split_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('split_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('split_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('split_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('split_table_cell', 'cell_index', 'int'), 'split_type' => $utils->get_param_value('split_table_cell', 'split_type', 'string'), 'value' => $utils->get_param_value('split_table_cell', 'value', 'double'), 'password' => $utils->get_param_value('split_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('split_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('split_table_cell', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('split_table_cell', 'storage', $params{ storage }, 'string');
    $utils->initialize('split_table_cell', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->split_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('split_table_cell', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('split_table_cell', 'storage', 'string');
    }
};

#
# storage_exists test
#
subtest 'storage_exists' => sub {
    my %params = ('storage_name' => $utils->get_param_value('storage_exists', 'storage_name', 'string'));
    $utils->initialize('storage_exists', '');
    eval {
        my $result = $utils->{api}->storage_exists(%params);
    };
    if ($@) {
        fail("storage_exists raised an exception: $@");
    }
    pass();
};

subtest 'storage_exists invalid storage_name' => sub {
    my %params = ('storage_name' => $utils->get_param_value('storage_exists', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('storage_exists', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('storage_exists', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->storage_exists(%params);
    };
    if ($@) {
        $utils->assert_error('storage_exists', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('storage_exists', 'storage_name', 'string');
    }
};

#
# update_animation_effect test
#
subtest 'update_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $utils->initialize('update_animation_effect', '');
    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        fail("update_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'update_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_animation_effect', 'name', $params{ name }, 'string');
    $utils->initialize('update_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'name', 'string');
    }
};

subtest 'update_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_animation_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'slide_index', 'int');
    }
};

subtest 'update_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('update_animation_effect', 'effect_index', $params{ effect_index }, 'int');
    $utils->initialize('update_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'effect_index', $params{ effect_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'effect_index', 'int');
    }
};

subtest 'update_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('update_animation_effect', 'effect', $params{ effect }, 'Effect');
    $utils->initialize('update_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'effect', $params{ effect }, 'Effect', $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'effect', 'Effect');
    }
};

subtest 'update_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_animation_effect', 'password', $params{ password }, 'string');
    $utils->initialize('update_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'password', 'string');
    }
};

subtest 'update_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_animation_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'folder', 'string');
    }
};

subtest 'update_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_effect', 'slide_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_animation_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_animation_effect', 'storage', 'string');
    }
};

#
# update_animation_interactive_sequence_effect test
#
subtest 'update_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('update_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("update_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'update_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'name', $params{ name }, 'string');
    $utils->initialize('update_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'name', 'string');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'slide_index', 'int');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int');
    $utils->initialize('update_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'sequence_index', 'int');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, 'int');
    $utils->initialize('update_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'effect_index', 'int');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'effect', $params{ effect }, 'Effect');
    $utils->initialize('update_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'effect', $params{ effect }, 'Effect', $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'effect', 'Effect');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'password', $params{ password }, 'string');
    $utils->initialize('update_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'password', 'string');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'folder', 'string');
    }
};

subtest 'update_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'slide_index', 'int'), 'sequence_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_animation_interactive_sequence_effect', 'storage', 'string');
    }
};

#
# update_chart_category test
#
subtest 'update_chart_category' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $utils->initialize('update_chart_category', '');
    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        fail("update_chart_category raised an exception: $@");
    }
    pass();
};

subtest 'update_chart_category invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_chart_category', 'name', $params{ name }, 'string');
    $utils->initialize('update_chart_category', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'name', 'string');
    }
};

subtest 'update_chart_category invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_chart_category', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_chart_category', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'slide_index', 'int');
    }
};

subtest 'update_chart_category invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_chart_category', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_chart_category', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'shape_index', 'int');
    }
};

subtest 'update_chart_category invalid category_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ category_index } = $utils->invalidize_param_value('update_chart_category', 'category_index', $params{ category_index }, 'int');
    $utils->initialize('update_chart_category', 'category_index', $params{ category_index });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'category_index', $params{ category_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'category_index', 'int');
    }
};

subtest 'update_chart_category invalid category' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ category } = $utils->invalidize_param_value('update_chart_category', 'category', $params{ category }, 'ChartCategory');
    $utils->initialize('update_chart_category', 'category', $params{ category });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'category', $params{ category }, 'ChartCategory', $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'category', 'ChartCategory');
    }
};

subtest 'update_chart_category invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_chart_category', 'password', $params{ password }, 'string');
    $utils->initialize('update_chart_category', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'password', 'string');
    }
};

subtest 'update_chart_category invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_chart_category', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_chart_category', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'folder', 'string');
    }
};

subtest 'update_chart_category invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_category', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_category', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_category', 'shape_index', 'int'), 'category_index' => $utils->get_param_value('update_chart_category', 'category_index', 'int'), 'category' => $utils->get_param_value('update_chart_category', 'category', 'ChartCategory'), 'password' => $utils->get_param_value('update_chart_category', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_category', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_category', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_chart_category', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_chart_category', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_chart_category(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_category', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_category', 'storage', 'string');
    }
};

#
# update_chart_data_point test
#
subtest 'update_chart_data_point' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $utils->initialize('update_chart_data_point', '');
    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        fail("update_chart_data_point raised an exception: $@");
    }
    pass();
};

subtest 'update_chart_data_point invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_chart_data_point', 'name', $params{ name }, 'string');
    $utils->initialize('update_chart_data_point', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'name', 'string');
    }
};

subtest 'update_chart_data_point invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_chart_data_point', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_chart_data_point', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'slide_index', 'int');
    }
};

subtest 'update_chart_data_point invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_chart_data_point', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_chart_data_point', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'shape_index', 'int');
    }
};

subtest 'update_chart_data_point invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('update_chart_data_point', 'series_index', $params{ series_index }, 'int');
    $utils->initialize('update_chart_data_point', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'series_index', $params{ series_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'series_index', 'int');
    }
};

subtest 'update_chart_data_point invalid point_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ point_index } = $utils->invalidize_param_value('update_chart_data_point', 'point_index', $params{ point_index }, 'int');
    $utils->initialize('update_chart_data_point', 'point_index', $params{ point_index });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'point_index', $params{ point_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'point_index', 'int');
    }
};

subtest 'update_chart_data_point invalid data_point' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ data_point } = $utils->invalidize_param_value('update_chart_data_point', 'data_point', $params{ data_point }, 'DataPoint');
    $utils->initialize('update_chart_data_point', 'data_point', $params{ data_point });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'data_point', $params{ data_point }, 'DataPoint', $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'data_point', 'DataPoint');
    }
};

subtest 'update_chart_data_point invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_chart_data_point', 'password', $params{ password }, 'string');
    $utils->initialize('update_chart_data_point', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'password', 'string');
    }
};

subtest 'update_chart_data_point invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_chart_data_point', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_chart_data_point', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'folder', 'string');
    }
};

subtest 'update_chart_data_point invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_data_point', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_data_point', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_data_point', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_data_point', 'series_index', 'int'), 'point_index' => $utils->get_param_value('update_chart_data_point', 'point_index', 'int'), 'data_point' => $utils->get_param_value('update_chart_data_point', 'data_point', 'DataPoint'), 'password' => $utils->get_param_value('update_chart_data_point', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_data_point', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_data_point', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_chart_data_point', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_chart_data_point', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_chart_data_point(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_data_point', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_data_point', 'storage', 'string');
    }
};

#
# update_chart_series test
#
subtest 'update_chart_series' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $utils->initialize('update_chart_series', '');
    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        fail("update_chart_series raised an exception: $@");
    }
    pass();
};

subtest 'update_chart_series invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_chart_series', 'name', $params{ name }, 'string');
    $utils->initialize('update_chart_series', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'name', 'string');
    }
};

subtest 'update_chart_series invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_chart_series', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_chart_series', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'slide_index', 'int');
    }
};

subtest 'update_chart_series invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_chart_series', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_chart_series', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'shape_index', 'int');
    }
};

subtest 'update_chart_series invalid series_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ series_index } = $utils->invalidize_param_value('update_chart_series', 'series_index', $params{ series_index }, 'int');
    $utils->initialize('update_chart_series', 'series_index', $params{ series_index });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'series_index', $params{ series_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'series_index', 'int');
    }
};

subtest 'update_chart_series invalid series' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ series } = $utils->invalidize_param_value('update_chart_series', 'series', $params{ series }, 'Series');
    $utils->initialize('update_chart_series', 'series', $params{ series });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'series', $params{ series }, 'Series', $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'series', 'Series');
    }
};

subtest 'update_chart_series invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_chart_series', 'password', $params{ password }, 'string');
    $utils->initialize('update_chart_series', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'password', 'string');
    }
};

subtest 'update_chart_series invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_chart_series', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_chart_series', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'folder', 'string');
    }
};

subtest 'update_chart_series invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_chart_series', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_chart_series', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_chart_series', 'shape_index', 'int'), 'series_index' => $utils->get_param_value('update_chart_series', 'series_index', 'int'), 'series' => $utils->get_param_value('update_chart_series', 'series', 'Series'), 'password' => $utils->get_param_value('update_chart_series', 'password', 'string'), 'folder' => $utils->get_param_value('update_chart_series', 'folder', 'string'), 'storage' => $utils->get_param_value('update_chart_series', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_chart_series', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_chart_series', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_chart_series(%params);
    };
    if ($@) {
        $utils->assert_error('update_chart_series', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_chart_series', 'storage', 'string');
    }
};

#
# update_layout_slide test
#
subtest 'update_layout_slide' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $utils->initialize('update_layout_slide', '');
    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        fail("update_layout_slide raised an exception: $@");
    }
    pass();
};

subtest 'update_layout_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_layout_slide', 'name', $params{ name }, 'string');
    $utils->initialize('update_layout_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'name', 'string');
    }
};

subtest 'update_layout_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_layout_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_layout_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'slide_index', 'int');
    }
};

subtest 'update_layout_slide invalid slide_dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ slide_dto } = $utils->invalidize_param_value('update_layout_slide', 'slide_dto', $params{ slide_dto }, 'LayoutSlide');
    $utils->initialize('update_layout_slide', 'slide_dto', $params{ slide_dto });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'slide_dto', $params{ slide_dto }, 'LayoutSlide', $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'slide_dto', 'LayoutSlide');
    }
};

subtest 'update_layout_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_layout_slide', 'password', $params{ password }, 'string');
    $utils->initialize('update_layout_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'password', 'string');
    }
};

subtest 'update_layout_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_layout_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_layout_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'folder', 'string');
    }
};

subtest 'update_layout_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_layout_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_layout_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_layout_slide', 'slide_dto', 'LayoutSlide'), 'password' => $utils->get_param_value('update_layout_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_layout_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_layout_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_layout_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_layout_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_layout_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_layout_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_layout_slide', 'storage', 'string');
    }
};

#
# update_notes_slide test
#
subtest 'update_notes_slide' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $utils->initialize('update_notes_slide', '');
    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        fail("update_notes_slide raised an exception: $@");
    }
    pass();
};

subtest 'update_notes_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_notes_slide', 'name', $params{ name }, 'string');
    $utils->initialize('update_notes_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'name', 'string');
    }
};

subtest 'update_notes_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_notes_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_notes_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'slide_index', 'int');
    }
};

subtest 'update_notes_slide invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_notes_slide', 'dto', $params{ dto }, 'NotesSlide');
    $utils->initialize('update_notes_slide', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'dto', $params{ dto }, 'NotesSlide', $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'dto', 'NotesSlide');
    }
};

subtest 'update_notes_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_notes_slide', 'password', $params{ password }, 'string');
    $utils->initialize('update_notes_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'password', 'string');
    }
};

subtest 'update_notes_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_notes_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_notes_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'folder', 'string');
    }
};

subtest 'update_notes_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_notes_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_notes_slide', 'slide_index', 'int'), 'dto' => $utils->get_param_value('update_notes_slide', 'dto', 'NotesSlide'), 'password' => $utils->get_param_value('update_notes_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_notes_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_notes_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_notes_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_notes_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_notes_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_notes_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_notes_slide', 'storage', 'string');
    }
};

#
# update_paragraph test
#
subtest 'update_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $utils->initialize('update_paragraph', '');
    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        fail("update_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'update_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('update_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'name', 'string');
    }
};

subtest 'update_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'slide_index', 'int');
    }
};

subtest 'update_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'shape_index', 'int');
    }
};

subtest 'update_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('update_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'paragraph_index', 'int');
    }
};

subtest 'update_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_paragraph', 'dto', $params{ dto }, 'Paragraph');
    $utils->initialize('update_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'dto', $params{ dto }, 'Paragraph', $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'dto', 'Paragraph');
    }
};

subtest 'update_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('update_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'password', 'string');
    }
};

subtest 'update_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'folder', 'string');
    }
};

subtest 'update_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'storage', 'string');
    }
};

subtest 'update_paragraph invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_paragraph', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('update_paragraph', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('update_paragraph', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->update_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_paragraph', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('update_paragraph', 'sub_shape', 'string');
    }
};

#
# update_portion test
#
subtest 'update_portion' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $utils->initialize('update_portion', '');
    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        fail("update_portion raised an exception: $@");
    }
    pass();
};

subtest 'update_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_portion', 'name', $params{ name }, 'string');
    $utils->initialize('update_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_portion', 'name', 'string');
    }
};

subtest 'update_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_portion', 'slide_index', 'int');
    }
};

subtest 'update_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_portion', 'shape_index', 'int');
    }
};

subtest 'update_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('update_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_portion', 'paragraph_index', 'int');
    }
};

subtest 'update_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('update_portion', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('update_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_portion', 'portion_index', 'int');
    }
};

subtest 'update_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_portion', 'dto', $params{ dto }, 'Portion');
    $utils->initialize('update_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'dto', $params{ dto }, 'Portion', $@);
    } else {
        $utils->assert_no_error('update_portion', 'dto', 'Portion');
    }
};

subtest 'update_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_portion', 'password', $params{ password }, 'string');
    $utils->initialize('update_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_portion', 'password', 'string');
    }
};

subtest 'update_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_portion', 'folder', 'string');
    }
};

subtest 'update_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_portion', 'storage', 'string');
    }
};

subtest 'update_portion invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_portion', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('update_portion', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('update_portion', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->update_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_portion', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('update_portion', 'sub_shape', 'string');
    }
};

#
# update_section test
#
subtest 'update_section' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $utils->initialize('update_section', '');
    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        fail("update_section raised an exception: $@");
    }
    pass();
};

subtest 'update_section invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_section', 'name', $params{ name }, 'string');
    $utils->initialize('update_section', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_section', 'name', 'string');
    }
};

subtest 'update_section invalid section_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ section_index } = $utils->invalidize_param_value('update_section', 'section_index', $params{ section_index }, 'int');
    $utils->initialize('update_section', 'section_index', $params{ section_index });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'section_index', $params{ section_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_section', 'section_index', 'int');
    }
};

subtest 'update_section invalid section_name' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ section_name } = $utils->invalidize_param_value('update_section', 'section_name', $params{ section_name }, 'string');
    $utils->initialize('update_section', 'section_name', $params{ section_name });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'section_name', $params{ section_name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_section', 'section_name', 'string');
    }
};

subtest 'update_section invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_section', 'password', $params{ password }, 'string');
    $utils->initialize('update_section', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_section', 'password', 'string');
    }
};

subtest 'update_section invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_section', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_section', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_section', 'folder', 'string');
    }
};

subtest 'update_section invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_section', 'name', 'string'), 'section_index' => $utils->get_param_value('update_section', 'section_index', 'int'), 'section_name' => $utils->get_param_value('update_section', 'section_name', 'string'), 'password' => $utils->get_param_value('update_section', 'password', 'string'), 'folder' => $utils->get_param_value('update_section', 'folder', 'string'), 'storage' => $utils->get_param_value('update_section', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_section', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_section', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_section(%params);
    };
    if ($@) {
        $utils->assert_error('update_section', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_section', 'storage', 'string');
    }
};

#
# update_shape test
#
subtest 'update_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_shape', 'sub_shape', 'string'));
    $utils->initialize('update_shape', '');
    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        fail("update_shape raised an exception: $@");
    }
    pass();
};

subtest 'update_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_shape', 'name', $params{ name }, 'string');
    $utils->initialize('update_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_shape', 'name', 'string');
    }
};

subtest 'update_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_shape', 'slide_index', 'int');
    }
};

subtest 'update_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_shape', 'shape_index', 'int');
    }
};

subtest 'update_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_shape', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_shape', 'dto', $params{ dto }, 'ShapeBase');
    $utils->initialize('update_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'dto', $params{ dto }, 'ShapeBase', $@);
    } else {
        $utils->assert_no_error('update_shape', 'dto', 'ShapeBase');
    }
};

subtest 'update_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_shape', 'password', $params{ password }, 'string');
    $utils->initialize('update_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_shape', 'password', 'string');
    }
};

subtest 'update_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_shape', 'folder', 'string');
    }
};

subtest 'update_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_shape', 'storage', 'string');
    }
};

subtest 'update_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_shape', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('update_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('update_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->update_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('update_shape', 'sub_shape', 'string');
    }
};

#
# update_slide test
#
subtest 'update_slide' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $utils->initialize('update_slide', '');
    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        fail("update_slide raised an exception: $@");
    }
    pass();
};

subtest 'update_slide invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_slide', 'name', $params{ name }, 'string');
    $utils->initialize('update_slide', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_slide', 'name', 'string');
    }
};

subtest 'update_slide invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_slide', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_slide', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_slide', 'slide_index', 'int');
    }
};

subtest 'update_slide invalid slide_dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ slide_dto } = $utils->invalidize_param_value('update_slide', 'slide_dto', $params{ slide_dto }, 'Slide');
    $utils->initialize('update_slide', 'slide_dto', $params{ slide_dto });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'slide_dto', $params{ slide_dto }, 'Slide', $@);
    } else {
        $utils->assert_no_error('update_slide', 'slide_dto', 'Slide');
    }
};

subtest 'update_slide invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_slide', 'password', $params{ password }, 'string');
    $utils->initialize('update_slide', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_slide', 'password', 'string');
    }
};

subtest 'update_slide invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_slide', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_slide', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_slide', 'folder', 'string');
    }
};

subtest 'update_slide invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_slide', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_slide', 'slide_index', 'int'), 'slide_dto' => $utils->get_param_value('update_slide', 'slide_dto', 'Slide'), 'password' => $utils->get_param_value('update_slide', 'password', 'string'), 'folder' => $utils->get_param_value('update_slide', 'folder', 'string'), 'storage' => $utils->get_param_value('update_slide', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_slide', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_slide', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_slide(%params);
    };
    if ($@) {
        $utils->assert_error('update_slide', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_slide', 'storage', 'string');
    }
};

#
# update_special_slide_animation_effect test
#
subtest 'update_special_slide_animation_effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $utils->initialize('update_special_slide_animation_effect', '');
    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        fail("update_special_slide_animation_effect raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_animation_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'name', $params{ name }, 'string');
    $utils->initialize('update_special_slide_animation_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'name', 'string');
    }
};

subtest 'update_special_slide_animation_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_special_slide_animation_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'slide_index', 'int');
    }
};

subtest 'update_special_slide_animation_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('update_special_slide_animation_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'slide_type', 'string');
    }
};

subtest 'update_special_slide_animation_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'effect_index', $params{ effect_index }, 'int');
    $utils->initialize('update_special_slide_animation_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'effect_index', $params{ effect_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'effect_index', 'int');
    }
};

subtest 'update_special_slide_animation_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'effect', $params{ effect }, 'Effect');
    $utils->initialize('update_special_slide_animation_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'effect', $params{ effect }, 'Effect', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'effect', 'Effect');
    }
};

subtest 'update_special_slide_animation_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'password', $params{ password }, 'string');
    $utils->initialize('update_special_slide_animation_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'password', 'string');
    }
};

subtest 'update_special_slide_animation_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_special_slide_animation_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'folder', 'string');
    }
};

subtest 'update_special_slide_animation_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_effect', 'slide_type', 'string'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_animation_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_special_slide_animation_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_effect', 'storage', 'string');
    }
};

#
# update_special_slide_animation_interactive_sequence_effect test
#
subtest 'update_special_slide_animation_interactive_sequence_effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', '');
    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        fail("update_special_slide_animation_interactive_sequence_effect raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', $params{ name }, 'string');
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'name', 'string');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid sequence_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ sequence_index } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int');
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', $params{ sequence_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid effect_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect_index } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, 'int');
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'effect_index', $params{ effect_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid effect' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ effect } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect }, 'Effect');
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'effect', $params{ effect }, 'Effect', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', $params{ password }, 'string');
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'password', 'string');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string');
    }
};

subtest 'update_special_slide_animation_interactive_sequence_effect invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'string'), 'sequence_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int'), 'effect_index' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int'), 'effect' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect'), 'password' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_animation_interactive_sequence_effect(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_animation_interactive_sequence_effect', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_animation_interactive_sequence_effect', 'storage', 'string');
    }
};

#
# update_special_slide_paragraph test
#
subtest 'update_special_slide_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $utils->initialize('update_special_slide_paragraph', '');
    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        fail("update_special_slide_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('update_special_slide_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'name', 'string');
    }
};

subtest 'update_special_slide_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_special_slide_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'slide_index', 'int');
    }
};

subtest 'update_special_slide_paragraph invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_paragraph', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('update_special_slide_paragraph', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'slide_type', 'string');
    }
};

subtest 'update_special_slide_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_special_slide_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_special_slide_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'shape_index', 'int');
    }
};

subtest 'update_special_slide_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('update_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'paragraph_index', 'int');
    }
};

subtest 'update_special_slide_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_special_slide_paragraph', 'dto', $params{ dto }, 'Paragraph');
    $utils->initialize('update_special_slide_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'dto', $params{ dto }, 'Paragraph', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'dto', 'Paragraph');
    }
};

subtest 'update_special_slide_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('update_special_slide_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'password', 'string');
    }
};

subtest 'update_special_slide_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_special_slide_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'folder', 'string');
    }
};

subtest 'update_special_slide_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_special_slide_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'storage', 'string');
    }
};

subtest 'update_special_slide_paragraph invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_paragraph', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_paragraph', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_paragraph', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_special_slide_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_paragraph', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_paragraph', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('update_special_slide_paragraph', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('update_special_slide_paragraph', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->update_special_slide_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_paragraph', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_paragraph', 'sub_shape', 'string');
    }
};

#
# update_special_slide_portion test
#
subtest 'update_special_slide_portion' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $utils->initialize('update_special_slide_portion', '');
    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        fail("update_special_slide_portion raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_portion', 'name', $params{ name }, 'string');
    $utils->initialize('update_special_slide_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'name', 'string');
    }
};

subtest 'update_special_slide_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_special_slide_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'slide_index', 'int');
    }
};

subtest 'update_special_slide_portion invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_portion', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('update_special_slide_portion', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'slide_type', 'string');
    }
};

subtest 'update_special_slide_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_special_slide_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_special_slide_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'shape_index', 'int');
    }
};

subtest 'update_special_slide_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('update_special_slide_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'paragraph_index', 'int');
    }
};

subtest 'update_special_slide_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('update_special_slide_portion', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('update_special_slide_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'portion_index', 'int');
    }
};

subtest 'update_special_slide_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_special_slide_portion', 'dto', $params{ dto }, 'Portion');
    $utils->initialize('update_special_slide_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'dto', $params{ dto }, 'Portion', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'dto', 'Portion');
    }
};

subtest 'update_special_slide_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_portion', 'password', $params{ password }, 'string');
    $utils->initialize('update_special_slide_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'password', 'string');
    }
};

subtest 'update_special_slide_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_special_slide_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'folder', 'string');
    }
};

subtest 'update_special_slide_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_special_slide_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'storage', 'string');
    }
};

subtest 'update_special_slide_portion invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_portion', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_portion', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_portion', 'shape_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_special_slide_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_special_slide_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_special_slide_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_portion', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_portion', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('update_special_slide_portion', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('update_special_slide_portion', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->update_special_slide_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_portion', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_portion', 'sub_shape', 'string');
    }
};

#
# update_special_slide_shape test
#
subtest 'update_special_slide_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $utils->initialize('update_special_slide_shape', '');
    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        fail("update_special_slide_shape raised an exception: $@");
    }
    pass();
};

subtest 'update_special_slide_shape invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_special_slide_shape', 'name', $params{ name }, 'string');
    $utils->initialize('update_special_slide_shape', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'name', 'string');
    }
};

subtest 'update_special_slide_shape invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_special_slide_shape', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_special_slide_shape', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'slide_index', 'int');
    }
};

subtest 'update_special_slide_shape invalid slide_type' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $params{ slide_type } = $utils->invalidize_param_value('update_special_slide_shape', 'slide_type', $params{ slide_type }, 'string');
    $utils->initialize('update_special_slide_shape', 'slide_type', $params{ slide_type });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'slide_type', $params{ slide_type }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'slide_type', 'string');
    }
};

subtest 'update_special_slide_shape invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_special_slide_shape', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_special_slide_shape', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'shape_index', 'int');
    }
};

subtest 'update_special_slide_shape invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_special_slide_shape', 'dto', $params{ dto }, 'ShapeBase');
    $utils->initialize('update_special_slide_shape', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'dto', $params{ dto }, 'ShapeBase', $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'dto', 'ShapeBase');
    }
};

subtest 'update_special_slide_shape invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_special_slide_shape', 'password', $params{ password }, 'string');
    $utils->initialize('update_special_slide_shape', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'password', 'string');
    }
};

subtest 'update_special_slide_shape invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_special_slide_shape', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_special_slide_shape', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'folder', 'string');
    }
};

subtest 'update_special_slide_shape invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_special_slide_shape', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_special_slide_shape', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'storage', 'string');
    }
};

subtest 'update_special_slide_shape invalid sub_shape' => sub {
    my %params = ('name' => $utils->get_param_value('update_special_slide_shape', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_special_slide_shape', 'slide_index', 'int'), 'slide_type' => $utils->get_param_value('update_special_slide_shape', 'slide_type', 'string'), 'shape_index' => $utils->get_param_value('update_special_slide_shape', 'shape_index', 'int'), 'dto' => $utils->get_param_value('update_special_slide_shape', 'dto', 'ShapeBase'), 'password' => $utils->get_param_value('update_special_slide_shape', 'password', 'string'), 'folder' => $utils->get_param_value('update_special_slide_shape', 'folder', 'string'), 'storage' => $utils->get_param_value('update_special_slide_shape', 'storage', 'string'), 'sub_shape' => $utils->get_param_value('update_special_slide_shape', 'sub_shape', 'string'));
    $params{ sub_shape } = $utils->invalidize_param_value('update_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string');
    $utils->initialize('update_special_slide_shape', 'sub_shape', $params{ sub_shape });

    eval {
        my $result = $utils->{api}->update_special_slide_shape(%params);
    };
    if ($@) {
        $utils->assert_error('update_special_slide_shape', 'sub_shape', $params{ sub_shape }, 'string', $@);
    } else {
        $utils->assert_no_error('update_special_slide_shape', 'sub_shape', 'string');
    }
};

#
# update_table_cell test
#
subtest 'update_table_cell' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $utils->initialize('update_table_cell', '');
    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        fail("update_table_cell raised an exception: $@");
    }
    pass();
};

subtest 'update_table_cell invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_table_cell', 'name', $params{ name }, 'string');
    $utils->initialize('update_table_cell', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell', 'name', 'string');
    }
};

subtest 'update_table_cell invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_table_cell', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_table_cell', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell', 'slide_index', 'int');
    }
};

subtest 'update_table_cell invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_table_cell', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_table_cell', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell', 'shape_index', 'int');
    }
};

subtest 'update_table_cell invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('update_table_cell', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('update_table_cell', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell', 'row_index', 'int');
    }
};

subtest 'update_table_cell invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('update_table_cell', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('update_table_cell', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell', 'cell_index', 'int');
    }
};

subtest 'update_table_cell invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_table_cell', 'dto', $params{ dto }, 'TableCell');
    $utils->initialize('update_table_cell', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell', 'dto', $params{ dto }, 'TableCell', $@);
    } else {
        $utils->assert_no_error('update_table_cell', 'dto', 'TableCell');
    }
};

subtest 'update_table_cell invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_table_cell', 'password', $params{ password }, 'string');
    $utils->initialize('update_table_cell', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell', 'password', 'string');
    }
};

subtest 'update_table_cell invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_table_cell', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_table_cell', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell', 'folder', 'string');
    }
};

subtest 'update_table_cell invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell', 'cell_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell', 'dto', 'TableCell'), 'password' => $utils->get_param_value('update_table_cell', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_table_cell', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_table_cell', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_table_cell(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell', 'storage', 'string');
    }
};

#
# update_table_cell_paragraph test
#
subtest 'update_table_cell_paragraph' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $utils->initialize('update_table_cell_paragraph', '');
    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        fail("update_table_cell_paragraph raised an exception: $@");
    }
    pass();
};

subtest 'update_table_cell_paragraph invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_table_cell_paragraph', 'name', $params{ name }, 'string');
    $utils->initialize('update_table_cell_paragraph', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'name', 'string');
    }
};

subtest 'update_table_cell_paragraph invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_table_cell_paragraph', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_table_cell_paragraph', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'slide_index', 'int');
    }
};

subtest 'update_table_cell_paragraph invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_table_cell_paragraph', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_table_cell_paragraph', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'shape_index', 'int');
    }
};

subtest 'update_table_cell_paragraph invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('update_table_cell_paragraph', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('update_table_cell_paragraph', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'row_index', 'int');
    }
};

subtest 'update_table_cell_paragraph invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('update_table_cell_paragraph', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('update_table_cell_paragraph', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'cell_index', 'int');
    }
};

subtest 'update_table_cell_paragraph invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_table_cell_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('update_table_cell_paragraph', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'paragraph_index', 'int');
    }
};

subtest 'update_table_cell_paragraph invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_table_cell_paragraph', 'dto', $params{ dto }, 'Paragraph');
    $utils->initialize('update_table_cell_paragraph', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'dto', $params{ dto }, 'Paragraph', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'dto', 'Paragraph');
    }
};

subtest 'update_table_cell_paragraph invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_table_cell_paragraph', 'password', $params{ password }, 'string');
    $utils->initialize('update_table_cell_paragraph', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'password', 'string');
    }
};

subtest 'update_table_cell_paragraph invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_table_cell_paragraph', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_table_cell_paragraph', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'folder', 'string');
    }
};

subtest 'update_table_cell_paragraph invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_paragraph', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_paragraph', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_paragraph', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_paragraph', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_paragraph', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_paragraph', 'paragraph_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_paragraph', 'dto', 'Paragraph'), 'password' => $utils->get_param_value('update_table_cell_paragraph', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_paragraph', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_paragraph', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_table_cell_paragraph', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_table_cell_paragraph', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_table_cell_paragraph(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_paragraph', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell_paragraph', 'storage', 'string');
    }
};

#
# update_table_cell_portion test
#
subtest 'update_table_cell_portion' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $utils->initialize('update_table_cell_portion', '');
    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        fail("update_table_cell_portion raised an exception: $@");
    }
    pass();
};

subtest 'update_table_cell_portion invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_table_cell_portion', 'name', $params{ name }, 'string');
    $utils->initialize('update_table_cell_portion', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'name', 'string');
    }
};

subtest 'update_table_cell_portion invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_table_cell_portion', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_table_cell_portion', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'slide_index', 'int');
    }
};

subtest 'update_table_cell_portion invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_table_cell_portion', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_table_cell_portion', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'shape_index', 'int');
    }
};

subtest 'update_table_cell_portion invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('update_table_cell_portion', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('update_table_cell_portion', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'row_index', 'int');
    }
};

subtest 'update_table_cell_portion invalid cell_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ cell_index } = $utils->invalidize_param_value('update_table_cell_portion', 'cell_index', $params{ cell_index }, 'int');
    $utils->initialize('update_table_cell_portion', 'cell_index', $params{ cell_index });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'cell_index', $params{ cell_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'cell_index', 'int');
    }
};

subtest 'update_table_cell_portion invalid paragraph_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ paragraph_index } = $utils->invalidize_param_value('update_table_cell_portion', 'paragraph_index', $params{ paragraph_index }, 'int');
    $utils->initialize('update_table_cell_portion', 'paragraph_index', $params{ paragraph_index });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'paragraph_index', $params{ paragraph_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'paragraph_index', 'int');
    }
};

subtest 'update_table_cell_portion invalid portion_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ portion_index } = $utils->invalidize_param_value('update_table_cell_portion', 'portion_index', $params{ portion_index }, 'int');
    $utils->initialize('update_table_cell_portion', 'portion_index', $params{ portion_index });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'portion_index', $params{ portion_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'portion_index', 'int');
    }
};

subtest 'update_table_cell_portion invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_table_cell_portion', 'dto', $params{ dto }, 'Portion');
    $utils->initialize('update_table_cell_portion', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'dto', $params{ dto }, 'Portion', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'dto', 'Portion');
    }
};

subtest 'update_table_cell_portion invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_table_cell_portion', 'password', $params{ password }, 'string');
    $utils->initialize('update_table_cell_portion', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'password', 'string');
    }
};

subtest 'update_table_cell_portion invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_table_cell_portion', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_table_cell_portion', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'folder', 'string');
    }
};

subtest 'update_table_cell_portion invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_cell_portion', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_cell_portion', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_cell_portion', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_cell_portion', 'row_index', 'int'), 'cell_index' => $utils->get_param_value('update_table_cell_portion', 'cell_index', 'int'), 'paragraph_index' => $utils->get_param_value('update_table_cell_portion', 'paragraph_index', 'int'), 'portion_index' => $utils->get_param_value('update_table_cell_portion', 'portion_index', 'int'), 'dto' => $utils->get_param_value('update_table_cell_portion', 'dto', 'Portion'), 'password' => $utils->get_param_value('update_table_cell_portion', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_cell_portion', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_cell_portion', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_table_cell_portion', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_table_cell_portion', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_table_cell_portion(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_cell_portion', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_cell_portion', 'storage', 'string');
    }
};

#
# update_table_row test
#
subtest 'update_table_row' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_row', 'row_index', 'int'), 'dto' => $utils->get_param_value('update_table_row', 'dto', 'TableRow'), 'password' => $utils->get_param_value('update_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_row', 'storage', 'string'));
    $utils->initialize('update_table_row', '');
    eval {
        my $result = $utils->{api}->update_table_row(%params);
    };
    if ($@) {
        fail("update_table_row raised an exception: $@");
    }
    pass();
};

subtest 'update_table_row invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_row', 'row_index', 'int'), 'dto' => $utils->get_param_value('update_table_row', 'dto', 'TableRow'), 'password' => $utils->get_param_value('update_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_row', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_table_row', 'name', $params{ name }, 'string');
    $utils->initialize('update_table_row', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_row', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_row', 'name', 'string');
    }
};

subtest 'update_table_row invalid slide_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_row', 'row_index', 'int'), 'dto' => $utils->get_param_value('update_table_row', 'dto', 'TableRow'), 'password' => $utils->get_param_value('update_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_row', 'storage', 'string'));
    $params{ slide_index } = $utils->invalidize_param_value('update_table_row', 'slide_index', $params{ slide_index }, 'int');
    $utils->initialize('update_table_row', 'slide_index', $params{ slide_index });

    eval {
        my $result = $utils->{api}->update_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_row', 'slide_index', $params{ slide_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_row', 'slide_index', 'int');
    }
};

subtest 'update_table_row invalid shape_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_row', 'row_index', 'int'), 'dto' => $utils->get_param_value('update_table_row', 'dto', 'TableRow'), 'password' => $utils->get_param_value('update_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_row', 'storage', 'string'));
    $params{ shape_index } = $utils->invalidize_param_value('update_table_row', 'shape_index', $params{ shape_index }, 'int');
    $utils->initialize('update_table_row', 'shape_index', $params{ shape_index });

    eval {
        my $result = $utils->{api}->update_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_row', 'shape_index', $params{ shape_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_row', 'shape_index', 'int');
    }
};

subtest 'update_table_row invalid row_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_row', 'row_index', 'int'), 'dto' => $utils->get_param_value('update_table_row', 'dto', 'TableRow'), 'password' => $utils->get_param_value('update_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_row', 'storage', 'string'));
    $params{ row_index } = $utils->invalidize_param_value('update_table_row', 'row_index', $params{ row_index }, 'int');
    $utils->initialize('update_table_row', 'row_index', $params{ row_index });

    eval {
        my $result = $utils->{api}->update_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_row', 'row_index', $params{ row_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_table_row', 'row_index', 'int');
    }
};

subtest 'update_table_row invalid dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_row', 'row_index', 'int'), 'dto' => $utils->get_param_value('update_table_row', 'dto', 'TableRow'), 'password' => $utils->get_param_value('update_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_row', 'storage', 'string'));
    $params{ dto } = $utils->invalidize_param_value('update_table_row', 'dto', $params{ dto }, 'TableRow');
    $utils->initialize('update_table_row', 'dto', $params{ dto });

    eval {
        my $result = $utils->{api}->update_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_row', 'dto', $params{ dto }, 'TableRow', $@);
    } else {
        $utils->assert_no_error('update_table_row', 'dto', 'TableRow');
    }
};

subtest 'update_table_row invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_row', 'row_index', 'int'), 'dto' => $utils->get_param_value('update_table_row', 'dto', 'TableRow'), 'password' => $utils->get_param_value('update_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_row', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_table_row', 'password', $params{ password }, 'string');
    $utils->initialize('update_table_row', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_row', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_row', 'password', 'string');
    }
};

subtest 'update_table_row invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_row', 'row_index', 'int'), 'dto' => $utils->get_param_value('update_table_row', 'dto', 'TableRow'), 'password' => $utils->get_param_value('update_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_row', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_table_row', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_table_row', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_row', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_row', 'folder', 'string');
    }
};

subtest 'update_table_row invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_table_row', 'name', 'string'), 'slide_index' => $utils->get_param_value('update_table_row', 'slide_index', 'int'), 'shape_index' => $utils->get_param_value('update_table_row', 'shape_index', 'int'), 'row_index' => $utils->get_param_value('update_table_row', 'row_index', 'int'), 'dto' => $utils->get_param_value('update_table_row', 'dto', 'TableRow'), 'password' => $utils->get_param_value('update_table_row', 'password', 'string'), 'folder' => $utils->get_param_value('update_table_row', 'folder', 'string'), 'storage' => $utils->get_param_value('update_table_row', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_table_row', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_table_row', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_table_row(%params);
    };
    if ($@) {
        $utils->assert_error('update_table_row', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_table_row', 'storage', 'string');
    }
};

#
# update_vba_module test
#
subtest 'update_vba_module' => sub {
    my %params = ('name' => $utils->get_param_value('update_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('update_vba_module', 'module_index', 'int'), 'module_dto' => $utils->get_param_value('update_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('update_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('update_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('update_vba_module', 'storage', 'string'));
    $utils->initialize('update_vba_module', '');
    eval {
        my $result = $utils->{api}->update_vba_module(%params);
    };
    if ($@) {
        fail("update_vba_module raised an exception: $@");
    }
    pass();
};

subtest 'update_vba_module invalid name' => sub {
    my %params = ('name' => $utils->get_param_value('update_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('update_vba_module', 'module_index', 'int'), 'module_dto' => $utils->get_param_value('update_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('update_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('update_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('update_vba_module', 'storage', 'string'));
    $params{ name } = $utils->invalidize_param_value('update_vba_module', 'name', $params{ name }, 'string');
    $utils->initialize('update_vba_module', 'name', $params{ name });

    eval {
        my $result = $utils->{api}->update_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('update_vba_module', 'name', $params{ name }, 'string', $@);
    } else {
        $utils->assert_no_error('update_vba_module', 'name', 'string');
    }
};

subtest 'update_vba_module invalid module_index' => sub {
    my %params = ('name' => $utils->get_param_value('update_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('update_vba_module', 'module_index', 'int'), 'module_dto' => $utils->get_param_value('update_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('update_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('update_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('update_vba_module', 'storage', 'string'));
    $params{ module_index } = $utils->invalidize_param_value('update_vba_module', 'module_index', $params{ module_index }, 'int');
    $utils->initialize('update_vba_module', 'module_index', $params{ module_index });

    eval {
        my $result = $utils->{api}->update_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('update_vba_module', 'module_index', $params{ module_index }, 'int', $@);
    } else {
        $utils->assert_no_error('update_vba_module', 'module_index', 'int');
    }
};

subtest 'update_vba_module invalid module_dto' => sub {
    my %params = ('name' => $utils->get_param_value('update_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('update_vba_module', 'module_index', 'int'), 'module_dto' => $utils->get_param_value('update_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('update_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('update_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('update_vba_module', 'storage', 'string'));
    $params{ module_dto } = $utils->invalidize_param_value('update_vba_module', 'module_dto', $params{ module_dto }, 'VbaModule');
    $utils->initialize('update_vba_module', 'module_dto', $params{ module_dto });

    eval {
        my $result = $utils->{api}->update_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('update_vba_module', 'module_dto', $params{ module_dto }, 'VbaModule', $@);
    } else {
        $utils->assert_no_error('update_vba_module', 'module_dto', 'VbaModule');
    }
};

subtest 'update_vba_module invalid password' => sub {
    my %params = ('name' => $utils->get_param_value('update_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('update_vba_module', 'module_index', 'int'), 'module_dto' => $utils->get_param_value('update_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('update_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('update_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('update_vba_module', 'storage', 'string'));
    $params{ password } = $utils->invalidize_param_value('update_vba_module', 'password', $params{ password }, 'string');
    $utils->initialize('update_vba_module', 'password', $params{ password });

    eval {
        my $result = $utils->{api}->update_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('update_vba_module', 'password', $params{ password }, 'string', $@);
    } else {
        $utils->assert_no_error('update_vba_module', 'password', 'string');
    }
};

subtest 'update_vba_module invalid folder' => sub {
    my %params = ('name' => $utils->get_param_value('update_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('update_vba_module', 'module_index', 'int'), 'module_dto' => $utils->get_param_value('update_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('update_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('update_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('update_vba_module', 'storage', 'string'));
    $params{ folder } = $utils->invalidize_param_value('update_vba_module', 'folder', $params{ folder }, 'string');
    $utils->initialize('update_vba_module', 'folder', $params{ folder });

    eval {
        my $result = $utils->{api}->update_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('update_vba_module', 'folder', $params{ folder }, 'string', $@);
    } else {
        $utils->assert_no_error('update_vba_module', 'folder', 'string');
    }
};

subtest 'update_vba_module invalid storage' => sub {
    my %params = ('name' => $utils->get_param_value('update_vba_module', 'name', 'string'), 'module_index' => $utils->get_param_value('update_vba_module', 'module_index', 'int'), 'module_dto' => $utils->get_param_value('update_vba_module', 'module_dto', 'VbaModule'), 'password' => $utils->get_param_value('update_vba_module', 'password', 'string'), 'folder' => $utils->get_param_value('update_vba_module', 'folder', 'string'), 'storage' => $utils->get_param_value('update_vba_module', 'storage', 'string'));
    $params{ storage } = $utils->invalidize_param_value('update_vba_module', 'storage', $params{ storage }, 'string');
    $utils->initialize('update_vba_module', 'storage', $params{ storage });

    eval {
        my $result = $utils->{api}->update_vba_module(%params);
    };
    if ($@) {
        $utils->assert_error('update_vba_module', 'storage', $params{ storage }, 'string', $@);
    } else {
        $utils->assert_no_error('update_vba_module', 'storage', 'string');
    }
};

#
# upload_file test
#
subtest 'upload_file' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $utils->initialize('upload_file', '');
    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        fail("upload_file raised an exception: $@");
    }
    pass();
};

subtest 'upload_file invalid path' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $params{ path } = $utils->invalidize_param_value('upload_file', 'path', $params{ path }, 'string');
    $utils->initialize('upload_file', 'path', $params{ path });

    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        $utils->assert_error('upload_file', 'path', $params{ path }, 'string', $@);
    } else {
        $utils->assert_no_error('upload_file', 'path', 'string');
    }
};

subtest 'upload_file invalid file' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $params{ file } = $utils->invalidize_param_value('upload_file', 'file', $params{ file }, 'File');
    $utils->initialize('upload_file', 'file', $params{ file });

    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        $utils->assert_error('upload_file', 'file', $params{ file }, 'File', $@);
    } else {
        $utils->assert_no_error('upload_file', 'file', 'File');
    }
};

subtest 'upload_file invalid storage_name' => sub {
    my %params = ('path' => $utils->get_param_value('upload_file', 'path', 'string'), 'file' => $utils->get_param_value('upload_file', 'file', 'File'), 'storage_name' => $utils->get_param_value('upload_file', 'storage_name', 'string'));
    $params{ storage_name } = $utils->invalidize_param_value('upload_file', 'storage_name', $params{ storage_name }, 'string');
    $utils->initialize('upload_file', 'storage_name', $params{ storage_name });

    eval {
        my $result = $utils->{api}->upload_file(%params);
    };
    if ($@) {
        $utils->assert_error('upload_file', 'storage_name', $params{ storage_name }, 'string', $@);
    } else {
        $utils->assert_no_error('upload_file', 'storage_name', 'string');
    }
};


done_testing;